
01-BLE_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015444  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001330  08015584  08015584  00016584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080168b4  080168b4  000178b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080168bc  080168bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080168c0  080168c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000174  20000008  080168c4  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  2000017c  08016a38  0001817c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001bc  08016a75  000181bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003060  200001d0  08016a86  000181d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20003230  08016a86  00018230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00019000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00019000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08016a86  000181e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0003d96e  00000000  00000000  00018a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008f0d  00000000  00000000  00056405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003370  00000000  00000000  0005f318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002704  00000000  00000000  00062688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00034515  00000000  00000000  00064d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00041eff  00000000  00000000  000992a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010d8eb  00000000  00000000  000db1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001e8a8b  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000df04  00000000  00000000  001e8ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000a3  00000000  00000000  001f69d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d0 	.word	0x200001d0
 800015c:	00000000 	.word	0x00000000
 8000160:	0801556c 	.word	0x0801556c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d4 	.word	0x200001d4
 800017c:	0801556c 	.word	0x0801556c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b988 	b.w	8000b24 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	468e      	mov	lr, r1
 8000834:	4604      	mov	r4, r0
 8000836:	4688      	mov	r8, r1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d14a      	bne.n	80008d2 <__udivmoddi4+0xa6>
 800083c:	428a      	cmp	r2, r1
 800083e:	4617      	mov	r7, r2
 8000840:	d962      	bls.n	8000908 <__udivmoddi4+0xdc>
 8000842:	fab2 f682 	clz	r6, r2
 8000846:	b14e      	cbz	r6, 800085c <__udivmoddi4+0x30>
 8000848:	f1c6 0320 	rsb	r3, r6, #32
 800084c:	fa01 f806 	lsl.w	r8, r1, r6
 8000850:	fa20 f303 	lsr.w	r3, r0, r3
 8000854:	40b7      	lsls	r7, r6
 8000856:	ea43 0808 	orr.w	r8, r3, r8
 800085a:	40b4      	lsls	r4, r6
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f fc87 	uxth.w	ip, r7
 8000864:	fbb8 f1fe 	udiv	r1, r8, lr
 8000868:	0c23      	lsrs	r3, r4, #16
 800086a:	fb0e 8811 	mls	r8, lr, r1, r8
 800086e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000872:	fb01 f20c 	mul.w	r2, r1, ip
 8000876:	429a      	cmp	r2, r3
 8000878:	d909      	bls.n	800088e <__udivmoddi4+0x62>
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000880:	f080 80ea 	bcs.w	8000a58 <__udivmoddi4+0x22c>
 8000884:	429a      	cmp	r2, r3
 8000886:	f240 80e7 	bls.w	8000a58 <__udivmoddi4+0x22c>
 800088a:	3902      	subs	r1, #2
 800088c:	443b      	add	r3, r7
 800088e:	1a9a      	subs	r2, r3, r2
 8000890:	b2a3      	uxth	r3, r4
 8000892:	fbb2 f0fe 	udiv	r0, r2, lr
 8000896:	fb0e 2210 	mls	r2, lr, r0, r2
 800089a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800089e:	fb00 fc0c 	mul.w	ip, r0, ip
 80008a2:	459c      	cmp	ip, r3
 80008a4:	d909      	bls.n	80008ba <__udivmoddi4+0x8e>
 80008a6:	18fb      	adds	r3, r7, r3
 80008a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ac:	f080 80d6 	bcs.w	8000a5c <__udivmoddi4+0x230>
 80008b0:	459c      	cmp	ip, r3
 80008b2:	f240 80d3 	bls.w	8000a5c <__udivmoddi4+0x230>
 80008b6:	443b      	add	r3, r7
 80008b8:	3802      	subs	r0, #2
 80008ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008be:	eba3 030c 	sub.w	r3, r3, ip
 80008c2:	2100      	movs	r1, #0
 80008c4:	b11d      	cbz	r5, 80008ce <__udivmoddi4+0xa2>
 80008c6:	40f3      	lsrs	r3, r6
 80008c8:	2200      	movs	r2, #0
 80008ca:	e9c5 3200 	strd	r3, r2, [r5]
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d905      	bls.n	80008e2 <__udivmoddi4+0xb6>
 80008d6:	b10d      	cbz	r5, 80008dc <__udivmoddi4+0xb0>
 80008d8:	e9c5 0100 	strd	r0, r1, [r5]
 80008dc:	2100      	movs	r1, #0
 80008de:	4608      	mov	r0, r1
 80008e0:	e7f5      	b.n	80008ce <__udivmoddi4+0xa2>
 80008e2:	fab3 f183 	clz	r1, r3
 80008e6:	2900      	cmp	r1, #0
 80008e8:	d146      	bne.n	8000978 <__udivmoddi4+0x14c>
 80008ea:	4573      	cmp	r3, lr
 80008ec:	d302      	bcc.n	80008f4 <__udivmoddi4+0xc8>
 80008ee:	4282      	cmp	r2, r0
 80008f0:	f200 8105 	bhi.w	8000afe <__udivmoddi4+0x2d2>
 80008f4:	1a84      	subs	r4, r0, r2
 80008f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80008fa:	2001      	movs	r0, #1
 80008fc:	4690      	mov	r8, r2
 80008fe:	2d00      	cmp	r5, #0
 8000900:	d0e5      	beq.n	80008ce <__udivmoddi4+0xa2>
 8000902:	e9c5 4800 	strd	r4, r8, [r5]
 8000906:	e7e2      	b.n	80008ce <__udivmoddi4+0xa2>
 8000908:	2a00      	cmp	r2, #0
 800090a:	f000 8090 	beq.w	8000a2e <__udivmoddi4+0x202>
 800090e:	fab2 f682 	clz	r6, r2
 8000912:	2e00      	cmp	r6, #0
 8000914:	f040 80a4 	bne.w	8000a60 <__udivmoddi4+0x234>
 8000918:	1a8a      	subs	r2, r1, r2
 800091a:	0c03      	lsrs	r3, r0, #16
 800091c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000920:	b280      	uxth	r0, r0
 8000922:	b2bc      	uxth	r4, r7
 8000924:	2101      	movs	r1, #1
 8000926:	fbb2 fcfe 	udiv	ip, r2, lr
 800092a:	fb0e 221c 	mls	r2, lr, ip, r2
 800092e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000932:	fb04 f20c 	mul.w	r2, r4, ip
 8000936:	429a      	cmp	r2, r3
 8000938:	d907      	bls.n	800094a <__udivmoddi4+0x11e>
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000940:	d202      	bcs.n	8000948 <__udivmoddi4+0x11c>
 8000942:	429a      	cmp	r2, r3
 8000944:	f200 80e0 	bhi.w	8000b08 <__udivmoddi4+0x2dc>
 8000948:	46c4      	mov	ip, r8
 800094a:	1a9b      	subs	r3, r3, r2
 800094c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000950:	fb0e 3312 	mls	r3, lr, r2, r3
 8000954:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000958:	fb02 f404 	mul.w	r4, r2, r4
 800095c:	429c      	cmp	r4, r3
 800095e:	d907      	bls.n	8000970 <__udivmoddi4+0x144>
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	f102 30ff 	add.w	r0, r2, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x142>
 8000968:	429c      	cmp	r4, r3
 800096a:	f200 80ca 	bhi.w	8000b02 <__udivmoddi4+0x2d6>
 800096e:	4602      	mov	r2, r0
 8000970:	1b1b      	subs	r3, r3, r4
 8000972:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000976:	e7a5      	b.n	80008c4 <__udivmoddi4+0x98>
 8000978:	f1c1 0620 	rsb	r6, r1, #32
 800097c:	408b      	lsls	r3, r1
 800097e:	fa22 f706 	lsr.w	r7, r2, r6
 8000982:	431f      	orrs	r7, r3
 8000984:	fa0e f401 	lsl.w	r4, lr, r1
 8000988:	fa20 f306 	lsr.w	r3, r0, r6
 800098c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000990:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000994:	4323      	orrs	r3, r4
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	fa1f fc87 	uxth.w	ip, r7
 800099e:	fbbe f0f9 	udiv	r0, lr, r9
 80009a2:	0c1c      	lsrs	r4, r3, #16
 80009a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80009a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80009b0:	45a6      	cmp	lr, r4
 80009b2:	fa02 f201 	lsl.w	r2, r2, r1
 80009b6:	d909      	bls.n	80009cc <__udivmoddi4+0x1a0>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80009be:	f080 809c 	bcs.w	8000afa <__udivmoddi4+0x2ce>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f240 8099 	bls.w	8000afa <__udivmoddi4+0x2ce>
 80009c8:	3802      	subs	r0, #2
 80009ca:	443c      	add	r4, r7
 80009cc:	eba4 040e 	sub.w	r4, r4, lr
 80009d0:	fa1f fe83 	uxth.w	lr, r3
 80009d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80009d8:	fb09 4413 	mls	r4, r9, r3, r4
 80009dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80009e4:	45a4      	cmp	ip, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x1ce>
 80009e8:	193c      	adds	r4, r7, r4
 80009ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80009ee:	f080 8082 	bcs.w	8000af6 <__udivmoddi4+0x2ca>
 80009f2:	45a4      	cmp	ip, r4
 80009f4:	d97f      	bls.n	8000af6 <__udivmoddi4+0x2ca>
 80009f6:	3b02      	subs	r3, #2
 80009f8:	443c      	add	r4, r7
 80009fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009fe:	eba4 040c 	sub.w	r4, r4, ip
 8000a02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a06:	4564      	cmp	r4, ip
 8000a08:	4673      	mov	r3, lr
 8000a0a:	46e1      	mov	r9, ip
 8000a0c:	d362      	bcc.n	8000ad4 <__udivmoddi4+0x2a8>
 8000a0e:	d05f      	beq.n	8000ad0 <__udivmoddi4+0x2a4>
 8000a10:	b15d      	cbz	r5, 8000a2a <__udivmoddi4+0x1fe>
 8000a12:	ebb8 0203 	subs.w	r2, r8, r3
 8000a16:	eb64 0409 	sbc.w	r4, r4, r9
 8000a1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000a22:	431e      	orrs	r6, r3
 8000a24:	40cc      	lsrs	r4, r1
 8000a26:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	e74f      	b.n	80008ce <__udivmoddi4+0xa2>
 8000a2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a32:	0c01      	lsrs	r1, r0, #16
 8000a34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a38:	b280      	uxth	r0, r0
 8000a3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a3e:	463b      	mov	r3, r7
 8000a40:	4638      	mov	r0, r7
 8000a42:	463c      	mov	r4, r7
 8000a44:	46b8      	mov	r8, r7
 8000a46:	46be      	mov	lr, r7
 8000a48:	2620      	movs	r6, #32
 8000a4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a4e:	eba2 0208 	sub.w	r2, r2, r8
 8000a52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a56:	e766      	b.n	8000926 <__udivmoddi4+0xfa>
 8000a58:	4601      	mov	r1, r0
 8000a5a:	e718      	b.n	800088e <__udivmoddi4+0x62>
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	e72c      	b.n	80008ba <__udivmoddi4+0x8e>
 8000a60:	f1c6 0220 	rsb	r2, r6, #32
 8000a64:	fa2e f302 	lsr.w	r3, lr, r2
 8000a68:	40b7      	lsls	r7, r6
 8000a6a:	40b1      	lsls	r1, r6
 8000a6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000a70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a74:	430a      	orrs	r2, r1
 8000a76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a7a:	b2bc      	uxth	r4, r7
 8000a7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a80:	0c11      	lsrs	r1, r2, #16
 8000a82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a86:	fb08 f904 	mul.w	r9, r8, r4
 8000a8a:	40b0      	lsls	r0, r6
 8000a8c:	4589      	cmp	r9, r1
 8000a8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a92:	b280      	uxth	r0, r0
 8000a94:	d93e      	bls.n	8000b14 <__udivmoddi4+0x2e8>
 8000a96:	1879      	adds	r1, r7, r1
 8000a98:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a9c:	d201      	bcs.n	8000aa2 <__udivmoddi4+0x276>
 8000a9e:	4589      	cmp	r9, r1
 8000aa0:	d81f      	bhi.n	8000ae2 <__udivmoddi4+0x2b6>
 8000aa2:	eba1 0109 	sub.w	r1, r1, r9
 8000aa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aaa:	fb09 f804 	mul.w	r8, r9, r4
 8000aae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab2:	b292      	uxth	r2, r2
 8000ab4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ab8:	4542      	cmp	r2, r8
 8000aba:	d229      	bcs.n	8000b10 <__udivmoddi4+0x2e4>
 8000abc:	18ba      	adds	r2, r7, r2
 8000abe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ac2:	d2c4      	bcs.n	8000a4e <__udivmoddi4+0x222>
 8000ac4:	4542      	cmp	r2, r8
 8000ac6:	d2c2      	bcs.n	8000a4e <__udivmoddi4+0x222>
 8000ac8:	f1a9 0102 	sub.w	r1, r9, #2
 8000acc:	443a      	add	r2, r7
 8000ace:	e7be      	b.n	8000a4e <__udivmoddi4+0x222>
 8000ad0:	45f0      	cmp	r8, lr
 8000ad2:	d29d      	bcs.n	8000a10 <__udivmoddi4+0x1e4>
 8000ad4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ad8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000adc:	3801      	subs	r0, #1
 8000ade:	46e1      	mov	r9, ip
 8000ae0:	e796      	b.n	8000a10 <__udivmoddi4+0x1e4>
 8000ae2:	eba7 0909 	sub.w	r9, r7, r9
 8000ae6:	4449      	add	r1, r9
 8000ae8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000aec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000af0:	fb09 f804 	mul.w	r8, r9, r4
 8000af4:	e7db      	b.n	8000aae <__udivmoddi4+0x282>
 8000af6:	4673      	mov	r3, lr
 8000af8:	e77f      	b.n	80009fa <__udivmoddi4+0x1ce>
 8000afa:	4650      	mov	r0, sl
 8000afc:	e766      	b.n	80009cc <__udivmoddi4+0x1a0>
 8000afe:	4608      	mov	r0, r1
 8000b00:	e6fd      	b.n	80008fe <__udivmoddi4+0xd2>
 8000b02:	443b      	add	r3, r7
 8000b04:	3a02      	subs	r2, #2
 8000b06:	e733      	b.n	8000970 <__udivmoddi4+0x144>
 8000b08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	e71c      	b.n	800094a <__udivmoddi4+0x11e>
 8000b10:	4649      	mov	r1, r9
 8000b12:	e79c      	b.n	8000a4e <__udivmoddi4+0x222>
 8000b14:	eba1 0109 	sub.w	r1, r1, r9
 8000b18:	46c4      	mov	ip, r8
 8000b1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b1e:	fb09 f804 	mul.w	r8, r9, r4
 8000b22:	e7c4      	b.n	8000aae <__udivmoddi4+0x282>

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b62:	463b      	mov	r3, r7
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
 8000b70:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b72:	4b29      	ldr	r3, [pc, #164]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000b74:	4a29      	ldr	r2, [pc, #164]	@ (8000c1c <MX_ADC1_Init+0xc0>)
 8000b76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b78:	4b27      	ldr	r3, [pc, #156]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b7e:	4b26      	ldr	r3, [pc, #152]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b84:	4b24      	ldr	r3, [pc, #144]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b8a:	4b23      	ldr	r3, [pc, #140]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b90:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000b92:	2204      	movs	r2, #4
 8000b94:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b96:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bca:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bd2:	4811      	ldr	r0, [pc, #68]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000bd4:	f002 fd3e 	bl	8003654 <HAL_ADC_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000bde:	f001 fee5 	bl	80029ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_ADC1_Init+0xc4>)
 8000be4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be6:	2306      	movs	r3, #6
 8000be8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000bea:	2307      	movs	r3, #7
 8000bec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bee:	237f      	movs	r3, #127	@ 0x7f
 8000bf0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4806      	ldr	r0, [pc, #24]	@ (8000c18 <MX_ADC1_Init+0xbc>)
 8000c00:	f002 ff16 	bl	8003a30 <HAL_ADC_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c0a:	f001 fecf 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200001ec 	.word	0x200001ec
 8000c1c:	50040000 	.word	0x50040000
 8000c20:	14f00020 	.word	0x14f00020

08000c24 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b09c      	sub	sp, #112	@ 0x70
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2250      	movs	r2, #80	@ 0x50
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f013 fd35 	bl	80146b4 <memset>
  if(adcHandle->Instance==ADC1)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a32      	ldr	r2, [pc, #200]	@ (8000d18 <HAL_ADC_MspInit+0xf4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d15c      	bne.n	8000d0e <HAL_ADC_MspInit+0xea>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c58:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 8;
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000c5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c62:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000c64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c68:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000c6a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000c6e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8000c70:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c74:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c76:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4618      	mov	r0, r3
 8000c82:	f007 fc1e 	bl	80084c2 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8000c8c:	f001 fe8e 	bl	80029ac <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c90:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c94:	f7ff ff48 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff ff45 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb4:	f004 f94a 	bl	8004f4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <HAL_ADC_MspInit+0xf8>)
 8000cba:	4a19      	ldr	r2, [pc, #100]	@ (8000d20 <HAL_ADC_MspInit+0xfc>)
 8000cbc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <HAL_ADC_MspInit+0xf8>)
 8000cc0:	2205      	movs	r2, #5
 8000cc2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <HAL_ADC_MspInit+0xf8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <HAL_ADC_MspInit+0xf8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <HAL_ADC_MspInit+0xf8>)
 8000cd2:	2280      	movs	r2, #128	@ 0x80
 8000cd4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <HAL_ADC_MspInit+0xf8>)
 8000cd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cdc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cde:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <HAL_ADC_MspInit+0xf8>)
 8000ce0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ce4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <HAL_ADC_MspInit+0xf8>)
 8000ce8:	2220      	movs	r2, #32
 8000cea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cec:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <HAL_ADC_MspInit+0xf8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cf2:	480a      	ldr	r0, [pc, #40]	@ (8000d1c <HAL_ADC_MspInit+0xf8>)
 8000cf4:	f003 fdf8 	bl	80048e8 <HAL_DMA_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8000cfe:	f001 fe55 	bl	80029ac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <HAL_ADC_MspInit+0xf8>)
 8000d06:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d08:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <HAL_ADC_MspInit+0xf8>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d0e:	bf00      	nop
 8000d10:	3770      	adds	r7, #112	@ 0x70
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	50040000 	.word	0x50040000
 8000d1c:	20000250 	.word	0x20000250
 8000d20:	40020030 	.word	0x40020030

08000d24 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <LL_EXTI_EnableIT_32_63+0x24>)
 8000d2e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000d32:	4905      	ldr	r1, [pc, #20]	@ (8000d48 <LL_EXTI_EnableIT_32_63+0x24>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	58000800 	.word	0x58000800

08000d4c <LL_AHB2_GRP1_EnableClock>:
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d70:	68fb      	ldr	r3, [r7, #12]
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b085      	sub	sp, #20
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d8a:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000d8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d9e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4013      	ands	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000da8:	68fb      	ldr	r3, [r7, #12]
}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000dba:	f002 fa51 	bl	8003260 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000dbe:	f002 fa55 	bl	800326c <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000dc2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000dc6:	f7ff ffad 	bl	8000d24 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000dca:	f010 fa65 	bl	8011298 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000dce:	f000 f821 	bl	8000e14 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000dd2:	f000 f8c1 	bl	8000f58 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000dd6:	bf00      	nop
}
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000ddc:	b5b0      	push	{r4, r5, r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000de2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <APPD_EnableCPU2+0x34>)
 8000de4:	1d3c      	adds	r4, r7, #4
 8000de6:	461d      	mov	r5, r3
 8000de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000df0:	c403      	stmia	r4!, {r0, r1}
 8000df2:	8022      	strh	r2, [r4, #0]
 8000df4:	3402      	adds	r4, #2
 8000df6:	0c13      	lsrs	r3, r2, #16
 8000df8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000dfa:	f010 f961 	bl	80110c0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4618      	mov	r0, r3
 8000e02:	f00f fbf2 	bl	80105ea <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000e06:	bf00      	nop
}
 8000e08:	3720      	adds	r7, #32
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	08015584 	.word	0x08015584

08000e14 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	77fb      	strb	r3, [r7, #31]
 8000e38:	e036      	b.n	8000ea8 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000e3a:	7ffb      	ldrb	r3, [r7, #31]
 8000e3c:	4a43      	ldr	r2, [pc, #268]	@ (8000f4c <APPD_SetCPU2GpioConfig+0x138>)
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	4413      	add	r3, r2
 8000e42:	799b      	ldrb	r3, [r3, #6]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d02c      	beq.n	8000ea2 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000e48:	7ffb      	ldrb	r3, [r7, #31]
 8000e4a:	4a40      	ldr	r2, [pc, #256]	@ (8000f4c <APPD_SetCPU2GpioConfig+0x138>)
 8000e4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e50:	4a3f      	ldr	r2, [pc, #252]	@ (8000f50 <APPD_SetCPU2GpioConfig+0x13c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d01b      	beq.n	8000e8e <APPD_SetCPU2GpioConfig+0x7a>
 8000e56:	4a3e      	ldr	r2, [pc, #248]	@ (8000f50 <APPD_SetCPU2GpioConfig+0x13c>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d821      	bhi.n	8000ea0 <APPD_SetCPU2GpioConfig+0x8c>
 8000e5c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e60:	d003      	beq.n	8000e6a <APPD_SetCPU2GpioConfig+0x56>
 8000e62:	4a3c      	ldr	r2, [pc, #240]	@ (8000f54 <APPD_SetCPU2GpioConfig+0x140>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d009      	beq.n	8000e7c <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000e68:	e01a      	b.n	8000ea0 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000e6a:	7ffb      	ldrb	r3, [r7, #31]
 8000e6c:	4a37      	ldr	r2, [pc, #220]	@ (8000f4c <APPD_SetCPU2GpioConfig+0x138>)
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	4413      	add	r3, r2
 8000e72:	889a      	ldrh	r2, [r3, #4]
 8000e74:	8bbb      	ldrh	r3, [r7, #28]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	83bb      	strh	r3, [r7, #28]
          break;
 8000e7a:	e012      	b.n	8000ea2 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000e7c:	7ffb      	ldrb	r3, [r7, #31]
 8000e7e:	4a33      	ldr	r2, [pc, #204]	@ (8000f4c <APPD_SetCPU2GpioConfig+0x138>)
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	4413      	add	r3, r2
 8000e84:	889a      	ldrh	r2, [r3, #4]
 8000e86:	8b7b      	ldrh	r3, [r7, #26]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	837b      	strh	r3, [r7, #26]
          break;
 8000e8c:	e009      	b.n	8000ea2 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000e8e:	7ffb      	ldrb	r3, [r7, #31]
 8000e90:	4a2e      	ldr	r2, [pc, #184]	@ (8000f4c <APPD_SetCPU2GpioConfig+0x138>)
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	4413      	add	r3, r2
 8000e96:	889a      	ldrh	r2, [r3, #4]
 8000e98:	8b3b      	ldrh	r3, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	833b      	strh	r3, [r7, #24]
          break;
 8000e9e:	e000      	b.n	8000ea2 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000ea0:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000ea2:	7ffb      	ldrb	r3, [r7, #31]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	77fb      	strb	r3, [r7, #31]
 8000ea8:	7ffb      	ldrb	r3, [r7, #31]
 8000eaa:	2b25      	cmp	r3, #37	@ 0x25
 8000eac:	d9c5      	bls.n	8000e3a <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000eba:	8bbb      	ldrh	r3, [r7, #28]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d014      	beq.n	8000eea <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000ec0:	8bbb      	ldrh	r3, [r7, #28]
 8000ec2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f7ff ff41 	bl	8000d4c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff ff57 	bl	8000d7e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed8:	f004 f838 	bl	8004f4c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000edc:	8bbb      	ldrh	r3, [r7, #28]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee6:	f004 f9a1 	bl	800522c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000eea:	8b7b      	ldrh	r3, [r7, #26]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d012      	beq.n	8000f16 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000ef0:	8b7b      	ldrh	r3, [r7, #26]
 8000ef2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	f7ff ff29 	bl	8000d4c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000efa:	2002      	movs	r0, #2
 8000efc:	f7ff ff3f 	bl	8000d7e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	4619      	mov	r1, r3
 8000f04:	4813      	ldr	r0, [pc, #76]	@ (8000f54 <APPD_SetCPU2GpioConfig+0x140>)
 8000f06:	f004 f821 	bl	8004f4c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000f0a:	8b7b      	ldrh	r3, [r7, #26]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4810      	ldr	r0, [pc, #64]	@ (8000f54 <APPD_SetCPU2GpioConfig+0x140>)
 8000f12:	f004 f98b 	bl	800522c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000f16:	8b3b      	ldrh	r3, [r7, #24]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d013      	beq.n	8000f44 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000f1c:	8b3b      	ldrh	r3, [r7, #24]
 8000f1e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f20:	2004      	movs	r0, #4
 8000f22:	f7ff ff13 	bl	8000d4c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000f26:	2004      	movs	r0, #4
 8000f28:	f7ff ff29 	bl	8000d7e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4807      	ldr	r0, [pc, #28]	@ (8000f50 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f32:	f004 f80b 	bl	8004f4c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000f36:	8b3b      	ldrh	r3, [r7, #24]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4804      	ldr	r0, [pc, #16]	@ (8000f50 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f3e:	f004 f975 	bl	800522c <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
}
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	08016590 	.word	0x08016590
 8000f50:	48000800 	.word	0x48000800
 8000f54:	48000400 	.word	0x48000400

08000f58 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000f5c:	bf00      	nop
}
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000f6a:	f001 ffa1 	bl	8002eb0 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000f6e:	bf00      	nop
}
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000f80:	897a      	ldrh	r2, [r7, #10]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68f9      	ldr	r1, [r7, #12]
 8000f86:	2000      	movs	r0, #0
 8000f88:	f001 fae4 	bl	8002554 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000f8c:	bf00      	nop
}
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <LL_PWR_SMPS_Enable+0x1c>)
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <LL_PWR_SMPS_Enable+0x1c>)
 8000f9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fa2:	61d3      	str	r3, [r2, #28]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	58000400 	.word	0x58000400

08000fb4 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000fc4:	4904      	ldr	r1, [pc, #16]	@ (8000fd8 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61cb      	str	r3, [r1, #28]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	58000400 	.word	0x58000400

08000fdc <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8000fe4:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d108      	bne.n	8001008 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8000ff6:	4b15      	ldr	r3, [pc, #84]	@ (800104c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f023 020f 	bic.w	r2, r3, #15
 8000ffe:	4913      	ldr	r1, [pc, #76]	@ (800104c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4313      	orrs	r3, r2
 8001004:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 8001006:	e019      	b.n	800103c <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3b06      	subs	r3, #6
 800100c:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4413      	add	r3, r2
 8001014:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	2b00      	cmp	r3, #0
 800101a:	da02      	bge.n	8001022 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	e004      	b.n	800102c <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	dd01      	ble.n	800102c <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8001028:	230f      	movs	r3, #15
 800102a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 800102c:	4b07      	ldr	r3, [pc, #28]	@ (800104c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	f023 020f 	bic.w	r2, r3, #15
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	4905      	ldr	r1, [pc, #20]	@ (800104c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001038:	4313      	orrs	r3, r2
 800103a:	61cb      	str	r3, [r1, #28]
}
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	1fff7558 	.word	0x1fff7558
 800104c:	58000400 	.word	0x58000400

08001050 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <LL_C2_PWR_SetPowerMode+0x28>)
 800105a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800105e:	f023 0207 	bic.w	r2, r3, #7
 8001062:	4905      	ldr	r1, [pc, #20]	@ (8001078 <LL_C2_PWR_SetPowerMode+0x28>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4313      	orrs	r3, r2
 8001068:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	58000400 	.word	0x58000400

0800107c <LL_EXTI_EnableIT_32_63>:
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <LL_EXTI_EnableIT_32_63+0x24>)
 8001086:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800108a:	4905      	ldr	r1, [pc, #20]	@ (80010a0 <LL_EXTI_EnableIT_32_63+0x24>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4313      	orrs	r3, r2
 8001090:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	58000800 	.word	0x58000800

080010a4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80010ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010b0:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80010b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80010b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010be:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010ca:	4313      	orrs	r3, r2
 80010cc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	cafecafe 	.word	0xcafecafe

080010e0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80010e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80010f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	608b      	str	r3, [r1, #8]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <LL_DBGMCU_GetDeviceID+0x18>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e0042000 	.word	0xe0042000

08001124 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <LL_DBGMCU_GetRevisionID+0x18>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	0c1b      	lsrs	r3, r3, #16
 800112e:	b29b      	uxth	r3, r3
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e0042000 	.word	0xe0042000

08001140 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	22ff      	movs	r2, #255	@ 0xff
 800114c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	22ca      	movs	r2, #202	@ 0xca
 8001166:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2253      	movs	r2, #83	@ 0x53
 800116c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f023 0207 	bic.w	r2, r3, #7
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	609a      	str	r2, [r3, #8]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80011a4:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <MX_APPE_Config+0x18>)
 80011a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011aa:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80011ac:	f000 f82b 	bl	8001206 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80011b0:	f000 f830 	bl	8001214 <Config_HSE>

  return;
 80011b4:	bf00      	nop
}
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	58004000 	.word	0x58004000

080011bc <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80011c0:	f000 f83c 	bl	800123c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80011c4:	f000 f854 	bl	8001270 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80011c8:	4904      	ldr	r1, [pc, #16]	@ (80011dc <MX_APPE_Init+0x20>)
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 ff56 	bl	800207c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
	APPD_Init();
 80011d0:	f7ff fdf1 	bl	8000db6 <APPD_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80011d4:	f000 f85a 	bl	800128c <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80011d8:	bf00      	nop
}
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200003b0 	.word	0x200003b0

080011e0 <Init_Smps>:

void Init_Smps(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fee5 	bl	8000fb4 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 80011ea:	2004      	movs	r0, #4
 80011ec:	f7ff fef6 	bl	8000fdc <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 80011f0:	f7ff fed0 	bl	8000f94 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 80011f4:	bf00      	nop
}
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <Init_Exti>:

void Init_Exti(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80011fc:	2050      	movs	r0, #80	@ 0x50
 80011fe:	f7ff ff3d 	bl	800107c <LL_EXTI_EnableIT_32_63>

  return;
 8001202:	bf00      	nop
}
 8001204:	bd80      	pop	{r7, pc}

08001206 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800120a:	bf00      	nop
}
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800121a:	2000      	movs	r0, #0
 800121c:	f010 f8ba 	bl	8011394 <OTP_Read>
 8001220:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	799b      	ldrb	r3, [r3, #6]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff39 	bl	80010a4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001232:	bf00      	nop
 8001234:	bf00      	nop
}
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <System_Init>:

static void System_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  Init_Smps();
 8001240:	f7ff ffce 	bl	80011e0 <Init_Smps>

  Init_Exti();
 8001244:	f7ff ffd8 	bl	80011f8 <Init_Exti>

  Init_Rtc();
 8001248:	f000 f802 	bl	8001250 <Init_Rtc>

  return;
 800124c:	bf00      	nop
}
 800124e:	bd80      	pop	{r7, pc}

08001250 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001254:	4805      	ldr	r0, [pc, #20]	@ (800126c <Init_Rtc+0x1c>)
 8001256:	f7ff ff80 	bl	800115a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800125a:	2100      	movs	r1, #0
 800125c:	4803      	ldr	r0, [pc, #12]	@ (800126c <Init_Rtc+0x1c>)
 800125e:	f7ff ff8c 	bl	800117a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001262:	4802      	ldr	r0, [pc, #8]	@ (800126c <Init_Rtc+0x1c>)
 8001264:	f7ff ff6c 	bl	8001140 <LL_RTC_EnableWriteProtection>

  return;
 8001268:	bf00      	nop
}
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40002800 	.word	0x40002800

08001270 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001274:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001278:	f7ff ff32 	bl	80010e0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800127c:	f012 fd5e 	bl	8013d3c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001280:	2004      	movs	r0, #4
 8001282:	f7ff fee5 	bl	8001050 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001286:	bf00      	nop
}
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001292:	f00f fd5f 	bl	8010d54 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001296:	4a11      	ldr	r2, [pc, #68]	@ (80012dc <appe_Tl_Init+0x50>)
 8001298:	2100      	movs	r1, #0
 800129a:	2004      	movs	r0, #4
 800129c:	f012 fe8c 	bl	8013fb8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <appe_Tl_Init+0x54>)
 80012a2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <appe_Tl_Init+0x58>)
 80012a6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	480e      	ldr	r0, [pc, #56]	@ (80012e8 <appe_Tl_Init+0x5c>)
 80012ae:	f00f fc13 	bl	8010ad8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <appe_Tl_Init+0x60>)
 80012b4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <appe_Tl_Init+0x64>)
 80012b8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <appe_Tl_Init+0x68>)
 80012bc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80012be:	f240 533c 	movw	r3, #1340	@ 0x53c
 80012c2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00f fe85 	bl	8010fd8 <TL_MM_Init>

  TL_Enable();
 80012ce:	f00f fd3b 	bl	8010d48 <TL_Enable>

  return;
 80012d2:	bf00      	nop
}
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	08010b11 	.word	0x08010b11
 80012e0:	20030734 	.word	0x20030734
 80012e4:	080012f9 	.word	0x080012f9
 80012e8:	08001311 	.word	0x08001311
 80012ec:	2003094c 	.word	0x2003094c
 80012f0:	20030840 	.word	0x20030840
 80012f4:	200301f8 	.word	0x200301f8

080012f8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001302:	bf00      	nop
}
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	330b      	adds	r3, #11
 800131e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800132a:	2b07      	cmp	r3, #7
 800132c:	f200 80d0 	bhi.w	80014d0 <APPE_SysUserEvtRx+0x1c0>
 8001330:	a201      	add	r2, pc, #4	@ (adr r2, 8001338 <APPE_SysUserEvtRx+0x28>)
 8001332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001336:	bf00      	nop
 8001338:	08001359 	.word	0x08001359
 800133c:	080013eb 	.word	0x080013eb
 8001340:	0800140d 	.word	0x0800140d
 8001344:	080014d1 	.word	0x080014d1
 8001348:	08001451 	.word	0x08001451
 800134c:	08001475 	.word	0x08001475
 8001350:	08001491 	.word	0x08001491
 8001354:	080014b5 	.word	0x080014b5
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	4618      	mov	r0, r3
 800135e:	f00f f971 	bl	8010644 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001362:	485e      	ldr	r0, [pc, #376]	@ (80014dc <APPE_SysUserEvtRx+0x1cc>)
 8001364:	f00f ff38 	bl	80111d8 <DbgTraceGetFileName>
 8001368:	4601      	mov	r1, r0
 800136a:	f240 136b 	movw	r3, #363	@ 0x16b
 800136e:	4a5c      	ldr	r2, [pc, #368]	@ (80014e0 <APPE_SysUserEvtRx+0x1d0>)
 8001370:	485c      	ldr	r0, [pc, #368]	@ (80014e4 <APPE_SysUserEvtRx+0x1d4>)
 8001372:	f013 f821 	bl	80143b8 <iprintf>
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	4619      	mov	r1, r3
 800137a:	7b7b      	ldrb	r3, [r7, #13]
 800137c:	461a      	mov	r2, r3
 800137e:	7bbb      	ldrb	r3, [r7, #14]
 8001380:	4859      	ldr	r0, [pc, #356]	@ (80014e8 <APPE_SysUserEvtRx+0x1d8>)
 8001382:	f013 f819 	bl	80143b8 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001386:	4855      	ldr	r0, [pc, #340]	@ (80014dc <APPE_SysUserEvtRx+0x1cc>)
 8001388:	f00f ff26 	bl	80111d8 <DbgTraceGetFileName>
 800138c:	4601      	mov	r1, r0
 800138e:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8001392:	4a53      	ldr	r2, [pc, #332]	@ (80014e0 <APPE_SysUserEvtRx+0x1d0>)
 8001394:	4853      	ldr	r0, [pc, #332]	@ (80014e4 <APPE_SysUserEvtRx+0x1d4>)
 8001396:	f013 f80f 	bl	80143b8 <iprintf>
 800139a:	7c3b      	ldrb	r3, [r7, #16]
 800139c:	4619      	mov	r1, r3
 800139e:	4853      	ldr	r0, [pc, #332]	@ (80014ec <APPE_SysUserEvtRx+0x1dc>)
 80013a0:	f013 f80a 	bl	80143b8 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80013a4:	484d      	ldr	r0, [pc, #308]	@ (80014dc <APPE_SysUserEvtRx+0x1cc>)
 80013a6:	f00f ff17 	bl	80111d8 <DbgTraceGetFileName>
 80013aa:	4601      	mov	r1, r0
 80013ac:	f240 136d 	movw	r3, #365	@ 0x16d
 80013b0:	4a4b      	ldr	r2, [pc, #300]	@ (80014e0 <APPE_SysUserEvtRx+0x1d0>)
 80013b2:	484c      	ldr	r0, [pc, #304]	@ (80014e4 <APPE_SysUserEvtRx+0x1d4>)
 80013b4:	f013 f800 	bl	80143b8 <iprintf>
 80013b8:	7dbb      	ldrb	r3, [r7, #22]
 80013ba:	4619      	mov	r1, r3
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	461a      	mov	r2, r3
 80013c0:	7e3b      	ldrb	r3, [r7, #24]
 80013c2:	484b      	ldr	r0, [pc, #300]	@ (80014f0 <APPE_SysUserEvtRx+0x1e0>)
 80013c4:	f012 fff8 	bl	80143b8 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80013c8:	4844      	ldr	r0, [pc, #272]	@ (80014dc <APPE_SysUserEvtRx+0x1cc>)
 80013ca:	f00f ff05 	bl	80111d8 <DbgTraceGetFileName>
 80013ce:	4601      	mov	r1, r0
 80013d0:	f240 136f 	movw	r3, #367	@ 0x16f
 80013d4:	4a42      	ldr	r2, [pc, #264]	@ (80014e0 <APPE_SysUserEvtRx+0x1d0>)
 80013d6:	4843      	ldr	r0, [pc, #268]	@ (80014e4 <APPE_SysUserEvtRx+0x1d4>)
 80013d8:	f012 ffee 	bl	80143b8 <iprintf>
 80013dc:	4845      	ldr	r0, [pc, #276]	@ (80014f4 <APPE_SysUserEvtRx+0x1e4>)
 80013de:	f012 ffeb 	bl	80143b8 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f8e0 	bl	80015a8 <APPE_SysEvtReadyProcessing>
    break;
 80013e8:	e073      	b.n	80014d2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80013ea:	483c      	ldr	r0, [pc, #240]	@ (80014dc <APPE_SysUserEvtRx+0x1cc>)
 80013ec:	f00f fef4 	bl	80111d8 <DbgTraceGetFileName>
 80013f0:	4601      	mov	r1, r0
 80013f2:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 80013f6:	4a3a      	ldr	r2, [pc, #232]	@ (80014e0 <APPE_SysUserEvtRx+0x1d0>)
 80013f8:	483a      	ldr	r0, [pc, #232]	@ (80014e4 <APPE_SysUserEvtRx+0x1d4>)
 80013fa:	f012 ffdd 	bl	80143b8 <iprintf>
 80013fe:	483e      	ldr	r0, [pc, #248]	@ (80014f8 <APPE_SysUserEvtRx+0x1e8>)
 8001400:	f012 ffda 	bl	80143b8 <iprintf>
    APPE_SysEvtError(pPayload);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f885 	bl	8001514 <APPE_SysEvtError>
    break;
 800140a:	e062      	b.n	80014d2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 800140c:	4833      	ldr	r0, [pc, #204]	@ (80014dc <APPE_SysUserEvtRx+0x1cc>)
 800140e:	f00f fee3 	bl	80111d8 <DbgTraceGetFileName>
 8001412:	4601      	mov	r1, r0
 8001414:	f240 1379 	movw	r3, #377	@ 0x179
 8001418:	4a31      	ldr	r2, [pc, #196]	@ (80014e0 <APPE_SysUserEvtRx+0x1d0>)
 800141a:	4832      	ldr	r0, [pc, #200]	@ (80014e4 <APPE_SysUserEvtRx+0x1d4>)
 800141c:	f012 ffcc 	bl	80143b8 <iprintf>
 8001420:	4836      	ldr	r0, [pc, #216]	@ (80014fc <APPE_SysUserEvtRx+0x1ec>)
 8001422:	f013 f831 	bl	8014488 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001426:	482d      	ldr	r0, [pc, #180]	@ (80014dc <APPE_SysUserEvtRx+0x1cc>)
 8001428:	f00f fed6 	bl	80111d8 <DbgTraceGetFileName>
 800142c:	4601      	mov	r1, r0
 800142e:	f44f 73bd 	mov.w	r3, #378	@ 0x17a
 8001432:	4a2b      	ldr	r2, [pc, #172]	@ (80014e0 <APPE_SysUserEvtRx+0x1d0>)
 8001434:	482b      	ldr	r0, [pc, #172]	@ (80014e4 <APPE_SysUserEvtRx+0x1d4>)
 8001436:	f012 ffbf 	bl	80143b8 <iprintf>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3302      	adds	r3, #2
 800143e:	6819      	ldr	r1, [r3, #0]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	3302      	adds	r3, #2
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	461a      	mov	r2, r3
 8001448:	482d      	ldr	r0, [pc, #180]	@ (8001500 <APPE_SysUserEvtRx+0x1f0>)
 800144a:	f012 ffb5 	bl	80143b8 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800144e:	e040      	b.n	80014d2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001450:	4822      	ldr	r0, [pc, #136]	@ (80014dc <APPE_SysUserEvtRx+0x1cc>)
 8001452:	f00f fec1 	bl	80111d8 <DbgTraceGetFileName>
 8001456:	4601      	mov	r1, r0
 8001458:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800145c:	4a20      	ldr	r2, [pc, #128]	@ (80014e0 <APPE_SysUserEvtRx+0x1d0>)
 800145e:	4821      	ldr	r0, [pc, #132]	@ (80014e4 <APPE_SysUserEvtRx+0x1d4>)
 8001460:	f012 ffaa 	bl	80143b8 <iprintf>
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	3302      	adds	r3, #2
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	4825      	ldr	r0, [pc, #148]	@ (8001504 <APPE_SysUserEvtRx+0x1f4>)
 800146e:	f012 ffa3 	bl	80143b8 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8001472:	e02e      	b.n	80014d2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001474:	4819      	ldr	r0, [pc, #100]	@ (80014dc <APPE_SysUserEvtRx+0x1cc>)
 8001476:	f00f feaf 	bl	80111d8 <DbgTraceGetFileName>
 800147a:	4601      	mov	r1, r0
 800147c:	f240 1385 	movw	r3, #389	@ 0x185
 8001480:	4a17      	ldr	r2, [pc, #92]	@ (80014e0 <APPE_SysUserEvtRx+0x1d0>)
 8001482:	4818      	ldr	r0, [pc, #96]	@ (80014e4 <APPE_SysUserEvtRx+0x1d4>)
 8001484:	f012 ff98 	bl	80143b8 <iprintf>
 8001488:	481f      	ldr	r0, [pc, #124]	@ (8001508 <APPE_SysUserEvtRx+0x1f8>)
 800148a:	f012 ff95 	bl	80143b8 <iprintf>
    break;
 800148e:	e020      	b.n	80014d2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001490:	4812      	ldr	r0, [pc, #72]	@ (80014dc <APPE_SysUserEvtRx+0x1cc>)
 8001492:	f00f fea1 	bl	80111d8 <DbgTraceGetFileName>
 8001496:	4601      	mov	r1, r0
 8001498:	f240 1389 	movw	r3, #393	@ 0x189
 800149c:	4a10      	ldr	r2, [pc, #64]	@ (80014e0 <APPE_SysUserEvtRx+0x1d0>)
 800149e:	4811      	ldr	r0, [pc, #68]	@ (80014e4 <APPE_SysUserEvtRx+0x1d4>)
 80014a0:	f012 ff8a 	bl	80143b8 <iprintf>
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	3302      	adds	r3, #2
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4619      	mov	r1, r3
 80014ac:	4817      	ldr	r0, [pc, #92]	@ (800150c <APPE_SysUserEvtRx+0x1fc>)
 80014ae:	f012 ff83 	bl	80143b8 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80014b2:	e00e      	b.n	80014d2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80014b4:	4809      	ldr	r0, [pc, #36]	@ (80014dc <APPE_SysUserEvtRx+0x1cc>)
 80014b6:	f00f fe8f 	bl	80111d8 <DbgTraceGetFileName>
 80014ba:	4601      	mov	r1, r0
 80014bc:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 80014c0:	4a07      	ldr	r2, [pc, #28]	@ (80014e0 <APPE_SysUserEvtRx+0x1d0>)
 80014c2:	4808      	ldr	r0, [pc, #32]	@ (80014e4 <APPE_SysUserEvtRx+0x1d4>)
 80014c4:	f012 ff78 	bl	80143b8 <iprintf>
 80014c8:	4811      	ldr	r0, [pc, #68]	@ (8001510 <APPE_SysUserEvtRx+0x200>)
 80014ca:	f012 ff75 	bl	80143b8 <iprintf>
    break;
 80014ce:	e000      	b.n	80014d2 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80014d0:	bf00      	nop
  }

  return;
 80014d2:	bf00      	nop
}
 80014d4:	3720      	adds	r7, #32
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	080155a0 	.word	0x080155a0
 80014e0:	080166c0 	.word	0x080166c0
 80014e4:	080155b8 	.word	0x080155b8
 80014e8:	080155cc 	.word	0x080155cc
 80014ec:	080155f0 	.word	0x080155f0
 80014f0:	0801560c 	.word	0x0801560c
 80014f4:	08015624 	.word	0x08015624
 80014f8:	08015644 	.word	0x08015644
 80014fc:	08015668 	.word	0x08015668
 8001500:	080156b8 	.word	0x080156b8
 8001504:	080156e0 	.word	0x080156e0
 8001508:	0801571c 	.word	0x0801571c
 800150c:	08015740 	.word	0x08015740
 8001510:	0801577c 	.word	0x0801577c

08001514 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	330b      	adds	r3, #11
 8001522:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3302      	adds	r3, #2
 8001528:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800152a:	4819      	ldr	r0, [pc, #100]	@ (8001590 <APPE_SysEvtError+0x7c>)
 800152c:	f00f fe54 	bl	80111d8 <DbgTraceGetFileName>
 8001530:	4601      	mov	r1, r0
 8001532:	f44f 73d3 	mov.w	r3, #422	@ 0x1a6
 8001536:	4a17      	ldr	r2, [pc, #92]	@ (8001594 <APPE_SysEvtError+0x80>)
 8001538:	4817      	ldr	r0, [pc, #92]	@ (8001598 <APPE_SysEvtError+0x84>)
 800153a:	f012 ff3d 	bl	80143b8 <iprintf>
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	4619      	mov	r1, r3
 8001544:	4815      	ldr	r0, [pc, #84]	@ (800159c <APPE_SysEvtError+0x88>)
 8001546:	f012 ff37 	bl	80143b8 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10d      	bne.n	800156e <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001552:	480f      	ldr	r0, [pc, #60]	@ (8001590 <APPE_SysEvtError+0x7c>)
 8001554:	f00f fe40 	bl	80111d8 <DbgTraceGetFileName>
 8001558:	4601      	mov	r1, r0
 800155a:	f240 13ab 	movw	r3, #427	@ 0x1ab
 800155e:	4a0d      	ldr	r2, [pc, #52]	@ (8001594 <APPE_SysEvtError+0x80>)
 8001560:	480d      	ldr	r0, [pc, #52]	@ (8001598 <APPE_SysEvtError+0x84>)
 8001562:	f012 ff29 	bl	80143b8 <iprintf>
 8001566:	480e      	ldr	r0, [pc, #56]	@ (80015a0 <APPE_SysEvtError+0x8c>)
 8001568:	f012 ff8e 	bl	8014488 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800156c:	e00d      	b.n	800158a <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800156e:	4808      	ldr	r0, [pc, #32]	@ (8001590 <APPE_SysEvtError+0x7c>)
 8001570:	f00f fe32 	bl	80111d8 <DbgTraceGetFileName>
 8001574:	4601      	mov	r1, r0
 8001576:	f240 13af 	movw	r3, #431	@ 0x1af
 800157a:	4a06      	ldr	r2, [pc, #24]	@ (8001594 <APPE_SysEvtError+0x80>)
 800157c:	4806      	ldr	r0, [pc, #24]	@ (8001598 <APPE_SysEvtError+0x84>)
 800157e:	f012 ff1b 	bl	80143b8 <iprintf>
 8001582:	4808      	ldr	r0, [pc, #32]	@ (80015a4 <APPE_SysEvtError+0x90>)
 8001584:	f012 ff80 	bl	8014488 <puts>
  return;
 8001588:	bf00      	nop
}
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	080155a0 	.word	0x080155a0
 8001594:	080166d4 	.word	0x080166d4
 8001598:	080155b8 	.word	0x080155b8
 800159c:	080157a0 	.word	0x080157a0
 80015a0:	080157d0 	.word	0x080157d0
 80015a4:	0801580c 	.word	0x0801580c

080015a8 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	@ 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	330b      	adds	r3, #11
 80015cc:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3302      	adds	r3, #2
 80015d2:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d146      	bne.n	800166a <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80015dc:	4836      	ldr	r0, [pc, #216]	@ (80016b8 <APPE_SysEvtReadyProcessing+0x110>)
 80015de:	f00f fdfb 	bl	80111d8 <DbgTraceGetFileName>
 80015e2:	4601      	mov	r1, r0
 80015e4:	f240 13c5 	movw	r3, #453	@ 0x1c5
 80015e8:	4a34      	ldr	r2, [pc, #208]	@ (80016bc <APPE_SysEvtReadyProcessing+0x114>)
 80015ea:	4835      	ldr	r0, [pc, #212]	@ (80016c0 <APPE_SysEvtReadyProcessing+0x118>)
 80015ec:	f012 fee4 	bl	80143b8 <iprintf>
 80015f0:	4834      	ldr	r0, [pc, #208]	@ (80016c4 <APPE_SysEvtReadyProcessing+0x11c>)
 80015f2:	f012 ff49 	bl	8014488 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80015f6:	f7ff fbf1 	bl	8000ddc <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80015fa:	230f      	movs	r3, #15
 80015fc:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80015fe:	237f      	movs	r3, #127	@ 0x7f
 8001600:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001602:	f7ff fd8f 	bl	8001124 <LL_DBGMCU_GetRevisionID>
 8001606:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001608:	482b      	ldr	r0, [pc, #172]	@ (80016b8 <APPE_SysEvtReadyProcessing+0x110>)
 800160a:	f00f fde5 	bl	80111d8 <DbgTraceGetFileName>
 800160e:	4601      	mov	r1, r0
 8001610:	f240 13dd 	movw	r3, #477	@ 0x1dd
 8001614:	4a29      	ldr	r2, [pc, #164]	@ (80016bc <APPE_SysEvtReadyProcessing+0x114>)
 8001616:	482a      	ldr	r0, [pc, #168]	@ (80016c0 <APPE_SysEvtReadyProcessing+0x118>)
 8001618:	f012 fece 	bl	80143b8 <iprintf>
 800161c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800161e:	482a      	ldr	r0, [pc, #168]	@ (80016c8 <APPE_SysEvtReadyProcessing+0x120>)
 8001620:	f012 feca 	bl	80143b8 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001626:	b29b      	uxth	r3, r3
 8001628:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800162a:	f7ff fd6d 	bl	8001108 <LL_DBGMCU_GetDeviceID>
 800162e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001630:	4821      	ldr	r0, [pc, #132]	@ (80016b8 <APPE_SysEvtReadyProcessing+0x110>)
 8001632:	f00f fdd1 	bl	80111d8 <DbgTraceGetFileName>
 8001636:	4601      	mov	r1, r0
 8001638:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 800163c:	4a1f      	ldr	r2, [pc, #124]	@ (80016bc <APPE_SysEvtReadyProcessing+0x114>)
 800163e:	4820      	ldr	r0, [pc, #128]	@ (80016c0 <APPE_SysEvtReadyProcessing+0x118>)
 8001640:	f012 feba 	bl	80143b8 <iprintf>
 8001644:	6a39      	ldr	r1, [r7, #32]
 8001646:	4821      	ldr	r0, [pc, #132]	@ (80016cc <APPE_SysEvtReadyProcessing+0x124>)
 8001648:	f012 feb6 	bl	80143b8 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	b29b      	uxth	r3, r3
 8001650:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	4618      	mov	r0, r3
 8001658:	f00e ffde 	bl	8010618 <SHCI_C2_Config>

    APP_BLE_Init();
 800165c:	f010 fba0 	bl	8011da0 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001660:	2100      	movs	r1, #0
 8001662:	2001      	movs	r0, #1
 8001664:	f012 fb7c 	bl	8013d60 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001668:	e022      	b.n	80016b0 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d110      	bne.n	8001694 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001672:	4811      	ldr	r0, [pc, #68]	@ (80016b8 <APPE_SysEvtReadyProcessing+0x110>)
 8001674:	f00f fdb0 	bl	80111d8 <DbgTraceGetFileName>
 8001678:	4601      	mov	r1, r0
 800167a:	f240 13ef 	movw	r3, #495	@ 0x1ef
 800167e:	4a0f      	ldr	r2, [pc, #60]	@ (80016bc <APPE_SysEvtReadyProcessing+0x114>)
 8001680:	480f      	ldr	r0, [pc, #60]	@ (80016c0 <APPE_SysEvtReadyProcessing+0x118>)
 8001682:	f012 fe99 	bl	80143b8 <iprintf>
 8001686:	4812      	ldr	r0, [pc, #72]	@ (80016d0 <APPE_SysEvtReadyProcessing+0x128>)
 8001688:	f012 fe96 	bl	80143b8 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
  return;
 8001692:	e00d      	b.n	80016b0 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001694:	4808      	ldr	r0, [pc, #32]	@ (80016b8 <APPE_SysEvtReadyProcessing+0x110>)
 8001696:	f00f fd9f 	bl	80111d8 <DbgTraceGetFileName>
 800169a:	4601      	mov	r1, r0
 800169c:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 80016a0:	4a06      	ldr	r2, [pc, #24]	@ (80016bc <APPE_SysEvtReadyProcessing+0x114>)
 80016a2:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <APPE_SysEvtReadyProcessing+0x118>)
 80016a4:	f012 fe88 	bl	80143b8 <iprintf>
 80016a8:	480a      	ldr	r0, [pc, #40]	@ (80016d4 <APPE_SysEvtReadyProcessing+0x12c>)
 80016aa:	f012 fe85 	bl	80143b8 <iprintf>
  return;
 80016ae:	bf00      	nop
}
 80016b0:	3728      	adds	r7, #40	@ 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	080155a0 	.word	0x080155a0
 80016bc:	080166e8 	.word	0x080166e8
 80016c0:	080155b8 	.word	0x080155b8
 80016c4:	08015844 	.word	0x08015844
 80016c8:	08015860 	.word	0x08015860
 80016cc:	08015884 	.word	0x08015884
 80016d0:	080158a4 	.word	0x080158a4
 80016d4:	080158d8 	.word	0x080158d8

080016d8 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f012 fb6e 	bl	8013dc0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80016ec:	bf00      	nop
}
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f012 fb5c 	bl	8013dc0 <UTIL_SEQ_Run>
  return;
 8001708:	bf00      	nop
}
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001718:	2100      	movs	r1, #0
 800171a:	2004      	movs	r0, #4
 800171c:	f012 fc6e 	bl	8013ffc <UTIL_SEQ_SetTask>
  return;
 8001720:	bf00      	nop
}
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001730:	2002      	movs	r0, #2
 8001732:	f012 fccf 	bl	80140d4 <UTIL_SEQ_SetEvt>
  return;
 8001736:	bf00      	nop
}
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001746:	2002      	movs	r0, #2
 8001748:	f012 fce4 	bl	8014114 <UTIL_SEQ_WaitEvt>
  return;
 800174c:	bf00      	nop
}
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <LL_AHB1_GRP1_EnableClock>:
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800175c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001760:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001762:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4313      	orrs	r3, r2
 800176a:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800176c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001770:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001778:	68fb      	ldr	r3, [r7, #12]
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800178a:	2004      	movs	r0, #4
 800178c:	f7ff ffe2 	bl	8001754 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff ffdf 	bl	8001754 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2102      	movs	r1, #2
 800179a:	200b      	movs	r0, #11
 800179c:	f003 f845 	bl	800482a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017a0:	200b      	movs	r0, #11
 80017a2:	f003 f85c 	bl	800485e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2102      	movs	r1, #2
 80017aa:	200c      	movs	r0, #12
 80017ac:	f003 f83d 	bl	800482a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017b0:	200c      	movs	r0, #12
 80017b2:	f003 f854 	bl	800485e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	200d      	movs	r0, #13
 80017bc:	f003 f835 	bl	800482a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80017c0:	200d      	movs	r0, #13
 80017c2:	f003 f84c 	bl	800485e <HAL_NVIC_EnableIRQ>

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}

080017ca <LL_AHB2_GRP1_EnableClock>:
{
 80017ca:	b480      	push	{r7}
 80017cc:	b085      	sub	sp, #20
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80017d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4313      	orrs	r3, r2
 80017e0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4013      	ands	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001810:	2004      	movs	r0, #4
 8001812:	f7ff ffda 	bl	80017ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2001      	movs	r0, #1
 8001818:	f7ff ffd7 	bl	80017ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800181c:	2010      	movs	r0, #16
 800181e:	f7ff ffd4 	bl	80017ca <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	2110      	movs	r1, #16
 8001826:	480a      	ldr	r0, [pc, #40]	@ (8001850 <MX_GPIO_Init+0x54>)
 8001828:	f003 fd00 	bl	800522c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800182c:	2310      	movs	r3, #16
 800182e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4803      	ldr	r0, [pc, #12]	@ (8001850 <MX_GPIO_Init+0x54>)
 8001842:	f003 fb83 	bl	8004f4c <HAL_GPIO_Init>

}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	48001000 	.word	0x48001000

08001854 <LL_EXTI_EnableIT_0_31>:
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <LL_EXTI_EnableIT_0_31+0x24>)
 800185e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001862:	4905      	ldr	r1, [pc, #20]	@ (8001878 <LL_EXTI_EnableIT_0_31+0x24>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4313      	orrs	r3, r2
 8001868:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	58000800 	.word	0x58000800

0800187c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4904      	ldr	r1, [pc, #16]	@ (800189c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]

}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	58000800 	.word	0x58000800

080018a0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80018a6:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <ReadRtcSsrValue+0x3c>)
 80018a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80018ae:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <ReadRtcSsrValue+0x3c>)
 80018b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80018b6:	e005      	b.n	80018c4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80018bc:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <ReadRtcSsrValue+0x3c>)
 80018be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d1f5      	bne.n	80018b8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80018cc:	683b      	ldr	r3, [r7, #0]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40002800 	.word	0x40002800

080018e0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	460a      	mov	r2, r1
 80018ea:	71fb      	strb	r3, [r7, #7]
 80018ec:	4613      	mov	r3, r2
 80018ee:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80018f0:	79ba      	ldrb	r2, [r7, #6]
 80018f2:	491d      	ldr	r1, [pc, #116]	@ (8001968 <LinkTimerAfter+0x88>)
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	440b      	add	r3, r1
 80018fe:	3315      	adds	r3, #21
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	2b06      	cmp	r3, #6
 8001908:	d009      	beq.n	800191e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	4916      	ldr	r1, [pc, #88]	@ (8001968 <LinkTimerAfter+0x88>)
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	3314      	adds	r3, #20
 800191a:	79fa      	ldrb	r2, [r7, #7]
 800191c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800191e:	79fa      	ldrb	r2, [r7, #7]
 8001920:	4911      	ldr	r1, [pc, #68]	@ (8001968 <LinkTimerAfter+0x88>)
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	440b      	add	r3, r1
 800192c:	3315      	adds	r3, #21
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001932:	79fa      	ldrb	r2, [r7, #7]
 8001934:	490c      	ldr	r1, [pc, #48]	@ (8001968 <LinkTimerAfter+0x88>)
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	3314      	adds	r3, #20
 8001942:	79ba      	ldrb	r2, [r7, #6]
 8001944:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001946:	79ba      	ldrb	r2, [r7, #6]
 8001948:	4907      	ldr	r1, [pc, #28]	@ (8001968 <LinkTimerAfter+0x88>)
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	440b      	add	r3, r1
 8001954:	3315      	adds	r3, #21
 8001956:	79fa      	ldrb	r2, [r7, #7]
 8001958:	701a      	strb	r2, [r3, #0]

  return;
 800195a:	bf00      	nop
}
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	200002b0 	.word	0x200002b0

0800196c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	460a      	mov	r2, r1
 8001976:	71fb      	strb	r3, [r7, #7]
 8001978:	4613      	mov	r3, r2
 800197a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800197c:	4b29      	ldr	r3, [pc, #164]	@ (8001a24 <LinkTimerBefore+0xb8>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	79ba      	ldrb	r2, [r7, #6]
 8001984:	429a      	cmp	r2, r3
 8001986:	d032      	beq.n	80019ee <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001988:	79ba      	ldrb	r2, [r7, #6]
 800198a:	4927      	ldr	r1, [pc, #156]	@ (8001a28 <LinkTimerBefore+0xbc>)
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	3314      	adds	r3, #20
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	4922      	ldr	r1, [pc, #136]	@ (8001a28 <LinkTimerBefore+0xbc>)
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	440b      	add	r3, r1
 80019aa:	3315      	adds	r3, #21
 80019ac:	79fa      	ldrb	r2, [r7, #7]
 80019ae:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80019b0:	79fa      	ldrb	r2, [r7, #7]
 80019b2:	491d      	ldr	r1, [pc, #116]	@ (8001a28 <LinkTimerBefore+0xbc>)
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	3315      	adds	r3, #21
 80019c0:	79ba      	ldrb	r2, [r7, #6]
 80019c2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80019c4:	79fa      	ldrb	r2, [r7, #7]
 80019c6:	4918      	ldr	r1, [pc, #96]	@ (8001a28 <LinkTimerBefore+0xbc>)
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	440b      	add	r3, r1
 80019d2:	3314      	adds	r3, #20
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80019d8:	79ba      	ldrb	r2, [r7, #6]
 80019da:	4913      	ldr	r1, [pc, #76]	@ (8001a28 <LinkTimerBefore+0xbc>)
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	440b      	add	r3, r1
 80019e6:	3314      	adds	r3, #20
 80019e8:	79fa      	ldrb	r2, [r7, #7]
 80019ea:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80019ec:	e014      	b.n	8001a18 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80019ee:	79fa      	ldrb	r2, [r7, #7]
 80019f0:	490d      	ldr	r1, [pc, #52]	@ (8001a28 <LinkTimerBefore+0xbc>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	3315      	adds	r3, #21
 80019fe:	79ba      	ldrb	r2, [r7, #6]
 8001a00:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001a02:	79ba      	ldrb	r2, [r7, #6]
 8001a04:	4908      	ldr	r1, [pc, #32]	@ (8001a28 <LinkTimerBefore+0xbc>)
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	3314      	adds	r3, #20
 8001a12:	79fa      	ldrb	r2, [r7, #7]
 8001a14:	701a      	strb	r2, [r3, #0]
  return;
 8001a16:	bf00      	nop
}
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000340 	.word	0x20000340
 8001a28:	200002b0 	.word	0x200002b0

08001a2c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a36:	4b4e      	ldr	r3, [pc, #312]	@ (8001b70 <linkTimer+0x144>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b06      	cmp	r3, #6
 8001a3e:	d118      	bne.n	8001a72 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001a40:	4b4b      	ldr	r3, [pc, #300]	@ (8001b70 <linkTimer+0x144>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4b4b      	ldr	r3, [pc, #300]	@ (8001b74 <linkTimer+0x148>)
 8001a48:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001a4a:	4a49      	ldr	r2, [pc, #292]	@ (8001b70 <linkTimer+0x144>)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001a50:	79fa      	ldrb	r2, [r7, #7]
 8001a52:	4949      	ldr	r1, [pc, #292]	@ (8001b78 <linkTimer+0x14c>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3315      	adds	r3, #21
 8001a60:	2206      	movs	r2, #6
 8001a62:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001a64:	4b45      	ldr	r3, [pc, #276]	@ (8001b7c <linkTimer+0x150>)
 8001a66:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	81fb      	strh	r3, [r7, #14]
 8001a70:	e078      	b.n	8001b64 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001a72:	f000 f909 	bl	8001c88 <ReturnTimeElapsed>
 8001a76:	4603      	mov	r3, r0
 8001a78:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001a7a:	79fa      	ldrb	r2, [r7, #7]
 8001a7c:	493e      	ldr	r1, [pc, #248]	@ (8001b78 <linkTimer+0x14c>)
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	3308      	adds	r3, #8
 8001a8a:	6819      	ldr	r1, [r3, #0]
 8001a8c:	89fb      	ldrh	r3, [r7, #14]
 8001a8e:	79fa      	ldrb	r2, [r7, #7]
 8001a90:	4419      	add	r1, r3
 8001a92:	4839      	ldr	r0, [pc, #228]	@ (8001b78 <linkTimer+0x14c>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4403      	add	r3, r0
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001aa2:	79fa      	ldrb	r2, [r7, #7]
 8001aa4:	4934      	ldr	r1, [pc, #208]	@ (8001b78 <linkTimer+0x14c>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	440b      	add	r3, r1
 8001ab0:	3308      	adds	r3, #8
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b70 <linkTimer+0x144>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	4619      	mov	r1, r3
 8001abe:	4a2e      	ldr	r2, [pc, #184]	@ (8001b78 <linkTimer+0x14c>)
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	440b      	add	r3, r1
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4413      	add	r3, r2
 8001aca:	3308      	adds	r3, #8
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d337      	bcc.n	8001b44 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001ad4:	4b26      	ldr	r3, [pc, #152]	@ (8001b70 <linkTimer+0x144>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001ada:	7b7a      	ldrb	r2, [r7, #13]
 8001adc:	4926      	ldr	r1, [pc, #152]	@ (8001b78 <linkTimer+0x14c>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3315      	adds	r3, #21
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001aee:	e013      	b.n	8001b18 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001af0:	7b7a      	ldrb	r2, [r7, #13]
 8001af2:	4921      	ldr	r1, [pc, #132]	@ (8001b78 <linkTimer+0x14c>)
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	440b      	add	r3, r1
 8001afe:	3315      	adds	r3, #21
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001b04:	7b7a      	ldrb	r2, [r7, #13]
 8001b06:	491c      	ldr	r1, [pc, #112]	@ (8001b78 <linkTimer+0x14c>)
 8001b08:	4613      	mov	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	440b      	add	r3, r1
 8001b12:	3315      	adds	r3, #21
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001b18:	7b3b      	ldrb	r3, [r7, #12]
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d00b      	beq.n	8001b36 <linkTimer+0x10a>
 8001b1e:	7b3a      	ldrb	r2, [r7, #12]
 8001b20:	4915      	ldr	r1, [pc, #84]	@ (8001b78 <linkTimer+0x14c>)
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	440b      	add	r3, r1
 8001b2c:	3308      	adds	r3, #8
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d2dc      	bcs.n	8001af0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001b36:	7b7a      	ldrb	r2, [r7, #13]
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fecf 	bl	80018e0 <LinkTimerAfter>
 8001b42:	e00f      	b.n	8001b64 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001b44:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <linkTimer+0x144>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ff0c 	bl	800196c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <linkTimer+0x144>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <linkTimer+0x148>)
 8001b5c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <linkTimer+0x144>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001b64:	89fb      	ldrh	r3, [r7, #14]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000340 	.word	0x20000340
 8001b74:	20000341 	.word	0x20000341
 8001b78:	200002b0 	.word	0x200002b0
 8001b7c:	20000344 	.word	0x20000344

08001b80 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	460a      	mov	r2, r1
 8001b8a:	71fb      	strb	r3, [r7, #7]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001b90:	4b39      	ldr	r3, [pc, #228]	@ (8001c78 <UnlinkTimer+0xf8>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	79fa      	ldrb	r2, [r7, #7]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d111      	bne.n	8001bc0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b9c:	4b36      	ldr	r3, [pc, #216]	@ (8001c78 <UnlinkTimer+0xf8>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4b36      	ldr	r3, [pc, #216]	@ (8001c7c <UnlinkTimer+0xfc>)
 8001ba4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001ba6:	79fa      	ldrb	r2, [r7, #7]
 8001ba8:	4935      	ldr	r1, [pc, #212]	@ (8001c80 <UnlinkTimer+0x100>)
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3315      	adds	r3, #21
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b2f      	ldr	r3, [pc, #188]	@ (8001c78 <UnlinkTimer+0xf8>)
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	e03e      	b.n	8001c3e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001bc0:	79fa      	ldrb	r2, [r7, #7]
 8001bc2:	492f      	ldr	r1, [pc, #188]	@ (8001c80 <UnlinkTimer+0x100>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	3314      	adds	r3, #20
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	492a      	ldr	r1, [pc, #168]	@ (8001c80 <UnlinkTimer+0x100>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	3315      	adds	r3, #21
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001be8:	79f9      	ldrb	r1, [r7, #7]
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	4824      	ldr	r0, [pc, #144]	@ (8001c80 <UnlinkTimer+0x100>)
 8001bee:	460b      	mov	r3, r1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	440b      	add	r3, r1
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4403      	add	r3, r0
 8001bf8:	3315      	adds	r3, #21
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b2d8      	uxtb	r0, r3
 8001bfe:	4920      	ldr	r1, [pc, #128]	@ (8001c80 <UnlinkTimer+0x100>)
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	440b      	add	r3, r1
 8001c0a:	3315      	adds	r3, #21
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c10:	7bbb      	ldrb	r3, [r7, #14]
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d013      	beq.n	8001c3e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001c16:	79f9      	ldrb	r1, [r7, #7]
 8001c18:	7bba      	ldrb	r2, [r7, #14]
 8001c1a:	4819      	ldr	r0, [pc, #100]	@ (8001c80 <UnlinkTimer+0x100>)
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	440b      	add	r3, r1
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4403      	add	r3, r0
 8001c26:	3314      	adds	r3, #20
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	b2d8      	uxtb	r0, r3
 8001c2c:	4914      	ldr	r1, [pc, #80]	@ (8001c80 <UnlinkTimer+0x100>)
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	440b      	add	r3, r1
 8001c38:	3314      	adds	r3, #20
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001c3e:	79fa      	ldrb	r2, [r7, #7]
 8001c40:	490f      	ldr	r1, [pc, #60]	@ (8001c80 <UnlinkTimer+0x100>)
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	440b      	add	r3, r1
 8001c4c:	330c      	adds	r3, #12
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <UnlinkTimer+0xf8>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b06      	cmp	r3, #6
 8001c5a:	d107      	bne.n	8001c6c <UnlinkTimer+0xec>
 8001c5c:	79bb      	ldrb	r3, [r7, #6]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d104      	bne.n	8001c6c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001c62:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <UnlinkTimer+0x104>)
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	601a      	str	r2, [r3, #0]
  }

  return;
 8001c6a:	bf00      	nop
 8001c6c:	bf00      	nop
}
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	20000340 	.word	0x20000340
 8001c7c:	20000341 	.word	0x20000341
 8001c80:	200002b0 	.word	0x200002b0
 8001c84:	20000344 	.word	0x20000344

08001c88 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <ReturnTimeElapsed+0x70>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c96:	d026      	beq.n	8001ce6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001c98:	f7ff fe02 	bl	80018a0 <ReadRtcSsrValue>
 8001c9c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001c9e:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <ReturnTimeElapsed+0x70>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d805      	bhi.n	8001cb4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001ca8:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <ReturnTimeElapsed+0x70>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	e00a      	b.n	8001cca <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <ReturnTimeElapsed+0x74>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <ReturnTimeElapsed+0x70>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001cca:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <ReturnTimeElapsed+0x78>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	fb02 f303 	mul.w	r3, r2, r3
 8001cd6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <ReturnTimeElapsed+0x7c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	40d3      	lsrs	r3, r2
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	e001      	b.n	8001cea <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	b29b      	uxth	r3, r3
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000344 	.word	0x20000344
 8001cfc:	2000034c 	.word	0x2000034c
 8001d00:	2000034a 	.word	0x2000034a
 8001d04:	20000349 	.word	0x20000349

08001d08 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d108      	bne.n	8001d2a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001d18:	f7ff fdc2 	bl	80018a0 <ReadRtcSsrValue>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a21      	ldr	r2, [pc, #132]	@ (8001da4 <RestartWakeupCounter+0x9c>)
 8001d20:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001d22:	2003      	movs	r0, #3
 8001d24:	f002 fdc3 	bl	80048ae <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001d28:	e039      	b.n	8001d9e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d803      	bhi.n	8001d38 <RestartWakeupCounter+0x30>
 8001d30:	4b1d      	ldr	r3, [pc, #116]	@ (8001da8 <RestartWakeupCounter+0xa0>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d002      	beq.n	8001d3e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001d3e:	bf00      	nop
 8001d40:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <RestartWakeupCounter+0xa4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f8      	beq.n	8001d40 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d4e:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <RestartWakeupCounter+0xa4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <RestartWakeupCounter+0xa4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001d5e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d60:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <RestartWakeupCounter+0xa8>)
 8001d62:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d66:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f002 fdae 	bl	80048ca <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001d6e:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <RestartWakeupCounter+0xac>)
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	0c1b      	lsrs	r3, r3, #16
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	88fa      	ldrh	r2, [r7, #6]
 8001d78:	490e      	ldr	r1, [pc, #56]	@ (8001db4 <RestartWakeupCounter+0xac>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001d7e:	f7ff fd8f 	bl	80018a0 <ReadRtcSsrValue>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4a07      	ldr	r2, [pc, #28]	@ (8001da4 <RestartWakeupCounter+0x9c>)
 8001d86:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001d88:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <RestartWakeupCounter+0xa4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <RestartWakeupCounter+0xa4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d96:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001d98:	f3af 8000 	nop.w
  return ;
 8001d9c:	bf00      	nop
}
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000344 	.word	0x20000344
 8001da8:	20000349 	.word	0x20000349
 8001dac:	200003b0 	.word	0x200003b0
 8001db0:	58000800 	.word	0x58000800
 8001db4:	40002800 	.word	0x40002800

08001db8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001dbe:	4b45      	ldr	r3, [pc, #276]	@ (8001ed4 <RescheduleTimerList+0x11c>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dca:	d107      	bne.n	8001ddc <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001dcc:	bf00      	nop
 8001dce:	4b42      	ldr	r3, [pc, #264]	@ (8001ed8 <RescheduleTimerList+0x120>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f8      	bne.n	8001dce <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ddc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed8 <RescheduleTimerList+0x120>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed8 <RescheduleTimerList+0x120>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dea:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001dec:	4b3b      	ldr	r3, [pc, #236]	@ (8001edc <RescheduleTimerList+0x124>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001df2:	7bfa      	ldrb	r2, [r7, #15]
 8001df4:	493a      	ldr	r1, [pc, #232]	@ (8001ee0 <RescheduleTimerList+0x128>)
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	440b      	add	r3, r1
 8001e00:	3308      	adds	r3, #8
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001e06:	f7ff ff3f 	bl	8001c88 <ReturnTimeElapsed>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d205      	bcs.n	8001e22 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e1a:	4b32      	ldr	r3, [pc, #200]	@ (8001ee4 <RescheduleTimerList+0x12c>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
 8001e20:	e04d      	b.n	8001ebe <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	4a30      	ldr	r2, [pc, #192]	@ (8001ee8 <RescheduleTimerList+0x130>)
 8001e26:	8812      	ldrh	r2, [r2, #0]
 8001e28:	b292      	uxth	r2, r2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d906      	bls.n	8001e42 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001e34:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee8 <RescheduleTimerList+0x130>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee4 <RescheduleTimerList+0x12c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	e03d      	b.n	8001ebe <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ee4 <RescheduleTimerList+0x12c>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e52:	e034      	b.n	8001ebe <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	4922      	ldr	r1, [pc, #136]	@ (8001ee0 <RescheduleTimerList+0x128>)
 8001e58:	4613      	mov	r3, r2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	3308      	adds	r3, #8
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d20a      	bcs.n	8001e82 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	491c      	ldr	r1, [pc, #112]	@ (8001ee0 <RescheduleTimerList+0x128>)
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	3308      	adds	r3, #8
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e013      	b.n	8001eaa <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001e82:	7bfa      	ldrb	r2, [r7, #15]
 8001e84:	4916      	ldr	r1, [pc, #88]	@ (8001ee0 <RescheduleTimerList+0x128>)
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	440b      	add	r3, r1
 8001e90:	3308      	adds	r3, #8
 8001e92:	6819      	ldr	r1, [r3, #0]
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	7bfa      	ldrb	r2, [r7, #15]
 8001e98:	1ac9      	subs	r1, r1, r3
 8001e9a:	4811      	ldr	r0, [pc, #68]	@ (8001ee0 <RescheduleTimerList+0x128>)
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4403      	add	r3, r0
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	490c      	ldr	r1, [pc, #48]	@ (8001ee0 <RescheduleTimerList+0x128>)
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	3315      	adds	r3, #21
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b06      	cmp	r3, #6
 8001ec2:	d1c7      	bne.n	8001e54 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001ec4:	89bb      	ldrh	r3, [r7, #12]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff1e 	bl	8001d08 <RestartWakeupCounter>

  return ;
 8001ecc:	bf00      	nop
}
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40002800 	.word	0x40002800
 8001ed8:	200003b0 	.word	0x200003b0
 8001edc:	20000340 	.word	0x20000340
 8001ee0:	200002b0 	.word	0x200002b0
 8001ee4:	20000348 	.word	0x20000348
 8001ee8:	2000034e 	.word	0x2000034e

08001eec <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	@ 0x28
 8001ef0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ef6:	617b      	str	r3, [r7, #20]
  return(result);
 8001ef8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001efc:	b672      	cpsid	i
}
 8001efe:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f00:	4b59      	ldr	r3, [pc, #356]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	22ca      	movs	r2, #202	@ 0xca
 8001f06:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f08:	4b57      	ldr	r3, [pc, #348]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2253      	movs	r2, #83	@ 0x53
 8001f0e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001f10:	4b55      	ldr	r3, [pc, #340]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	4b54      	ldr	r3, [pc, #336]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f1e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001f20:	4b52      	ldr	r3, [pc, #328]	@ (800206c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001f28:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f2c:	4950      	ldr	r1, [pc, #320]	@ (8002070 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	330c      	adds	r3, #12
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d16e      	bne.n	8002020 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001f42:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f46:	494a      	ldr	r1, [pc, #296]	@ (8002070 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	440b      	add	r3, r1
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001f56:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f5a:	4945      	ldr	r1, [pc, #276]	@ (8002070 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	3310      	adds	r3, #16
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001f6c:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d04c      	beq.n	8002010 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001f76:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f7a:	493d      	ldr	r1, [pc, #244]	@ (8002070 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	440b      	add	r3, r1
 8001f86:	330d      	adds	r3, #13
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d124      	bne.n	8001fda <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001f90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f94:	2101      	movs	r1, #1
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fdf2 	bl	8001b80 <UnlinkTimer>
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f383 8810 	msr	PRIMASK, r3
}
 8001fa6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001fa8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001fac:	4930      	ldr	r1, [pc, #192]	@ (8002070 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	440b      	add	r3, r1
 8001fb8:	3304      	adds	r3, #4
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fa32 	bl	800242c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fc8:	4b27      	ldr	r3, [pc, #156]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	22ca      	movs	r2, #202	@ 0xca
 8001fce:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fd0:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2253      	movs	r2, #83	@ 0x53
 8001fd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fd8:	e012      	b.n	8002000 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f383 8810 	msr	PRIMASK, r3
}
 8001fe4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001fe6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 f99a 	bl	8002324 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	22ca      	movs	r2, #202	@ 0xca
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2253      	movs	r2, #83	@ 0x53
 8001ffe:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002000:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	4619      	mov	r1, r3
 8002008:	69b8      	ldr	r0, [r7, #24]
 800200a:	f000 fa95 	bl	8002538 <HW_TS_RTC_Int_AppNot>
 800200e:	e022      	b.n	8002056 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002010:	f7ff fed2 	bl	8001db8 <RescheduleTimerList>
 8002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002016:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f383 8810 	msr	PRIMASK, r3
}
 800201e:	e01a      	b.n	8002056 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002020:	bf00      	nop
 8002022:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f8      	beq.n	8002022 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002030:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002040:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002042:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002044:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f383 8810 	msr	PRIMASK, r3
}
 8002054:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002056:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	22ff      	movs	r2, #255	@ 0xff
 800205c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 800205e:	bf00      	nop
}
 8002060:	3728      	adds	r7, #40	@ 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200003b0 	.word	0x200003b0
 800206c:	20000340 	.word	0x20000340
 8002070:	200002b0 	.word	0x200002b0
 8002074:	20000348 	.word	0x20000348
 8002078:	58000800 	.word	0x58000800

0800207c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002088:	4b5e      	ldr	r3, [pc, #376]	@ (8002204 <HW_TS_Init+0x188>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	22ca      	movs	r2, #202	@ 0xca
 800208e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002090:	4b5c      	ldr	r3, [pc, #368]	@ (8002204 <HW_TS_Init+0x188>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2253      	movs	r2, #83	@ 0x53
 8002096:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002098:	4b5b      	ldr	r3, [pc, #364]	@ (8002208 <HW_TS_Init+0x18c>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a5a      	ldr	r2, [pc, #360]	@ (8002208 <HW_TS_Init+0x18c>)
 800209e:	f043 0320 	orr.w	r3, r3, #32
 80020a2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80020a4:	4b58      	ldr	r3, [pc, #352]	@ (8002208 <HW_TS_Init+0x18c>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f1c3 0304 	rsb	r3, r3, #4
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b55      	ldr	r3, [pc, #340]	@ (800220c <HW_TS_Init+0x190>)
 80020b8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80020ba:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <HW_TS_Init+0x18c>)
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80020c2:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80020c6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	fa92 f2a2 	rbit	r2, r2
 80020ce:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	2a00      	cmp	r2, #0
 80020d8:	d101      	bne.n	80020de <HW_TS_Init+0x62>
  {
    return 32U;
 80020da:	2220      	movs	r2, #32
 80020dc:	e003      	b.n	80020e6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	fab2 f282 	clz	r2, r2
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	40d3      	lsrs	r3, r2
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4b48      	ldr	r3, [pc, #288]	@ (8002210 <HW_TS_Init+0x194>)
 80020f0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80020f2:	4b45      	ldr	r3, [pc, #276]	@ (8002208 <HW_TS_Init+0x18c>)
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	4b44      	ldr	r3, [pc, #272]	@ (8002214 <HW_TS_Init+0x198>)
 8002104:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002106:	4b43      	ldr	r3, [pc, #268]	@ (8002214 <HW_TS_Init+0x198>)
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	3b01      	subs	r3, #1
 800210c:	4a40      	ldr	r2, [pc, #256]	@ (8002210 <HW_TS_Init+0x194>)
 800210e:	7812      	ldrb	r2, [r2, #0]
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002118:	4a3c      	ldr	r2, [pc, #240]	@ (800220c <HW_TS_Init+0x190>)
 800211a:	7812      	ldrb	r2, [r2, #0]
 800211c:	40d3      	lsrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002126:	4293      	cmp	r3, r2
 8002128:	d904      	bls.n	8002134 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800212a:	4b3b      	ldr	r3, [pc, #236]	@ (8002218 <HW_TS_Init+0x19c>)
 800212c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002130:	801a      	strh	r2, [r3, #0]
 8002132:	e003      	b.n	800213c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	b29a      	uxth	r2, r3
 8002138:	4b37      	ldr	r3, [pc, #220]	@ (8002218 <HW_TS_Init+0x19c>)
 800213a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800213c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002140:	f7ff fb9c 	bl	800187c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002144:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002148:	f7ff fb84 	bl	8001854 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d13d      	bne.n	80021ce <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002152:	4b32      	ldr	r3, [pc, #200]	@ (800221c <HW_TS_Init+0x1a0>)
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002158:	4b31      	ldr	r3, [pc, #196]	@ (8002220 <HW_TS_Init+0x1a4>)
 800215a:	f04f 32ff 	mov.w	r2, #4294967295
 800215e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002160:	2300      	movs	r3, #0
 8002162:	77fb      	strb	r3, [r7, #31]
 8002164:	e00c      	b.n	8002180 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002166:	7ffa      	ldrb	r2, [r7, #31]
 8002168:	492e      	ldr	r1, [pc, #184]	@ (8002224 <HW_TS_Init+0x1a8>)
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	330c      	adds	r3, #12
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800217a:	7ffb      	ldrb	r3, [r7, #31]
 800217c:	3301      	adds	r3, #1
 800217e:	77fb      	strb	r3, [r7, #31]
 8002180:	7ffb      	ldrb	r3, [r7, #31]
 8002182:	2b05      	cmp	r3, #5
 8002184:	d9ef      	bls.n	8002166 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002186:	4b28      	ldr	r3, [pc, #160]	@ (8002228 <HW_TS_Init+0x1ac>)
 8002188:	2206      	movs	r2, #6
 800218a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800218c:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <HW_TS_Init+0x188>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	4b1c      	ldr	r3, [pc, #112]	@ (8002204 <HW_TS_Init+0x188>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800219a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800219c:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HW_TS_Init+0x188>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	4b17      	ldr	r3, [pc, #92]	@ (8002204 <HW_TS_Init+0x188>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80021ac:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80021ae:	4b1f      	ldr	r3, [pc, #124]	@ (800222c <HW_TS_Init+0x1b0>)
 80021b0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80021b4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80021b6:	2003      	movs	r0, #3
 80021b8:	f002 fb87 	bl	80048ca <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80021bc:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <HW_TS_Init+0x188>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <HW_TS_Init+0x188>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	e009      	b.n	80021e2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80021ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <HW_TS_Init+0x188>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80021dc:	2003      	movs	r0, #3
 80021de:	f002 fb66 	bl	80048ae <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80021e2:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <HW_TS_Init+0x188>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	22ff      	movs	r2, #255	@ 0xff
 80021e8:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80021ea:	2200      	movs	r2, #0
 80021ec:	2103      	movs	r1, #3
 80021ee:	2003      	movs	r0, #3
 80021f0:	f002 fb1b 	bl	800482a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80021f4:	2003      	movs	r0, #3
 80021f6:	f002 fb32 	bl	800485e <HAL_NVIC_EnableIRQ>

  return;
 80021fa:	bf00      	nop
}
 80021fc:	3720      	adds	r7, #32
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200003b0 	.word	0x200003b0
 8002208:	40002800 	.word	0x40002800
 800220c:	20000349 	.word	0x20000349
 8002210:	2000034a 	.word	0x2000034a
 8002214:	2000034c 	.word	0x2000034c
 8002218:	2000034e 	.word	0x2000034e
 800221c:	20000348 	.word	0x20000348
 8002220:	20000344 	.word	0x20000344
 8002224:	200002b0 	.word	0x200002b0
 8002228:	20000340 	.word	0x20000340
 800222c:	58000800 	.word	0x58000800

08002230 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002230:	b480      	push	{r7}
 8002232:	b08b      	sub	sp, #44	@ 0x2c
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002246:	f3ef 8310 	mrs	r3, PRIMASK
 800224a:	61fb      	str	r3, [r7, #28]
  return(result);
 800224c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800224e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002250:	b672      	cpsid	i
}
 8002252:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002254:	e004      	b.n	8002260 <HW_TS_Create+0x30>
  {
    loop++;
 8002256:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800225a:	3301      	adds	r3, #1
 800225c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002260:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002264:	2b05      	cmp	r3, #5
 8002266:	d80c      	bhi.n	8002282 <HW_TS_Create+0x52>
 8002268:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800226c:	492c      	ldr	r1, [pc, #176]	@ (8002320 <HW_TS_Create+0xf0>)
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	330c      	adds	r3, #12
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1e9      	bne.n	8002256 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002282:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002286:	2b06      	cmp	r3, #6
 8002288:	d038      	beq.n	80022fc <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800228a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800228e:	4924      	ldr	r1, [pc, #144]	@ (8002320 <HW_TS_Create+0xf0>)
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	440b      	add	r3, r1
 800229a:	330c      	adds	r3, #12
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	f383 8810 	msr	PRIMASK, r3
}
 80022aa:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80022ac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80022b0:	491b      	ldr	r1, [pc, #108]	@ (8002320 <HW_TS_Create+0xf0>)
 80022b2:	4613      	mov	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	3310      	adds	r3, #16
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80022c2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80022c6:	4916      	ldr	r1, [pc, #88]	@ (8002320 <HW_TS_Create+0xf0>)
 80022c8:	4613      	mov	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	330d      	adds	r3, #13
 80022d4:	79fa      	ldrb	r2, [r7, #7]
 80022d6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80022d8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80022dc:	4910      	ldr	r1, [pc, #64]	@ (8002320 <HW_TS_Create+0xf0>)
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80022f2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80022fa:	e008      	b.n	800230e <HW_TS_Create+0xde>
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f383 8810 	msr	PRIMASK, r3
}
 8002306:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 800230e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002312:	4618      	mov	r0, r3
 8002314:	372c      	adds	r7, #44	@ 0x2c
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	200002b0 	.word	0x200002b0

08002324 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800232e:	f3ef 8310 	mrs	r3, PRIMASK
 8002332:	60fb      	str	r3, [r7, #12]
  return(result);
 8002334:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002336:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002338:	b672      	cpsid	i
}
 800233a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800233c:	2003      	movs	r0, #3
 800233e:	f002 fa9c 	bl	800487a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002342:	4b34      	ldr	r3, [pc, #208]	@ (8002414 <HW_TS_Stop+0xf0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	22ca      	movs	r2, #202	@ 0xca
 8002348:	625a      	str	r2, [r3, #36]	@ 0x24
 800234a:	4b32      	ldr	r3, [pc, #200]	@ (8002414 <HW_TS_Stop+0xf0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2253      	movs	r2, #83	@ 0x53
 8002350:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002352:	79fa      	ldrb	r2, [r7, #7]
 8002354:	4930      	ldr	r1, [pc, #192]	@ (8002418 <HW_TS_Stop+0xf4>)
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	330c      	adds	r3, #12
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d142      	bne.n	80023f0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fc06 	bl	8001b80 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002374:	4b29      	ldr	r3, [pc, #164]	@ (800241c <HW_TS_Stop+0xf8>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800237a:	7cfb      	ldrb	r3, [r7, #19]
 800237c:	2b06      	cmp	r3, #6
 800237e:	d12f      	bne.n	80023e0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002380:	4b27      	ldr	r3, [pc, #156]	@ (8002420 <HW_TS_Stop+0xfc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800238c:	d107      	bne.n	800239e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800238e:	bf00      	nop
 8002390:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <HW_TS_Stop+0xf0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f8      	bne.n	8002390 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800239e:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <HW_TS_Stop+0xf0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <HW_TS_Stop+0xf0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ac:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80023ae:	bf00      	nop
 80023b0:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <HW_TS_Stop+0xf0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f8      	beq.n	80023b0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <HW_TS_Stop+0xf0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <HW_TS_Stop+0xf0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80023ce:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80023d0:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <HW_TS_Stop+0x100>)
 80023d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80023d6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80023d8:	2003      	movs	r0, #3
 80023da:	f002 fa76 	bl	80048ca <HAL_NVIC_ClearPendingIRQ>
 80023de:	e007      	b.n	80023f0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80023e0:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <HW_TS_Stop+0x104>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	7cfa      	ldrb	r2, [r7, #19]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80023ec:	f7ff fce4 	bl	8001db8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023f0:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <HW_TS_Stop+0xf0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	22ff      	movs	r2, #255	@ 0xff
 80023f6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80023f8:	2003      	movs	r0, #3
 80023fa:	f002 fa30 	bl	800485e <HAL_NVIC_EnableIRQ>
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f383 8810 	msr	PRIMASK, r3
}
 8002408:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800240a:	bf00      	nop
}
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200003b0 	.word	0x200003b0
 8002418:	200002b0 	.word	0x200002b0
 800241c:	20000340 	.word	0x20000340
 8002420:	40002800 	.word	0x40002800
 8002424:	58000800 	.word	0x58000800
 8002428:	20000341 	.word	0x20000341

0800242c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002438:	79fa      	ldrb	r2, [r7, #7]
 800243a:	493b      	ldr	r1, [pc, #236]	@ (8002528 <HW_TS_Start+0xfc>)
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	440b      	add	r3, r1
 8002446:	330c      	adds	r3, #12
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d103      	bne.n	8002458 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff66 	bl	8002324 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002458:	f3ef 8310 	mrs	r3, PRIMASK
 800245c:	60fb      	str	r3, [r7, #12]
  return(result);
 800245e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002460:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002462:	b672      	cpsid	i
}
 8002464:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002466:	2003      	movs	r0, #3
 8002468:	f002 fa07 	bl	800487a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800246c:	4b2f      	ldr	r3, [pc, #188]	@ (800252c <HW_TS_Start+0x100>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	22ca      	movs	r2, #202	@ 0xca
 8002472:	625a      	str	r2, [r3, #36]	@ 0x24
 8002474:	4b2d      	ldr	r3, [pc, #180]	@ (800252c <HW_TS_Start+0x100>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2253      	movs	r2, #83	@ 0x53
 800247a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800247c:	79fa      	ldrb	r2, [r7, #7]
 800247e:	492a      	ldr	r1, [pc, #168]	@ (8002528 <HW_TS_Start+0xfc>)
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	440b      	add	r3, r1
 800248a:	330c      	adds	r3, #12
 800248c:	2202      	movs	r2, #2
 800248e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002490:	79fa      	ldrb	r2, [r7, #7]
 8002492:	4925      	ldr	r1, [pc, #148]	@ (8002528 <HW_TS_Start+0xfc>)
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	440b      	add	r3, r1
 800249e:	3308      	adds	r3, #8
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80024a4:	79fa      	ldrb	r2, [r7, #7]
 80024a6:	4920      	ldr	r1, [pc, #128]	@ (8002528 <HW_TS_Start+0xfc>)
 80024a8:	4613      	mov	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	3304      	adds	r3, #4
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fab6 	bl	8001a2c <linkTimer>
 80024c0:	4603      	mov	r3, r0
 80024c2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80024c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <HW_TS_Start+0x104>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80024ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002534 <HW_TS_Start+0x108>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	7c7a      	ldrb	r2, [r7, #17]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d002      	beq.n	80024dc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80024d6:	f7ff fc6f 	bl	8001db8 <RescheduleTimerList>
 80024da:	e013      	b.n	8002504 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80024dc:	79fa      	ldrb	r2, [r7, #7]
 80024de:	4912      	ldr	r1, [pc, #72]	@ (8002528 <HW_TS_Start+0xfc>)
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	3308      	adds	r3, #8
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	8a7b      	ldrh	r3, [r7, #18]
 80024f0:	79fa      	ldrb	r2, [r7, #7]
 80024f2:	1ac9      	subs	r1, r1, r3
 80024f4:	480c      	ldr	r0, [pc, #48]	@ (8002528 <HW_TS_Start+0xfc>)
 80024f6:	4613      	mov	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4403      	add	r3, r0
 8002500:	3308      	adds	r3, #8
 8002502:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002504:	4b09      	ldr	r3, [pc, #36]	@ (800252c <HW_TS_Start+0x100>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	22ff      	movs	r2, #255	@ 0xff
 800250a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800250c:	2003      	movs	r0, #3
 800250e:	f002 f9a6 	bl	800485e <HAL_NVIC_EnableIRQ>
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f383 8810 	msr	PRIMASK, r3
}
 800251c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800251e:	bf00      	nop
}
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	200002b0 	.word	0x200002b0
 800252c:	200003b0 	.word	0x200003b0
 8002530:	20000340 	.word	0x20000340
 8002534:	20000341 	.word	0x20000341

08002538 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	460b      	mov	r3, r1
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4798      	blx	r3

  return;
 800254a:	bf00      	nop
}
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	4603      	mov	r3, r0
 8002560:	73fb      	strb	r3, [r7, #15]
 8002562:	4613      	mov	r3, r2
 8002564:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800256a:	2300      	movs	r3, #0
 800256c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10e      	bne.n	8002592 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002574:	4a17      	ldr	r2, [pc, #92]	@ (80025d4 <HW_UART_Transmit_DMA+0x80>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800257a:	4b17      	ldr	r3, [pc, #92]	@ (80025d8 <HW_UART_Transmit_DMA+0x84>)
 800257c:	4a17      	ldr	r2, [pc, #92]	@ (80025dc <HW_UART_Transmit_DMA+0x88>)
 800257e:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002580:	89bb      	ldrh	r3, [r7, #12]
 8002582:	461a      	mov	r2, r3
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	4814      	ldr	r0, [pc, #80]	@ (80025d8 <HW_UART_Transmit_DMA+0x84>)
 8002588:	f006 fea6 	bl	80092d8 <HAL_UART_Transmit_DMA>
 800258c:	4603      	mov	r3, r0
 800258e:	75fb      	strb	r3, [r7, #23]
            break;
 8002590:	e000      	b.n	8002594 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002592:	bf00      	nop
    }

    switch (hal_status)
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	2b03      	cmp	r3, #3
 8002598:	d816      	bhi.n	80025c8 <HW_UART_Transmit_DMA+0x74>
 800259a:	a201      	add	r2, pc, #4	@ (adr r2, 80025a0 <HW_UART_Transmit_DMA+0x4c>)
 800259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a0:	080025b1 	.word	0x080025b1
 80025a4:	080025b7 	.word	0x080025b7
 80025a8:	080025bd 	.word	0x080025bd
 80025ac:	080025c3 	.word	0x080025c3
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80025b0:	2300      	movs	r3, #0
 80025b2:	75bb      	strb	r3, [r7, #22]
            break;
 80025b4:	e009      	b.n	80025ca <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80025b6:	2301      	movs	r3, #1
 80025b8:	75bb      	strb	r3, [r7, #22]
            break;
 80025ba:	e006      	b.n	80025ca <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80025bc:	2302      	movs	r3, #2
 80025be:	75bb      	strb	r3, [r7, #22]
            break;
 80025c0:	e003      	b.n	80025ca <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80025c2:	2303      	movs	r3, #3
 80025c4:	75bb      	strb	r3, [r7, #22]
            break;
 80025c6:	e000      	b.n	80025ca <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80025c8:	bf00      	nop
    }

    return hw_status;
 80025ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000350 	.word	0x20000350
 80025d8:	200003d8 	.word	0x200003d8
 80025dc:	40013800 	.word	0x40013800

080025e0 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <HAL_UART_TxCpltCallback+0x34>)
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d107      	bne.n	8002604 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80025f4:	4b08      	ldr	r3, [pc, #32]	@ (8002618 <HAL_UART_TxCpltCallback+0x38>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_UART_TxCpltCallback+0x38>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4798      	blx	r3
            }
            break;
 8002602:	e001      	b.n	8002608 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002604:	bf00      	nop
 8002606:	e000      	b.n	800260a <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002608:	bf00      	nop
    }

    return;
 800260a:	bf00      	nop
}
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40013800 	.word	0x40013800
 8002618:	20000350 	.word	0x20000350

0800261c <LL_AHB3_GRP1_EnableClock>:
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800262a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4313      	orrs	r3, r2
 8002632:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002638:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4013      	ands	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002640:	68fb      	ldr	r3, [r7, #12]
}
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002654:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <MX_IPCC_Init+0x20>)
 8002656:	4a07      	ldr	r2, [pc, #28]	@ (8002674 <MX_IPCC_Init+0x24>)
 8002658:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800265a:	4805      	ldr	r0, [pc, #20]	@ (8002670 <MX_IPCC_Init+0x20>)
 800265c:	f002 fe22 	bl	80052a4 <HAL_IPCC_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002666:	f000 f9a1 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000354 	.word	0x20000354
 8002674:	58000c00 	.word	0x58000c00

08002678 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0d      	ldr	r2, [pc, #52]	@ (80026bc <HAL_IPCC_MspInit+0x44>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d113      	bne.n	80026b2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800268a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800268e:	f7ff ffc5 	bl	800261c <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 2, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2102      	movs	r1, #2
 8002696:	202c      	movs	r0, #44	@ 0x2c
 8002698:	f002 f8c7 	bl	800482a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800269c:	202c      	movs	r0, #44	@ 0x2c
 800269e:	f002 f8de 	bl	800485e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 2, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2102      	movs	r1, #2
 80026a6:	202d      	movs	r0, #45	@ 0x2d
 80026a8:	f002 f8bf 	bl	800482a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80026ac:	202d      	movs	r0, #45	@ 0x2d
 80026ae:	f002 f8d6 	bl	800485e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	58000c00 	.word	0x58000c00

080026c0 <LL_RCC_LSE_SetDriveCapability>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80026c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d0:	f023 0218 	bic.w	r2, r3, #24
 80026d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	3220      	adds	r2, #32
 80026fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002700:	4a05      	ldr	r2, [pc, #20]	@ (8002718 <LL_HSEM_1StepLock+0x2c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d001      	beq.n	800270a <LL_HSEM_1StepLock+0x1e>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <LL_HSEM_1StepLock+0x20>
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	80000400 	.word	0x80000400

0800271c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800271c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271e:	b0ab      	sub	sp, #172	@ 0xac
 8002720:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
	uint32_t tick,tick_now = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	tick = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800272e:	f000 fd11 	bl	8003154 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002732:	f7fe fd35 	bl	80011a0 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002736:	f000 f8ab 	bl	8002890 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800273a:	f000 f917 	bl	800296c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800273e:	f7ff ff87 	bl	8002650 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002742:	f7ff f85b 	bl	80017fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002746:	f7ff f81e 	bl	8001786 <MX_DMA_Init>
  MX_RTC_Init();
 800274a:	f000 f967 	bl	8002a1c <MX_RTC_Init>
  MX_USB_Device_Init();
 800274e:	f010 fda5 	bl	801329c <MX_USB_Device_Init>
  MX_ADC1_Init();
 8002752:	f7fe fa03 	bl	8000b5c <MX_ADC1_Init>
  MX_RF_Init();
 8002756:	f000 f92f 	bl	80029b8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  LL_HSEM_1StepLock( HSEM, 5 );
 800275a:	2105      	movs	r1, #5
 800275c:	4840      	ldr	r0, [pc, #256]	@ (8002860 <main+0x144>)
 800275e:	f7ff ffc5 	bl	80026ec <LL_HSEM_1StepLock>
	
	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8002762:	217f      	movs	r1, #127	@ 0x7f
 8002764:	483f      	ldr	r0, [pc, #252]	@ (8002864 <main+0x148>)
 8002766:	f001 fec3 	bl	80044f0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&adc_inp,1);
 800276a:	2201      	movs	r2, #1
 800276c:	493e      	ldr	r1, [pc, #248]	@ (8002868 <main+0x14c>)
 800276e:	483d      	ldr	r0, [pc, #244]	@ (8002864 <main+0x148>)
 8002770:	f001 f8bc 	bl	80038ec <HAL_ADC_Start_DMA>
	extern uint8_t led_blink_en;
	extern uint8_t Notification_Status;
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002774:	f7fe fd22 	bl	80011bc <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002778:	f7fe ffae 	bl	80016d8 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
		tick_now = HAL_GetTick();
 800277c:	f000 fd58 	bl	8003230 <HAL_GetTick>
 8002780:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
		if (tick_now >= tick) {
 8002784:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002788:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800278c:	429a      	cmp	r2, r3
 800278e:	d3f3      	bcc.n	8002778 <main+0x5c>
			tick = tick_now + 500;
 8002790:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002794:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002798:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			uint8_t text[128];
			static uint8_t Seconds_o;
			int text_lenth;

			/* Get the RTC current Time */
			HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 800279c:	2200      	movs	r2, #0
 800279e:	4933      	ldr	r1, [pc, #204]	@ (800286c <main+0x150>)
 80027a0:	4833      	ldr	r0, [pc, #204]	@ (8002870 <main+0x154>)
 80027a2:	f006 fa89 	bl	8008cb8 <HAL_RTC_GetTime>
			/* Get the RTC current Date */
			HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 80027a6:	2200      	movs	r2, #0
 80027a8:	4932      	ldr	r1, [pc, #200]	@ (8002874 <main+0x158>)
 80027aa:	4831      	ldr	r0, [pc, #196]	@ (8002870 <main+0x154>)
 80027ac:	f006 fb8e 	bl	8008ecc <HAL_RTC_GetDate>

			if (Seconds_o != stimestructureget.Minutes / 15) {
 80027b0:	4b2e      	ldr	r3, [pc, #184]	@ (800286c <main+0x150>)
 80027b2:	785b      	ldrb	r3, [r3, #1]
 80027b4:	4a30      	ldr	r2, [pc, #192]	@ (8002878 <main+0x15c>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	08db      	lsrs	r3, r3, #3
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b2f      	ldr	r3, [pc, #188]	@ (800287c <main+0x160>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d046      	beq.n	8002854 <main+0x138>
				Seconds_o = stimestructureget.Minutes / 15;
 80027c6:	4b29      	ldr	r3, [pc, #164]	@ (800286c <main+0x150>)
 80027c8:	785b      	ldrb	r3, [r3, #1]
 80027ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002878 <main+0x15c>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	08db      	lsrs	r3, r3, #3
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b29      	ldr	r3, [pc, #164]	@ (800287c <main+0x160>)
 80027d6:	701a      	strb	r2, [r3, #0]

				if (led_blink_en)
 80027d8:	4b29      	ldr	r3, [pc, #164]	@ (8002880 <main+0x164>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <main+0xce>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 80027e0:	2201      	movs	r2, #1
 80027e2:	2110      	movs	r1, #16
 80027e4:	4827      	ldr	r0, [pc, #156]	@ (8002884 <main+0x168>)
 80027e6:	f002 fd21 	bl	800522c <HAL_GPIO_WritePin>

				text_lenth = snprintf((char*)text, sizeof(text),
						"20%02d.%02d.%02d %02d:%02d:%02d adc:%04d\r\n",
						sdatestructureget.Year, sdatestructureget.Month,
 80027ea:	4b22      	ldr	r3, [pc, #136]	@ (8002874 <main+0x158>)
 80027ec:	78db      	ldrb	r3, [r3, #3]
				text_lenth = snprintf((char*)text, sizeof(text),
 80027ee:	469c      	mov	ip, r3
						sdatestructureget.Year, sdatestructureget.Month,
 80027f0:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <main+0x158>)
 80027f2:	785b      	ldrb	r3, [r3, #1]
				text_lenth = snprintf((char*)text, sizeof(text),
 80027f4:	461a      	mov	r2, r3
						sdatestructureget.Date, stimestructureget.Hours,
 80027f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002874 <main+0x158>)
 80027f8:	789b      	ldrb	r3, [r3, #2]
				text_lenth = snprintf((char*)text, sizeof(text),
 80027fa:	4619      	mov	r1, r3
						sdatestructureget.Date, stimestructureget.Hours,
 80027fc:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <main+0x150>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
				text_lenth = snprintf((char*)text, sizeof(text),
 8002800:	461c      	mov	r4, r3
						stimestructureget.Minutes, stimestructureget.Seconds,
 8002802:	4b1a      	ldr	r3, [pc, #104]	@ (800286c <main+0x150>)
 8002804:	785b      	ldrb	r3, [r3, #1]
				text_lenth = snprintf((char*)text, sizeof(text),
 8002806:	461d      	mov	r5, r3
						stimestructureget.Minutes, stimestructureget.Seconds,
 8002808:	4b18      	ldr	r3, [pc, #96]	@ (800286c <main+0x150>)
 800280a:	789b      	ldrb	r3, [r3, #2]
				text_lenth = snprintf((char*)text, sizeof(text),
 800280c:	461e      	mov	r6, r3
 800280e:	4b16      	ldr	r3, [pc, #88]	@ (8002868 <main+0x14c>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	1d38      	adds	r0, r7, #4
 8002814:	9305      	str	r3, [sp, #20]
 8002816:	9604      	str	r6, [sp, #16]
 8002818:	9503      	str	r5, [sp, #12]
 800281a:	9402      	str	r4, [sp, #8]
 800281c:	9101      	str	r1, [sp, #4]
 800281e:	9200      	str	r2, [sp, #0]
 8002820:	4663      	mov	r3, ip
 8002822:	4a19      	ldr	r2, [pc, #100]	@ (8002888 <main+0x16c>)
 8002824:	2180      	movs	r1, #128	@ 0x80
 8002826:	f011 fe37 	bl	8014498 <sniprintf>
 800282a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
						adc_inp);

				CDC_Transmit_FS(text, text_lenth);
 800282e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002832:	b29a      	uxth	r2, r3
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f010 fded 	bl	8013418 <CDC_Transmit_FS>

				if (Notification_Status)
 800283e:	4b13      	ldr	r3, [pc, #76]	@ (800288c <main+0x170>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d098      	beq.n	8002778 <main+0x5c>
					P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, text);
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	4619      	mov	r1, r3
 800284a:	f64f 6042 	movw	r0, #65090	@ 0xfe42
 800284e:	f00d fd6d 	bl	801032c <P2PS_STM_App_Update_Char>
 8002852:	e791      	b.n	8002778 <main+0x5c>
			} else {
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8002854:	2200      	movs	r2, #0
 8002856:	2110      	movs	r1, #16
 8002858:	480a      	ldr	r0, [pc, #40]	@ (8002884 <main+0x168>)
 800285a:	f002 fce7 	bl	800522c <HAL_GPIO_WritePin>
    MX_APPE_Process();
 800285e:	e78b      	b.n	8002778 <main+0x5c>
 8002860:	58001400 	.word	0x58001400
 8002864:	200001ec 	.word	0x200001ec
 8002868:	20000390 	.word	0x20000390
 800286c:	20000398 	.word	0x20000398
 8002870:	200003b0 	.word	0x200003b0
 8002874:	20000394 	.word	0x20000394
 8002878:	88888889 	.word	0x88888889
 800287c:	200003ac 	.word	0x200003ac
 8002880:	200000ae 	.word	0x200000ae
 8002884:	48001000 	.word	0x48001000
 8002888:	0801590c 	.word	0x0801590c
 800288c:	2000165c 	.word	0x2000165c

08002890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b09a      	sub	sp, #104	@ 0x68
 8002894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002896:	f107 0320 	add.w	r3, r7, #32
 800289a:	2248      	movs	r2, #72	@ 0x48
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f011 ff08 	bl	80146b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	60da      	str	r2, [r3, #12]
 80028b0:	611a      	str	r2, [r3, #16]
 80028b2:	615a      	str	r2, [r3, #20]
 80028b4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80028b6:	f004 faaf 	bl	8006e18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80028ba:	2010      	movs	r0, #16
 80028bc:	f7ff ff00 	bl	80026c0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028c0:	4b29      	ldr	r3, [pc, #164]	@ (8002968 <SystemClock_Config+0xd8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028c8:	4a27      	ldr	r2, [pc, #156]	@ (8002968 <SystemClock_Config+0xd8>)
 80028ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b25      	ldr	r3, [pc, #148]	@ (8002968 <SystemClock_Config+0xd8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80028dc:	2347      	movs	r3, #71	@ 0x47
 80028de:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80028e6:	2301      	movs	r3, #1
 80028e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80028f0:	2301      	movs	r3, #1
 80028f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028f4:	2340      	movs	r3, #64	@ 0x40
 80028f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028f8:	2302      	movs	r3, #2
 80028fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028fc:	2303      	movs	r3, #3
 80028fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002900:	2310      	movs	r3, #16
 8002902:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002904:	2308      	movs	r3, #8
 8002906:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002908:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800290c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800290e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002912:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002914:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002918:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800291a:	f107 0320 	add.w	r3, r7, #32
 800291e:	4618      	mov	r0, r3
 8002920:	f004 fe1e 	bl	8007560 <HAL_RCC_OscConfig>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800292a:	f000 f83f 	bl	80029ac <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800292e:	236f      	movs	r3, #111	@ 0x6f
 8002930:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002932:	2303      	movs	r3, #3
 8002934:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002942:	2380      	movs	r3, #128	@ 0x80
 8002944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	2103      	movs	r1, #3
 800294e:	4618      	mov	r0, r3
 8002950:	f005 f97a 	bl	8007c48 <HAL_RCC_ClockConfig>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800295a:	f000 f827 	bl	80029ac <Error_Handler>
  }
}
 800295e:	bf00      	nop
 8002960:	3768      	adds	r7, #104	@ 0x68
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	58000400 	.word	0x58000400

0800296c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b094      	sub	sp, #80	@ 0x50
 8002970:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002972:	463b      	mov	r3, r7
 8002974:	2250      	movs	r2, #80	@ 0x50
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f011 fe9b 	bl	80146b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800297e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002982:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002984:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002988:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800298a:	2302      	movs	r3, #2
 800298c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800298e:	2310      	movs	r3, #16
 8002990:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002992:	463b      	mov	r3, r7
 8002994:	4618      	mov	r0, r3
 8002996:	f005 fd94 	bl	80084c2 <HAL_RCCEx_PeriphCLKConfig>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80029a0:	f000 f804 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80029a4:	bf00      	nop
 80029a6:	3750      	adds	r7, #80	@ 0x50
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029b0:	b672      	cpsid	i
}
 80029b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <Error_Handler+0x8>

080029b8 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_APB1_GRP1_EnableClock>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80029f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002a30:	2300      	movs	r3, #0
 8002a32:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a34:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae4 <MX_RTC_Init+0xc8>)
 8002a36:	4a2c      	ldr	r2, [pc, #176]	@ (8002ae8 <MX_RTC_Init+0xcc>)
 8002a38:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae4 <MX_RTC_Init+0xc8>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002a40:	4b28      	ldr	r3, [pc, #160]	@ (8002ae4 <MX_RTC_Init+0xc8>)
 8002a42:	227f      	movs	r2, #127	@ 0x7f
 8002a44:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002a46:	4b27      	ldr	r3, [pc, #156]	@ (8002ae4 <MX_RTC_Init+0xc8>)
 8002a48:	22ff      	movs	r2, #255	@ 0xff
 8002a4a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ae4 <MX_RTC_Init+0xc8>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a52:	4b24      	ldr	r3, [pc, #144]	@ (8002ae4 <MX_RTC_Init+0xc8>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a58:	4b22      	ldr	r3, [pc, #136]	@ (8002ae4 <MX_RTC_Init+0xc8>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a5e:	4b21      	ldr	r3, [pc, #132]	@ (8002ae4 <MX_RTC_Init+0xc8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a64:	481f      	ldr	r0, [pc, #124]	@ (8002ae4 <MX_RTC_Init+0xc8>)
 8002a66:	f005 ffb3 	bl	80089d0 <HAL_RTC_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002a70:	f7ff ff9c 	bl	80029ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4619      	mov	r1, r3
 8002a92:	4814      	ldr	r0, [pc, #80]	@ (8002ae4 <MX_RTC_Init+0xc8>)
 8002a94:	f006 f84c 	bl	8008b30 <HAL_RTC_SetTime>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8002a9e:	f7ff ff85 	bl	80029ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8002aa2:	2305      	movs	r3, #5
 8002aa4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8002aae:	2324      	movs	r3, #36	@ 0x24
 8002ab0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	480a      	ldr	r0, [pc, #40]	@ (8002ae4 <MX_RTC_Init+0xc8>)
 8002aba:	f006 f959 	bl	8008d70 <HAL_RTC_SetDate>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 8002ac4:	f7ff ff72 	bl	80029ac <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2100      	movs	r1, #0
 8002acc:	4805      	ldr	r0, [pc, #20]	@ (8002ae4 <MX_RTC_Init+0xc8>)
 8002ace:	f006 fad7 	bl	8009080 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 8002ad8:	f7ff ff68 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002adc:	bf00      	nop
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	200003b0 	.word	0x200003b0
 8002ae8:	40002800 	.word	0x40002800

08002aec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b096      	sub	sp, #88	@ 0x58
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002af4:	f107 0308 	add.w	r3, r7, #8
 8002af8:	2250      	movs	r2, #80	@ 0x50
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f011 fdd9 	bl	80146b4 <memset>
  if(rtcHandle->Instance==RTC)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a12      	ldr	r2, [pc, #72]	@ (8002b50 <HAL_RTC_MspInit+0x64>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d11d      	bne.n	8002b48 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b0c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b10:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002b12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b16:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b18:	f107 0308 	add.w	r3, r7, #8
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f005 fcd0 	bl	80084c2 <HAL_RCCEx_PeriphCLKConfig>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002b28:	f7ff ff40 	bl	80029ac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b2c:	f7ff ff4b 	bl	80029c6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002b30:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002b34:	f7ff ff58 	bl	80029e8 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 2, 0);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	2003      	movs	r0, #3
 8002b3e:	f001 fe74 	bl	800482a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002b42:	2003      	movs	r0, #3
 8002b44:	f001 fe8b 	bl	800485e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002b48:	bf00      	nop
 8002b4a:	3758      	adds	r7, #88	@ 0x58
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40002800 	.word	0x40002800

08002b54 <LL_AHB3_GRP1_EnableClock>:
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4013      	ands	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b78:	68fb      	ldr	r3, [r7, #12]
}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002b8a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002b8e:	f7ff ffe1 	bl	8002b54 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 2, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2102      	movs	r1, #2
 8002b96:	202e      	movs	r0, #46	@ 0x2e
 8002b98:	f001 fe47 	bl	800482a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002b9c:	202e      	movs	r0, #46	@ 0x2e
 8002b9e:	f001 fe5e 	bl	800485e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002baa:	bf00      	nop
 8002bac:	e7fd      	b.n	8002baa <NMI_Handler+0x4>

08002bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb2:	bf00      	nop
 8002bb4:	e7fd      	b.n	8002bb2 <HardFault_Handler+0x4>

08002bb6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bba:	bf00      	nop
 8002bbc:	e7fd      	b.n	8002bba <MemManage_Handler+0x4>

08002bbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bc2:	bf00      	nop
 8002bc4:	e7fd      	b.n	8002bc2 <BusFault_Handler+0x4>

08002bc6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bca:	bf00      	nop
 8002bcc:	e7fd      	b.n	8002bca <UsageFault_Handler+0x4>

08002bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bfc:	f000 fb04 	bl	8003208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002c08:	f7ff f970 	bl	8001eec <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c14:	4802      	ldr	r0, [pc, #8]	@ (8002c20 <DMA1_Channel1_IRQHandler+0x10>)
 8002c16:	f002 f848 	bl	8004caa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	2000046c 	.word	0x2000046c

08002c24 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002c28:	4802      	ldr	r0, [pc, #8]	@ (8002c34 <DMA1_Channel2_IRQHandler+0x10>)
 8002c2a:	f002 f83e 	bl	8004caa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	200004cc 	.word	0x200004cc

08002c38 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c3c:	4802      	ldr	r0, [pc, #8]	@ (8002c48 <DMA1_Channel3_IRQHandler+0x10>)
 8002c3e:	f002 f834 	bl	8004caa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000250 	.word	0x20000250

08002c4c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c50:	4802      	ldr	r0, [pc, #8]	@ (8002c5c <USB_LP_IRQHandler+0x10>)
 8002c52:	f002 fc9d 	bl	8005590 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20002b40 	.word	0x20002b40

08002c60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c64:	4802      	ldr	r0, [pc, #8]	@ (8002c70 <USART1_IRQHandler+0x10>)
 8002c66:	f006 fbb7 	bl	80093d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200003d8 	.word	0x200003d8

08002c74 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002c78:	f010 f9d2 	bl	8013020 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002c84:	f010 fa02 	bl	801308c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002c88:	bf00      	nop
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002c90:	f002 fae4 	bl	800525c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	e00a      	b.n	8002cc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002caa:	f3af 8000 	nop.w
 8002cae:	4601      	mov	r1, r0
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	60ba      	str	r2, [r7, #8]
 8002cb6:	b2ca      	uxtb	r2, r1
 8002cb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	dbf0      	blt.n	8002caa <_read+0x12>
  }

  return len;
 8002cc8:	687b      	ldr	r3, [r7, #4]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cfa:	605a      	str	r2, [r3, #4]
  return 0;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <_isatty>:

int _isatty(int file)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d12:	2301      	movs	r3, #1
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d44:	4a14      	ldr	r2, [pc, #80]	@ (8002d98 <_sbrk+0x5c>)
 8002d46:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <_sbrk+0x60>)
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d50:	4b13      	ldr	r3, [pc, #76]	@ (8002da0 <_sbrk+0x64>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d102      	bne.n	8002d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d58:	4b11      	ldr	r3, [pc, #68]	@ (8002da0 <_sbrk+0x64>)
 8002d5a:	4a12      	ldr	r2, [pc, #72]	@ (8002da4 <_sbrk+0x68>)
 8002d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d5e:	4b10      	ldr	r3, [pc, #64]	@ (8002da0 <_sbrk+0x64>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d207      	bcs.n	8002d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d6c:	f011 fd06 	bl	801477c <__errno>
 8002d70:	4603      	mov	r3, r0
 8002d72:	220c      	movs	r2, #12
 8002d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7a:	e009      	b.n	8002d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d7c:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <_sbrk+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d82:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <_sbrk+0x64>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	4a05      	ldr	r2, [pc, #20]	@ (8002da0 <_sbrk+0x64>)
 8002d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20030000 	.word	0x20030000
 8002d9c:	00000400 	.word	0x00000400
 8002da0:	200003d4 	.word	0x200003d4
 8002da4:	20003230 	.word	0x20003230

08002da8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002dac:	4b24      	ldr	r3, [pc, #144]	@ (8002e40 <SystemInit+0x98>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	4a23      	ldr	r2, [pc, #140]	@ (8002e40 <SystemInit+0x98>)
 8002db4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002dd4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002de0:	4b18      	ldr	r3, [pc, #96]	@ (8002e44 <SystemInit+0x9c>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002df2:	f023 0305 	bic.w	r3, r3, #5
 8002df6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e12:	4a0d      	ldr	r2, [pc, #52]	@ (8002e48 <SystemInit+0xa0>)
 8002e14:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e1a:	4a0b      	ldr	r2, [pc, #44]	@ (8002e48 <SystemInit+0xa0>)
 8002e1c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e32:	2200      	movs	r2, #0
 8002e34:	619a      	str	r2, [r3, #24]
}
 8002e36:	bf00      	nop
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	e000ed00 	.word	0xe000ed00
 8002e44:	faf6fefb 	.word	0xfaf6fefb
 8002e48:	22041000 	.word	0x22041000

08002e4c <LL_AHB2_GRP1_EnableClock>:
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e70:	68fb      	ldr	r3, [r7, #12]
}
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_APB2_GRP1_EnableClock>:
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e8a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e9a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002eb4:	4b23      	ldr	r3, [pc, #140]	@ (8002f44 <MX_USART1_UART_Init+0x94>)
 8002eb6:	4a24      	ldr	r2, [pc, #144]	@ (8002f48 <MX_USART1_UART_Init+0x98>)
 8002eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eba:	4b22      	ldr	r3, [pc, #136]	@ (8002f44 <MX_USART1_UART_Init+0x94>)
 8002ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ec2:	4b20      	ldr	r3, [pc, #128]	@ (8002f44 <MX_USART1_UART_Init+0x94>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f44 <MX_USART1_UART_Init+0x94>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ece:	4b1d      	ldr	r3, [pc, #116]	@ (8002f44 <MX_USART1_UART_Init+0x94>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f44 <MX_USART1_UART_Init+0x94>)
 8002ed6:	220c      	movs	r2, #12
 8002ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eda:	4b1a      	ldr	r3, [pc, #104]	@ (8002f44 <MX_USART1_UART_Init+0x94>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002ee0:	4b18      	ldr	r3, [pc, #96]	@ (8002f44 <MX_USART1_UART_Init+0x94>)
 8002ee2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002ee6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ee8:	4b16      	ldr	r3, [pc, #88]	@ (8002f44 <MX_USART1_UART_Init+0x94>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002eee:	4b15      	ldr	r3, [pc, #84]	@ (8002f44 <MX_USART1_UART_Init+0x94>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ef4:	4b13      	ldr	r3, [pc, #76]	@ (8002f44 <MX_USART1_UART_Init+0x94>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002efa:	4812      	ldr	r0, [pc, #72]	@ (8002f44 <MX_USART1_UART_Init+0x94>)
 8002efc:	f006 f99c 	bl	8009238 <HAL_UART_Init>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002f06:	f7ff fd51 	bl	80029ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	480d      	ldr	r0, [pc, #52]	@ (8002f44 <MX_USART1_UART_Init+0x94>)
 8002f0e:	f007 fb80 	bl	800a612 <HAL_UARTEx_SetTxFifoThreshold>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002f18:	f7ff fd48 	bl	80029ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4809      	ldr	r0, [pc, #36]	@ (8002f44 <MX_USART1_UART_Init+0x94>)
 8002f20:	f007 fbb5 	bl	800a68e <HAL_UARTEx_SetRxFifoThreshold>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002f2a:	f7ff fd3f 	bl	80029ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f2e:	4805      	ldr	r0, [pc, #20]	@ (8002f44 <MX_USART1_UART_Init+0x94>)
 8002f30:	f007 fb36 	bl	800a5a0 <HAL_UARTEx_DisableFifoMode>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002f3a:	f7ff fd37 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200003d8 	.word	0x200003d8
 8002f48:	40013800 	.word	0x40013800

08002f4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b09c      	sub	sp, #112	@ 0x70
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f64:	f107 030c 	add.w	r3, r7, #12
 8002f68:	2250      	movs	r2, #80	@ 0x50
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f011 fba1 	bl	80146b4 <memset>
  if(uartHandle->Instance==USART1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a45      	ldr	r2, [pc, #276]	@ (800308c <HAL_UART_MspInit+0x140>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	f040 8082 	bne.w	8003082 <HAL_UART_MspInit+0x136>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f82:	2300      	movs	r3, #0
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f86:	f107 030c 	add.w	r3, r7, #12
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f005 fa99 	bl	80084c2 <HAL_RCCEx_PeriphCLKConfig>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f96:	f7ff fd09 	bl	80029ac <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f9a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002f9e:	f7ff ff6e 	bl	8002e7e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	f7ff ff52 	bl	8002e4c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fa8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fba:	2307      	movs	r3, #7
 8002fbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fbe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fc8:	f001 ffc0 	bl	8004f4c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002fcc:	4b30      	ldr	r3, [pc, #192]	@ (8003090 <HAL_UART_MspInit+0x144>)
 8002fce:	4a31      	ldr	r2, [pc, #196]	@ (8003094 <HAL_UART_MspInit+0x148>)
 8002fd0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003090 <HAL_UART_MspInit+0x144>)
 8002fd4:	220e      	movs	r2, #14
 8002fd6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003090 <HAL_UART_MspInit+0x144>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fde:	4b2c      	ldr	r3, [pc, #176]	@ (8003090 <HAL_UART_MspInit+0x144>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8003090 <HAL_UART_MspInit+0x144>)
 8002fe6:	2280      	movs	r2, #128	@ 0x80
 8002fe8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fea:	4b29      	ldr	r3, [pc, #164]	@ (8003090 <HAL_UART_MspInit+0x144>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ff0:	4b27      	ldr	r3, [pc, #156]	@ (8003090 <HAL_UART_MspInit+0x144>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002ff6:	4b26      	ldr	r3, [pc, #152]	@ (8003090 <HAL_UART_MspInit+0x144>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ffc:	4b24      	ldr	r3, [pc, #144]	@ (8003090 <HAL_UART_MspInit+0x144>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003002:	4823      	ldr	r0, [pc, #140]	@ (8003090 <HAL_UART_MspInit+0x144>)
 8003004:	f001 fc70 	bl	80048e8 <HAL_DMA_Init>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800300e:	f7ff fccd 	bl	80029ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1e      	ldr	r2, [pc, #120]	@ (8003090 <HAL_UART_MspInit+0x144>)
 8003016:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800301a:	4a1d      	ldr	r2, [pc, #116]	@ (8003090 <HAL_UART_MspInit+0x144>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8003020:	4b1d      	ldr	r3, [pc, #116]	@ (8003098 <HAL_UART_MspInit+0x14c>)
 8003022:	4a1e      	ldr	r2, [pc, #120]	@ (800309c <HAL_UART_MspInit+0x150>)
 8003024:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003026:	4b1c      	ldr	r3, [pc, #112]	@ (8003098 <HAL_UART_MspInit+0x14c>)
 8003028:	220f      	movs	r2, #15
 800302a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800302c:	4b1a      	ldr	r3, [pc, #104]	@ (8003098 <HAL_UART_MspInit+0x14c>)
 800302e:	2210      	movs	r2, #16
 8003030:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003032:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <HAL_UART_MspInit+0x14c>)
 8003034:	2200      	movs	r2, #0
 8003036:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003038:	4b17      	ldr	r3, [pc, #92]	@ (8003098 <HAL_UART_MspInit+0x14c>)
 800303a:	2280      	movs	r2, #128	@ 0x80
 800303c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800303e:	4b16      	ldr	r3, [pc, #88]	@ (8003098 <HAL_UART_MspInit+0x14c>)
 8003040:	2200      	movs	r2, #0
 8003042:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003044:	4b14      	ldr	r3, [pc, #80]	@ (8003098 <HAL_UART_MspInit+0x14c>)
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800304a:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <HAL_UART_MspInit+0x14c>)
 800304c:	2200      	movs	r2, #0
 800304e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003050:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <HAL_UART_MspInit+0x14c>)
 8003052:	2200      	movs	r2, #0
 8003054:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003056:	4810      	ldr	r0, [pc, #64]	@ (8003098 <HAL_UART_MspInit+0x14c>)
 8003058:	f001 fc46 	bl	80048e8 <HAL_DMA_Init>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 8003062:	f7ff fca3 	bl	80029ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a0b      	ldr	r2, [pc, #44]	@ (8003098 <HAL_UART_MspInit+0x14c>)
 800306a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800306c:	4a0a      	ldr	r2, [pc, #40]	@ (8003098 <HAL_UART_MspInit+0x14c>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	2102      	movs	r1, #2
 8003076:	2024      	movs	r0, #36	@ 0x24
 8003078:	f001 fbd7 	bl	800482a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800307c:	2024      	movs	r0, #36	@ 0x24
 800307e:	f001 fbee 	bl	800485e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003082:	bf00      	nop
 8003084:	3770      	adds	r7, #112	@ 0x70
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40013800 	.word	0x40013800
 8003090:	2000046c 	.word	0x2000046c
 8003094:	40020008 	.word	0x40020008
 8003098:	200004cc 	.word	0x200004cc
 800309c:	4002001c 	.word	0x4002001c

080030a0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80030a0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030a2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030a4:	3304      	adds	r3, #4

080030a6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030a8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80030aa:	d3f9      	bcc.n	80030a0 <CopyDataInit>
  bx lr
 80030ac:	4770      	bx	lr

080030ae <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80030ae:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80030b0:	3004      	adds	r0, #4

080030b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80030b2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80030b4:	d3fb      	bcc.n	80030ae <FillZerobss>
  bx lr
 80030b6:	4770      	bx	lr

080030b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030b8:	480c      	ldr	r0, [pc, #48]	@ (80030ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80030bc:	f7ff fe74 	bl	8002da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80030c0:	480b      	ldr	r0, [pc, #44]	@ (80030f0 <LoopForever+0x6>)
 80030c2:	490c      	ldr	r1, [pc, #48]	@ (80030f4 <LoopForever+0xa>)
 80030c4:	4a0c      	ldr	r2, [pc, #48]	@ (80030f8 <LoopForever+0xe>)
 80030c6:	2300      	movs	r3, #0
 80030c8:	f7ff ffed 	bl	80030a6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80030cc:	480b      	ldr	r0, [pc, #44]	@ (80030fc <LoopForever+0x12>)
 80030ce:	490c      	ldr	r1, [pc, #48]	@ (8003100 <LoopForever+0x16>)
 80030d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003104 <LoopForever+0x1a>)
 80030d2:	2300      	movs	r3, #0
 80030d4:	f7ff ffe7 	bl	80030a6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80030d8:	480b      	ldr	r0, [pc, #44]	@ (8003108 <LoopForever+0x1e>)
 80030da:	490c      	ldr	r1, [pc, #48]	@ (800310c <LoopForever+0x22>)
 80030dc:	2300      	movs	r3, #0
 80030de:	f7ff ffe8 	bl	80030b2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80030e2:	f011 fb51 	bl	8014788 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80030e6:	f7ff fb19 	bl	800271c <main>

080030ea <LoopForever>:

LoopForever:
  b LoopForever
 80030ea:	e7fe      	b.n	80030ea <LoopForever>
  ldr   r0, =_estack
 80030ec:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80030f0:	20000008 	.word	0x20000008
 80030f4:	2000017c 	.word	0x2000017c
 80030f8:	080168c4 	.word	0x080168c4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80030fc:	200301e4 	.word	0x200301e4
 8003100:	20030a67 	.word	0x20030a67
 8003104:	08016a86 	.word	0x08016a86
  INIT_BSS _sbss, _ebss
 8003108:	200001d0 	.word	0x200001d0
 800310c:	20003230 	.word	0x20003230

08003110 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003110:	e7fe      	b.n	8003110 <ADC1_IRQHandler>
	...

08003114 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003118:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a04      	ldr	r2, [pc, #16]	@ (8003130 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6053      	str	r3, [r2, #4]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e0042000 	.word	0xe0042000

08003134 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003138:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4a04      	ldr	r2, [pc, #16]	@ (8003150 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800313e:	f043 0302 	orr.w	r3, r3, #2
 8003142:	6053      	str	r3, [r2, #4]
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e0042000 	.word	0xe0042000

08003154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800315e:	4b0c      	ldr	r3, [pc, #48]	@ (8003190 <HAL_Init+0x3c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a0b      	ldr	r2, [pc, #44]	@ (8003190 <HAL_Init+0x3c>)
 8003164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003168:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800316a:	2003      	movs	r0, #3
 800316c:	f001 fb52 	bl	8004814 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003170:	200f      	movs	r0, #15
 8003172:	f000 f80f 	bl	8003194 <HAL_InitTick>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	71fb      	strb	r3, [r7, #7]
 8003180:	e001      	b.n	8003186 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003182:	f7ff fd00 	bl	8002b86 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003186:	79fb      	ldrb	r3, [r7, #7]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	58004000 	.word	0x58004000

08003194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80031a0:	4b17      	ldr	r3, [pc, #92]	@ (8003200 <HAL_InitTick+0x6c>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d024      	beq.n	80031f2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80031a8:	f004 fefa 	bl	8007fa0 <HAL_RCC_GetHCLKFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <HAL_InitTick+0x6c>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	4619      	mov	r1, r3
 80031b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80031bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c0:	4618      	mov	r0, r3
 80031c2:	f001 fb68 	bl	8004896 <HAL_SYSTICK_Config>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10f      	bne.n	80031ec <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	d809      	bhi.n	80031e6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d2:	2200      	movs	r2, #0
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	f04f 30ff 	mov.w	r0, #4294967295
 80031da:	f001 fb26 	bl	800482a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031de:	4a09      	ldr	r2, [pc, #36]	@ (8003204 <HAL_InitTick+0x70>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	e007      	b.n	80031f6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
 80031ea:	e004      	b.n	80031f6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	e001      	b.n	80031f6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	20000010 	.word	0x20000010
 8003204:	2000000c 	.word	0x2000000c

08003208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800320c:	4b06      	ldr	r3, [pc, #24]	@ (8003228 <HAL_IncTick+0x20>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	4b06      	ldr	r3, [pc, #24]	@ (800322c <HAL_IncTick+0x24>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4413      	add	r3, r2
 8003218:	4a04      	ldr	r2, [pc, #16]	@ (800322c <HAL_IncTick+0x24>)
 800321a:	6013      	str	r3, [r2, #0]
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000010 	.word	0x20000010
 800322c:	2000052c 	.word	0x2000052c

08003230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return uwTick;
 8003234:	4b03      	ldr	r3, [pc, #12]	@ (8003244 <HAL_GetTick+0x14>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	2000052c 	.word	0x2000052c

08003248 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800324c:	4b03      	ldr	r3, [pc, #12]	@ (800325c <HAL_GetTickPrio+0x14>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	2000000c 	.word	0x2000000c

08003260 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003264:	f7ff ff56 	bl	8003114 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003268:	bf00      	nop
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003270:	f7ff ff60 	bl	8003134 <LL_DBGMCU_EnableDBGStopMode>
}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}

08003278 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	609a      	str	r2, [r3, #8]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3360      	adds	r3, #96	@ 0x60
 80032f2:	461a      	mov	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <LL_ADC_SetOffset+0x44>)
 8003302:	4013      	ands	r3, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	4313      	orrs	r3, r2
 8003310:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	03fff000 	.word	0x03fff000

08003328 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3360      	adds	r3, #96	@ 0x60
 8003336:	461a      	mov	r2, r3
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003348:	4618      	mov	r0, r3
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3360      	adds	r3, #96	@ 0x60
 8003364:	461a      	mov	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	431a      	orrs	r2, r3
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80033a2:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3330      	adds	r3, #48	@ 0x30
 80033c0:	461a      	mov	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	4413      	add	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	211f      	movs	r1, #31
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	401a      	ands	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	0e9b      	lsrs	r3, r3, #26
 80033e8:	f003 011f 	and.w	r1, r3, #31
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	431a      	orrs	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80033fc:	bf00      	nop
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3314      	adds	r3, #20
 8003418:	461a      	mov	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	0e5b      	lsrs	r3, r3, #25
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	4413      	add	r3, r2
 8003426:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	0d1b      	lsrs	r3, r3, #20
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	2107      	movs	r1, #7
 8003436:	fa01 f303 	lsl.w	r3, r1, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	401a      	ands	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	0d1b      	lsrs	r3, r3, #20
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	431a      	orrs	r2, r3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003478:	43db      	mvns	r3, r3
 800347a:	401a      	ands	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f003 0318 	and.w	r3, r3, #24
 8003482:	4908      	ldr	r1, [pc, #32]	@ (80034a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003484:	40d9      	lsrs	r1, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	400b      	ands	r3, r1
 800348a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348e:	431a      	orrs	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003496:	bf00      	nop
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	0007ffff 	.word	0x0007ffff

080034a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80034b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6093      	str	r3, [r2, #8]
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034e0:	d101      	bne.n	80034e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003504:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003508:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003530:	d101      	bne.n	8003536 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003554:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003558:	f043 0201 	orr.w	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800357c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003580:	f043 0202 	orr.w	r2, r3, #2
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <LL_ADC_IsEnabled+0x18>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <LL_ADC_IsEnabled+0x1a>
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d101      	bne.n	80035d2 <LL_ADC_IsDisableOngoing+0x18>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <LL_ADC_IsDisableOngoing+0x1a>
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035f4:	f043 0204 	orr.w	r2, r3, #4
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b04      	cmp	r3, #4
 800361a:	d101      	bne.n	8003620 <LL_ADC_REG_IsConversionOngoing+0x18>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b08      	cmp	r3, #8
 8003640:	d101      	bne.n	8003646 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8003660:	2300      	movs	r3, #0
 8003662:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003664:	2300      	movs	r3, #0
 8003666:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e12e      	b.n	80038d0 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367c:	2b00      	cmp	r3, #0
 800367e:	d109      	bne.n	8003694 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7fd facf 	bl	8000c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff17 	bl	80034cc <LL_ADC_IsDeepPowerDownEnabled>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d004      	beq.n	80036ae <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fefd 	bl	80034a8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff ff32 	bl	800351c <LL_ADC_IsInternalRegulatorEnabled>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d115      	bne.n	80036ea <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff ff16 	bl	80034f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036c8:	4b83      	ldr	r3, [pc, #524]	@ (80038d8 <HAL_ADC_Init+0x284>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	099b      	lsrs	r3, r3, #6
 80036ce:	4a83      	ldr	r2, [pc, #524]	@ (80038dc <HAL_ADC_Init+0x288>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	3301      	adds	r3, #1
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036dc:	e002      	b.n	80036e4 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f9      	bne.n	80036de <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff ff14 	bl	800351c <LL_ADC_IsInternalRegulatorEnabled>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10d      	bne.n	8003716 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fe:	f043 0210 	orr.w	r2, r3, #16
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370a:	f043 0201 	orr.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff ff74 	bl	8003608 <LL_ADC_REG_IsConversionOngoing>
 8003720:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b00      	cmp	r3, #0
 800372c:	f040 80c7 	bne.w	80038be <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 80c3 	bne.w	80038be <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003740:	f043 0202 	orr.w	r2, r3, #2
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ff21 	bl	8003594 <LL_ADC_IsEnabled>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003758:	4861      	ldr	r0, [pc, #388]	@ (80038e0 <HAL_ADC_Init+0x28c>)
 800375a:	f7ff ff1b 	bl	8003594 <LL_ADC_IsEnabled>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4619      	mov	r1, r3
 800376a:	485e      	ldr	r0, [pc, #376]	@ (80038e4 <HAL_ADC_Init+0x290>)
 800376c:	f7ff fd84 	bl	8003278 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	7e5b      	ldrb	r3, [r3, #25]
 8003774:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800377a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003780:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003786:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8003790:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d106      	bne.n	80037b0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	3b01      	subs	r3, #1
 80037a8:	045b      	lsls	r3, r3, #17
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d009      	beq.n	80037cc <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037bc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	4b45      	ldr	r3, [pc, #276]	@ (80038e8 <HAL_ADC_Init+0x294>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	69b9      	ldr	r1, [r7, #24]
 80037dc:	430b      	orrs	r3, r1
 80037de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff ff0f 	bl	8003608 <LL_ADC_REG_IsConversionOngoing>
 80037ea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff ff1c 	bl	800362e <LL_ADC_INJ_IsConversionOngoing>
 80037f6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d13d      	bne.n	800387a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d13a      	bne.n	800387a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003808:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003810:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003820:	f023 0302 	bic.w	r3, r3, #2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	69b9      	ldr	r1, [r7, #24]
 800382a:	430b      	orrs	r3, r1
 800382c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003834:	2b01      	cmp	r3, #1
 8003836:	d118      	bne.n	800386a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003842:	f023 0304 	bic.w	r3, r3, #4
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800384e:	4311      	orrs	r1, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003854:	4311      	orrs	r1, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800385a:	430a      	orrs	r2, r1
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	611a      	str	r2, [r3, #16]
 8003868:	e007      	b.n	800387a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d10c      	bne.n	800389c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003888:	f023 010f 	bic.w	r1, r3, #15
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	1e5a      	subs	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	631a      	str	r2, [r3, #48]	@ 0x30
 800389a:	e007      	b.n	80038ac <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 020f 	bic.w	r2, r2, #15
 80038aa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b0:	f023 0303 	bic.w	r3, r3, #3
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80038bc:	e007      	b.n	80038ce <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c2:	f043 0210 	orr.w	r2, r3, #16
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20000008 	.word	0x20000008
 80038dc:	053e2d63 	.word	0x053e2d63
 80038e0:	50040000 	.word	0x50040000
 80038e4:	50040300 	.word	0x50040300
 80038e8:	fff0c007 	.word	0xfff0c007

080038ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fe83 	bl	8003608 <LL_ADC_REG_IsConversionOngoing>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d167      	bne.n	80039d8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_ADC_Start_DMA+0x2a>
 8003912:	2302      	movs	r3, #2
 8003914:	e063      	b.n	80039de <HAL_ADC_Start_DMA+0xf2>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fc4c 	bl	80041bc <ADC_Enable>
 8003924:	4603      	mov	r3, r0
 8003926:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003928:	7dfb      	ldrb	r3, [r7, #23]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d14f      	bne.n	80039ce <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003932:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003946:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d006      	beq.n	800395c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003952:	f023 0206 	bic.w	r2, r3, #6
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	659a      	str	r2, [r3, #88]	@ 0x58
 800395a:	e002      	b.n	8003962 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003966:	4a20      	ldr	r2, [pc, #128]	@ (80039e8 <HAL_ADC_Start_DMA+0xfc>)
 8003968:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800396e:	4a1f      	ldr	r2, [pc, #124]	@ (80039ec <HAL_ADC_Start_DMA+0x100>)
 8003970:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003976:	4a1e      	ldr	r2, [pc, #120]	@ (80039f0 <HAL_ADC_Start_DMA+0x104>)
 8003978:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	221c      	movs	r2, #28
 8003980:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0210 	orr.w	r2, r2, #16
 8003998:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3340      	adds	r3, #64	@ 0x40
 80039b4:	4619      	mov	r1, r3
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f001 f83d 	bl	8004a38 <HAL_DMA_Start_IT>
 80039be:	4603      	mov	r3, r0
 80039c0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fe0a 	bl	80035e0 <LL_ADC_REG_StartConversion>
 80039cc:	e006      	b.n	80039dc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80039d6:	e001      	b.n	80039dc <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
 80039da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	0800436f 	.word	0x0800436f
 80039ec:	08004447 	.word	0x08004447
 80039f0:	08004463 	.word	0x08004463

080039f4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b0b6      	sub	sp, #216	@ 0xd8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x22>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e39f      	b.n	8004192 <HAL_ADC_ConfigChannel+0x762>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff fdd2 	bl	8003608 <LL_ADC_REG_IsConversionOngoing>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f040 8384 	bne.w	8004174 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f7ff fc99 	bl	80033b0 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff fdc0 	bl	8003608 <LL_ADC_REG_IsConversionOngoing>
 8003a88:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fdcc 	bl	800362e <LL_ADC_INJ_IsConversionOngoing>
 8003a96:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f040 81a6 	bne.w	8003df0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003aa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f040 81a1 	bne.w	8003df0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6819      	ldr	r1, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	461a      	mov	r2, r3
 8003abc:	f7ff fca4 	bl	8003408 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	08db      	lsrs	r3, r3, #3
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d00a      	beq.n	8003af8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6919      	ldr	r1, [r3, #16]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003af2:	f7ff fbf5 	bl	80032e0 <LL_ADC_SetOffset>
 8003af6:	e17b      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fc12 	bl	8003328 <LL_ADC_GetOffsetChannel>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0xf4>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fc07 	bl	8003328 <LL_ADC_GetOffsetChannel>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	0e9b      	lsrs	r3, r3, #26
 8003b1e:	f003 021f 	and.w	r2, r3, #31
 8003b22:	e01e      	b.n	8003b62 <HAL_ADC_ConfigChannel+0x132>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fbfc 	bl	8003328 <LL_ADC_GetOffsetChannel>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b3a:	fa93 f3a3 	rbit	r3, r3
 8003b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8003b42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 8003b4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8003b52:	2320      	movs	r3, #32
 8003b54:	e004      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003b56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b5a:	fab3 f383 	clz	r3, r3
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d105      	bne.n	8003b7a <HAL_ADC_ConfigChannel+0x14a>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	0e9b      	lsrs	r3, r3, #26
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	e018      	b.n	8003bac <HAL_ADC_ConfigChannel+0x17c>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003b86:	fa93 f3a3 	rbit	r3, r3
 8003b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003b96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	e004      	b.n	8003bac <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8003ba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ba6:	fab3 f383 	clz	r3, r3
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d106      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fbcb 	bl	8003354 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fbaf 	bl	8003328 <LL_ADC_GetOffsetChannel>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x1ba>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2101      	movs	r1, #1
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fba4 	bl	8003328 <LL_ADC_GetOffsetChannel>
 8003be0:	4603      	mov	r3, r0
 8003be2:	0e9b      	lsrs	r3, r3, #26
 8003be4:	f003 021f 	and.w	r2, r3, #31
 8003be8:	e01e      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x1f8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2101      	movs	r1, #1
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff fb99 	bl	8003328 <LL_ADC_GetOffsetChannel>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003c08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003c10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003c18:	2320      	movs	r3, #32
 8003c1a:	e004      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003c1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c20:	fab3 f383 	clz	r3, r3
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d105      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x210>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	0e9b      	lsrs	r3, r3, #26
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	e018      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x242>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c4c:	fa93 f3a3 	rbit	r3, r3
 8003c50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003c54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003c64:	2320      	movs	r3, #32
 8003c66:	e004      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c6c:	fab3 f383 	clz	r3, r3
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d106      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fb68 	bl	8003354 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2102      	movs	r1, #2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fb4c 	bl	8003328 <LL_ADC_GetOffsetChannel>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10a      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x280>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fb41 	bl	8003328 <LL_ADC_GetOffsetChannel>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	0e9b      	lsrs	r3, r3, #26
 8003caa:	f003 021f 	and.w	r2, r3, #31
 8003cae:	e01e      	b.n	8003cee <HAL_ADC_ConfigChannel+0x2be>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fb36 	bl	8003328 <LL_ADC_GetOffsetChannel>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cc6:	fa93 f3a3 	rbit	r3, r3
 8003cca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003cd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003cde:	2320      	movs	r3, #32
 8003ce0:	e004      	b.n	8003cec <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ce6:	fab3 f383 	clz	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x2d6>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	0e9b      	lsrs	r3, r3, #26
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	e016      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x304>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d12:	fa93 f3a3 	rbit	r3, r3
 8003d16:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003d18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003d1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003d26:	2320      	movs	r3, #32
 8003d28:	e004      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d2e:	fab3 f383 	clz	r3, r3
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d106      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2102      	movs	r1, #2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fb07 	bl	8003354 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2103      	movs	r1, #3
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff faeb 	bl	8003328 <LL_ADC_GetOffsetChannel>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10a      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x342>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2103      	movs	r1, #3
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff fae0 	bl	8003328 <LL_ADC_GetOffsetChannel>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	0e9b      	lsrs	r3, r3, #26
 8003d6c:	f003 021f 	and.w	r2, r3, #31
 8003d70:	e017      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x372>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2103      	movs	r1, #3
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fad5 	bl	8003328 <LL_ADC_GetOffsetChannel>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d84:	fa93 f3a3 	rbit	r3, r3
 8003d88:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003d8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d8c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003d8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003d94:	2320      	movs	r3, #32
 8003d96:	e003      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003d98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d9a:	fab3 f383 	clz	r3, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d105      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x38a>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	0e9b      	lsrs	r3, r3, #26
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	e011      	b.n	8003dde <HAL_ADC_ConfigChannel+0x3ae>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dc2:	fa93 f3a3 	rbit	r3, r3
 8003dc6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003dc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003dcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	e003      	b.n	8003dde <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dd8:	fab3 f383 	clz	r3, r3
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d106      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2200      	movs	r2, #0
 8003de8:	2103      	movs	r1, #3
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fab2 	bl	8003354 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fbcd 	bl	8003594 <LL_ADC_IsEnabled>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f040 81c2 	bne.w	8004186 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6819      	ldr	r1, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f7ff fb26 	bl	8003460 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4a8e      	ldr	r2, [pc, #568]	@ (8004054 <HAL_ADC_ConfigChannel+0x624>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	f040 8130 	bne.w	8004080 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10b      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x418>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	0e9b      	lsrs	r3, r3, #26
 8003e36:	3301      	adds	r3, #1
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	2b09      	cmp	r3, #9
 8003e3e:	bf94      	ite	ls
 8003e40:	2301      	movls	r3, #1
 8003e42:	2300      	movhi	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	e019      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x44c>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003e56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e58:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003e5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003e60:	2320      	movs	r3, #32
 8003e62:	e003      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003e64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	2b09      	cmp	r3, #9
 8003e74:	bf94      	ite	ls
 8003e76:	2301      	movls	r3, #1
 8003e78:	2300      	movhi	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d079      	beq.n	8003f74 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d107      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x46c>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	0e9b      	lsrs	r3, r3, #26
 8003e92:	3301      	adds	r3, #1
 8003e94:	069b      	lsls	r3, r3, #26
 8003e96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e9a:	e015      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x498>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ea4:	fa93 f3a3 	rbit	r3, r3
 8003ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003eaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003eb4:	2320      	movs	r3, #32
 8003eb6:	e003      	b.n	8003ec0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eba:	fab3 f383 	clz	r3, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	069b      	lsls	r3, r3, #26
 8003ec4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d109      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x4b8>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	0e9b      	lsrs	r3, r3, #26
 8003eda:	3301      	adds	r3, #1
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	e017      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x4e8>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ef0:	fa93 f3a3 	rbit	r3, r3
 8003ef4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003f00:	2320      	movs	r3, #32
 8003f02:	e003      	b.n	8003f0c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003f04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f06:	fab3 f383 	clz	r3, r3
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	f003 031f 	and.w	r3, r3, #31
 8003f12:	2101      	movs	r1, #1
 8003f14:	fa01 f303 	lsl.w	r3, r1, r3
 8003f18:	ea42 0103 	orr.w	r1, r2, r3
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x50e>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	0e9b      	lsrs	r3, r3, #26
 8003f2e:	3301      	adds	r3, #1
 8003f30:	f003 021f 	and.w	r2, r3, #31
 8003f34:	4613      	mov	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4413      	add	r3, r2
 8003f3a:	051b      	lsls	r3, r3, #20
 8003f3c:	e018      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x540>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003f56:	2320      	movs	r3, #32
 8003f58:	e003      	b.n	8003f62 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f5c:	fab3 f383 	clz	r3, r3
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	3301      	adds	r3, #1
 8003f64:	f003 021f 	and.w	r2, r3, #31
 8003f68:	4613      	mov	r3, r2
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	4413      	add	r3, r2
 8003f6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f70:	430b      	orrs	r3, r1
 8003f72:	e080      	b.n	8004076 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d107      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x560>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	0e9b      	lsrs	r3, r3, #26
 8003f86:	3301      	adds	r3, #1
 8003f88:	069b      	lsls	r3, r3, #26
 8003f8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f8e:	e015      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x58c>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f98:	fa93 f3a3 	rbit	r3, r3
 8003f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003fa8:	2320      	movs	r3, #32
 8003faa:	e003      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fae:	fab3 f383 	clz	r3, r3
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	069b      	lsls	r3, r3, #26
 8003fb8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x5ac>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	0e9b      	lsrs	r3, r3, #26
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fda:	e017      	b.n	800400c <HAL_ADC_ConfigChannel+0x5dc>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	fa93 f3a3 	rbit	r3, r3
 8003fe8:	61fb      	str	r3, [r7, #28]
  return result;
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	e003      	b.n	8004000 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	fab3 f383 	clz	r3, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	3301      	adds	r3, #1
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	2101      	movs	r1, #1
 8004008:	fa01 f303 	lsl.w	r3, r1, r3
 800400c:	ea42 0103 	orr.w	r1, r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10d      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x608>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	0e9b      	lsrs	r3, r3, #26
 8004022:	3301      	adds	r3, #1
 8004024:	f003 021f 	and.w	r2, r3, #31
 8004028:	4613      	mov	r3, r2
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	4413      	add	r3, r2
 800402e:	3b1e      	subs	r3, #30
 8004030:	051b      	lsls	r3, r3, #20
 8004032:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004036:	e01d      	b.n	8004074 <HAL_ADC_ConfigChannel+0x644>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	fa93 f3a3 	rbit	r3, r3
 8004044:	613b      	str	r3, [r7, #16]
  return result;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d103      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8004050:	2320      	movs	r3, #32
 8004052:	e005      	b.n	8004060 <HAL_ADC_ConfigChannel+0x630>
 8004054:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	3301      	adds	r3, #1
 8004062:	f003 021f 	and.w	r2, r3, #31
 8004066:	4613      	mov	r3, r2
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	4413      	add	r3, r2
 800406c:	3b1e      	subs	r3, #30
 800406e:	051b      	lsls	r3, r3, #20
 8004070:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004074:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800407a:	4619      	mov	r1, r3
 800407c:	f7ff f9c4 	bl	8003408 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b45      	ldr	r3, [pc, #276]	@ (800419c <HAL_ADC_ConfigChannel+0x76c>)
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d07c      	beq.n	8004186 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800408c:	4844      	ldr	r0, [pc, #272]	@ (80041a0 <HAL_ADC_ConfigChannel+0x770>)
 800408e:	f7ff f919 	bl	80032c4 <LL_ADC_GetCommonPathInternalCh>
 8004092:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004096:	4843      	ldr	r0, [pc, #268]	@ (80041a4 <HAL_ADC_ConfigChannel+0x774>)
 8004098:	f7ff fa7c 	bl	8003594 <LL_ADC_IsEnabled>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d15e      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a40      	ldr	r2, [pc, #256]	@ (80041a8 <HAL_ADC_ConfigChannel+0x778>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d127      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x6cc>
 80040ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d121      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a39      	ldr	r2, [pc, #228]	@ (80041a4 <HAL_ADC_ConfigChannel+0x774>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d161      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80040c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040ca:	4619      	mov	r1, r3
 80040cc:	4834      	ldr	r0, [pc, #208]	@ (80041a0 <HAL_ADC_ConfigChannel+0x770>)
 80040ce:	f7ff f8e6 	bl	800329e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040d2:	4b36      	ldr	r3, [pc, #216]	@ (80041ac <HAL_ADC_ConfigChannel+0x77c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	099b      	lsrs	r3, r3, #6
 80040d8:	4a35      	ldr	r2, [pc, #212]	@ (80041b0 <HAL_ADC_ConfigChannel+0x780>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	099b      	lsrs	r3, r3, #6
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80040ec:	e002      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f9      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040fa:	e044      	b.n	8004186 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2c      	ldr	r2, [pc, #176]	@ (80041b4 <HAL_ADC_ConfigChannel+0x784>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d113      	bne.n	800412e <HAL_ADC_ConfigChannel+0x6fe>
 8004106:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800410a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10d      	bne.n	800412e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a23      	ldr	r2, [pc, #140]	@ (80041a4 <HAL_ADC_ConfigChannel+0x774>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d134      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800411c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004120:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004124:	4619      	mov	r1, r3
 8004126:	481e      	ldr	r0, [pc, #120]	@ (80041a0 <HAL_ADC_ConfigChannel+0x770>)
 8004128:	f7ff f8b9 	bl	800329e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800412c:	e02b      	b.n	8004186 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a21      	ldr	r2, [pc, #132]	@ (80041b8 <HAL_ADC_ConfigChannel+0x788>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d126      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x756>
 8004138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800413c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d120      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a16      	ldr	r2, [pc, #88]	@ (80041a4 <HAL_ADC_ConfigChannel+0x774>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d11b      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800414e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004152:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004156:	4619      	mov	r1, r3
 8004158:	4811      	ldr	r0, [pc, #68]	@ (80041a0 <HAL_ADC_ConfigChannel+0x770>)
 800415a:	f7ff f8a0 	bl	800329e <LL_ADC_SetCommonPathInternalCh>
 800415e:	e012      	b.n	8004186 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004164:	f043 0220 	orr.w	r2, r3, #32
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004172:	e008      	b.n	8004186 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800418e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004192:	4618      	mov	r0, r3
 8004194:	37d8      	adds	r7, #216	@ 0xd8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	80080000 	.word	0x80080000
 80041a0:	50040300 	.word	0x50040300
 80041a4:	50040000 	.word	0x50040000
 80041a8:	c7520000 	.word	0xc7520000
 80041ac:	20000008 	.word	0x20000008
 80041b0:	053e2d63 	.word	0x053e2d63
 80041b4:	cb840000 	.word	0xcb840000
 80041b8:	80000001 	.word	0x80000001

080041bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff f9e1 	bl	8003594 <LL_ADC_IsEnabled>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d15e      	bne.n	8004296 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	4b30      	ldr	r3, [pc, #192]	@ (80042a0 <ADC_Enable+0xe4>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00d      	beq.n	8004202 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ea:	f043 0210 	orr.w	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f6:	f043 0201 	orr.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e04a      	b.n	8004298 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff f99c 	bl	8003544 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800420c:	4825      	ldr	r0, [pc, #148]	@ (80042a4 <ADC_Enable+0xe8>)
 800420e:	f7ff f859 	bl	80032c4 <LL_ADC_GetCommonPathInternalCh>
 8004212:	4603      	mov	r3, r0
 8004214:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00f      	beq.n	800423c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800421c:	4b22      	ldr	r3, [pc, #136]	@ (80042a8 <ADC_Enable+0xec>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	099b      	lsrs	r3, r3, #6
 8004222:	4a22      	ldr	r2, [pc, #136]	@ (80042ac <ADC_Enable+0xf0>)
 8004224:	fba2 2303 	umull	r2, r3, r2, r3
 8004228:	099b      	lsrs	r3, r3, #6
 800422a:	3301      	adds	r3, #1
 800422c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800422e:	e002      	b.n	8004236 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	3b01      	subs	r3, #1
 8004234:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f9      	bne.n	8004230 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800423c:	f7fe fff8 	bl	8003230 <HAL_GetTick>
 8004240:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004242:	e021      	b.n	8004288 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff f9a3 	bl	8003594 <LL_ADC_IsEnabled>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d104      	bne.n	800425e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff f973 	bl	8003544 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800425e:	f7fe ffe7 	bl	8003230 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d90d      	bls.n	8004288 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004270:	f043 0210 	orr.w	r2, r3, #16
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427c:	f043 0201 	orr.w	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e007      	b.n	8004298 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b01      	cmp	r3, #1
 8004294:	d1d6      	bne.n	8004244 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	8000003f 	.word	0x8000003f
 80042a4:	50040300 	.word	0x50040300
 80042a8:	20000008 	.word	0x20000008
 80042ac:	053e2d63 	.word	0x053e2d63

080042b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff f97c 	bl	80035ba <LL_ADC_IsDisableOngoing>
 80042c2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff f963 	bl	8003594 <LL_ADC_IsEnabled>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d047      	beq.n	8004364 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d144      	bne.n	8004364 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 030d 	and.w	r3, r3, #13
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d10c      	bne.n	8004302 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff f93d 	bl	800356c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2203      	movs	r2, #3
 80042f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80042fa:	f7fe ff99 	bl	8003230 <HAL_GetTick>
 80042fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004300:	e029      	b.n	8004356 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004306:	f043 0210 	orr.w	r2, r3, #16
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004312:	f043 0201 	orr.w	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e023      	b.n	8004366 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800431e:	f7fe ff87 	bl	8003230 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d914      	bls.n	8004356 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800433e:	f043 0210 	orr.w	r2, r3, #16
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e007      	b.n	8004366 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1dc      	bne.n	800431e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004380:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004384:	2b00      	cmp	r3, #0
 8004386:	d14b      	bne.n	8004420 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d021      	beq.n	80043e6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fe ffef 	bl	800338a <LL_ADC_REG_IsTriggerSourceSWStart>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d032      	beq.n	8004418 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d12b      	bne.n	8004418 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d11f      	bne.n	8004418 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043dc:	f043 0201 	orr.w	r2, r3, #1
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80043e4:	e018      	b.n	8004418 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d111      	bne.n	8004418 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004404:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d105      	bne.n	8004418 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004410:	f043 0201 	orr.w	r2, r3, #1
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f7ff faeb 	bl	80039f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800441e:	e00e      	b.n	800443e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f7ff faf5 	bl	8003a1c <HAL_ADC_ErrorCallback>
}
 8004432:	e004      	b.n	800443e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004452:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff fad7 	bl	8003a08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004474:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004480:	f043 0204 	orr.w	r2, r3, #4
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f7ff fac7 	bl	8003a1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800448e:	bf00      	nop
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <LL_ADC_StartCalibration>:
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80044a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	609a      	str	r2, [r3, #8]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_ADC_IsCalibrationOnGoing>:
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044dc:	d101      	bne.n	80044e2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_ADCEx_Calibration_Start+0x1c>
 8004508:	2302      	movs	r3, #2
 800450a:	e04d      	b.n	80045a8 <HAL_ADCEx_Calibration_Start+0xb8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff fecb 	bl	80042b0 <ADC_Disable>
 800451a:	4603      	mov	r3, r0
 800451c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d136      	bne.n	8004592 <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004528:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800452c:	f023 0302 	bic.w	r3, r3, #2
 8004530:	f043 0202 	orr.w	r2, r3, #2
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	655a      	str	r2, [r3, #84]	@ 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6839      	ldr	r1, [r7, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff ffa9 	bl	8004496 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004544:	e014      	b.n	8004570 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	3301      	adds	r3, #1
 800454a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4a18      	ldr	r2, [pc, #96]	@ (80045b0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d90d      	bls.n	8004570 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004558:	f023 0312 	bic.w	r3, r3, #18
 800455c:	f043 0210 	orr.w	r2, r3, #16
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e01b      	b.n	80045a8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff ffa7 	bl	80044c8 <LL_ADC_IsCalibrationOnGoing>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e2      	bne.n	8004546 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004584:	f023 0303 	bic.w	r3, r3, #3
 8004588:	f043 0201 	orr.w	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004590:	e005      	b.n	800459e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004596:	f043 0210 	orr.w	r2, r3, #16
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	00026aaa 	.word	0x00026aaa

080045b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045c4:	4b0c      	ldr	r3, [pc, #48]	@ (80045f8 <__NVIC_SetPriorityGrouping+0x44>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045d0:	4013      	ands	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045e6:	4a04      	ldr	r2, [pc, #16]	@ (80045f8 <__NVIC_SetPriorityGrouping+0x44>)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	60d3      	str	r3, [r2, #12]
}
 80045ec:	bf00      	nop
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000ed00 	.word	0xe000ed00

080045fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004600:	4b04      	ldr	r3, [pc, #16]	@ (8004614 <__NVIC_GetPriorityGrouping+0x18>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	0a1b      	lsrs	r3, r3, #8
 8004606:	f003 0307 	and.w	r3, r3, #7
}
 800460a:	4618      	mov	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	e000ed00 	.word	0xe000ed00

08004618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004626:	2b00      	cmp	r3, #0
 8004628:	db0b      	blt.n	8004642 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	f003 021f 	and.w	r2, r3, #31
 8004630:	4907      	ldr	r1, [pc, #28]	@ (8004650 <__NVIC_EnableIRQ+0x38>)
 8004632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	2001      	movs	r0, #1
 800463a:	fa00 f202 	lsl.w	r2, r0, r2
 800463e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	e000e100 	.word	0xe000e100

08004654 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800465e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004662:	2b00      	cmp	r3, #0
 8004664:	db12      	blt.n	800468c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	f003 021f 	and.w	r2, r3, #31
 800466c:	490a      	ldr	r1, [pc, #40]	@ (8004698 <__NVIC_DisableIRQ+0x44>)
 800466e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	2001      	movs	r0, #1
 8004676:	fa00 f202 	lsl.w	r2, r0, r2
 800467a:	3320      	adds	r3, #32
 800467c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004680:	f3bf 8f4f 	dsb	sy
}
 8004684:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004686:	f3bf 8f6f 	isb	sy
}
 800468a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	e000e100 	.word	0xe000e100

0800469c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	db0c      	blt.n	80046c8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	f003 021f 	and.w	r2, r3, #31
 80046b4:	4907      	ldr	r1, [pc, #28]	@ (80046d4 <__NVIC_SetPendingIRQ+0x38>)
 80046b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	2001      	movs	r0, #1
 80046be:	fa00 f202 	lsl.w	r2, r0, r2
 80046c2:	3340      	adds	r3, #64	@ 0x40
 80046c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	e000e100 	.word	0xe000e100

080046d8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	db0c      	blt.n	8004704 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	f003 021f 	and.w	r2, r3, #31
 80046f0:	4907      	ldr	r1, [pc, #28]	@ (8004710 <__NVIC_ClearPendingIRQ+0x38>)
 80046f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	2001      	movs	r0, #1
 80046fa:	fa00 f202 	lsl.w	r2, r0, r2
 80046fe:	3360      	adds	r3, #96	@ 0x60
 8004700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	e000e100 	.word	0xe000e100

08004714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	6039      	str	r1, [r7, #0]
 800471e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004724:	2b00      	cmp	r3, #0
 8004726:	db0a      	blt.n	800473e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	b2da      	uxtb	r2, r3
 800472c:	490c      	ldr	r1, [pc, #48]	@ (8004760 <__NVIC_SetPriority+0x4c>)
 800472e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004732:	0112      	lsls	r2, r2, #4
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	440b      	add	r3, r1
 8004738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800473c:	e00a      	b.n	8004754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	b2da      	uxtb	r2, r3
 8004742:	4908      	ldr	r1, [pc, #32]	@ (8004764 <__NVIC_SetPriority+0x50>)
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	3b04      	subs	r3, #4
 800474c:	0112      	lsls	r2, r2, #4
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	440b      	add	r3, r1
 8004752:	761a      	strb	r2, [r3, #24]
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	e000e100 	.word	0xe000e100
 8004764:	e000ed00 	.word	0xe000ed00

08004768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004768:	b480      	push	{r7}
 800476a:	b089      	sub	sp, #36	@ 0x24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f1c3 0307 	rsb	r3, r3, #7
 8004782:	2b04      	cmp	r3, #4
 8004784:	bf28      	it	cs
 8004786:	2304      	movcs	r3, #4
 8004788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	3304      	adds	r3, #4
 800478e:	2b06      	cmp	r3, #6
 8004790:	d902      	bls.n	8004798 <NVIC_EncodePriority+0x30>
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	3b03      	subs	r3, #3
 8004796:	e000      	b.n	800479a <NVIC_EncodePriority+0x32>
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800479c:	f04f 32ff 	mov.w	r2, #4294967295
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43da      	mvns	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	401a      	ands	r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047b0:	f04f 31ff 	mov.w	r1, #4294967295
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ba:	43d9      	mvns	r1, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047c0:	4313      	orrs	r3, r2
         );
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3724      	adds	r7, #36	@ 0x24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
	...

080047d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3b01      	subs	r3, #1
 80047dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047e0:	d301      	bcc.n	80047e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047e2:	2301      	movs	r3, #1
 80047e4:	e00f      	b.n	8004806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004810 <SysTick_Config+0x40>)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047ee:	210f      	movs	r1, #15
 80047f0:	f04f 30ff 	mov.w	r0, #4294967295
 80047f4:	f7ff ff8e 	bl	8004714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047f8:	4b05      	ldr	r3, [pc, #20]	@ (8004810 <SysTick_Config+0x40>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047fe:	4b04      	ldr	r3, [pc, #16]	@ (8004810 <SysTick_Config+0x40>)
 8004800:	2207      	movs	r2, #7
 8004802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	e000e010 	.word	0xe000e010

08004814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff fec9 	bl	80045b4 <__NVIC_SetPriorityGrouping>
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b086      	sub	sp, #24
 800482e:	af00      	add	r7, sp, #0
 8004830:	4603      	mov	r3, r0
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004838:	f7ff fee0 	bl	80045fc <__NVIC_GetPriorityGrouping>
 800483c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	68b9      	ldr	r1, [r7, #8]
 8004842:	6978      	ldr	r0, [r7, #20]
 8004844:	f7ff ff90 	bl	8004768 <NVIC_EncodePriority>
 8004848:	4602      	mov	r2, r0
 800484a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800484e:	4611      	mov	r1, r2
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff ff5f 	bl	8004714 <__NVIC_SetPriority>
}
 8004856:	bf00      	nop
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	4603      	mov	r3, r0
 8004866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff fed3 	bl	8004618 <__NVIC_EnableIRQ>
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
 8004880:	4603      	mov	r3, r0
 8004882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fee3 	bl	8004654 <__NVIC_DisableIRQ>
}
 800488e:	bf00      	nop
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff ff96 	bl	80047d0 <SysTick_Config>
 80048a4:	4603      	mov	r3, r0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	4603      	mov	r3, r0
 80048b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80048b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff feed 	bl	800469c <__NVIC_SetPendingIRQ>
}
 80048c2:	bf00      	nop
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	4603      	mov	r3, r0
 80048d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80048d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff fefd 	bl	80046d8 <__NVIC_ClearPendingIRQ>
}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e08e      	b.n	8004a18 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	4b47      	ldr	r3, [pc, #284]	@ (8004a20 <HAL_DMA_Init+0x138>)
 8004902:	429a      	cmp	r2, r3
 8004904:	d80f      	bhi.n	8004926 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	4b45      	ldr	r3, [pc, #276]	@ (8004a24 <HAL_DMA_Init+0x13c>)
 800490e:	4413      	add	r3, r2
 8004910:	4a45      	ldr	r2, [pc, #276]	@ (8004a28 <HAL_DMA_Init+0x140>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	091b      	lsrs	r3, r3, #4
 8004918:	009a      	lsls	r2, r3, #2
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a42      	ldr	r2, [pc, #264]	@ (8004a2c <HAL_DMA_Init+0x144>)
 8004922:	641a      	str	r2, [r3, #64]	@ 0x40
 8004924:	e00e      	b.n	8004944 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	4b40      	ldr	r3, [pc, #256]	@ (8004a30 <HAL_DMA_Init+0x148>)
 800492e:	4413      	add	r3, r2
 8004930:	4a3d      	ldr	r2, [pc, #244]	@ (8004a28 <HAL_DMA_Init+0x140>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	009a      	lsls	r2, r3, #2
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a3c      	ldr	r2, [pc, #240]	@ (8004a34 <HAL_DMA_Init+0x14c>)
 8004942:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800495a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004968:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004974:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004980:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa74 	bl	8004e84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049a4:	d102      	bne.n	80049ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049b4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80049b8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049c2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d010      	beq.n	80049ee <HAL_DMA_Init+0x106>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d80c      	bhi.n	80049ee <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fa93 	bl	8004f00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049ea:	605a      	str	r2, [r3, #4]
 80049ec:	e008      	b.n	8004a00 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40020407 	.word	0x40020407
 8004a24:	bffdfff8 	.word	0xbffdfff8
 8004a28:	cccccccd 	.word	0xcccccccd
 8004a2c:	40020000 	.word	0x40020000
 8004a30:	bffdfbf8 	.word	0xbffdfbf8
 8004a34:	40020400 	.word	0x40020400

08004a38 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_DMA_Start_IT+0x20>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e066      	b.n	8004b26 <HAL_DMA_Start_IT+0xee>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d155      	bne.n	8004b18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0201 	bic.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f9b9 	bl	8004e08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d008      	beq.n	8004ab0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f042 020e 	orr.w	r2, r2, #14
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	e00f      	b.n	8004ad0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0204 	bic.w	r2, r2, #4
 8004abe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 020a 	orr.w	r2, r2, #10
 8004ace:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ae8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d007      	beq.n	8004b06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0201 	orr.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e005      	b.n	8004b24 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004b20:	2302      	movs	r3, #2
 8004b22:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e04f      	b.n	8004be0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d008      	beq.n	8004b5e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2204      	movs	r2, #4
 8004b50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e040      	b.n	8004be0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 020e 	bic.w	r2, r2, #14
 8004b6c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0201 	bic.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b92:	f003 021c 	and.w	r2, r3, #28
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004baa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00c      	beq.n	8004bce <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bc2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004bcc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d005      	beq.n	8004c10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2204      	movs	r2, #4
 8004c08:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
 8004c0e:	e047      	b.n	8004ca0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 020e 	bic.w	r2, r2, #14
 8004c1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c44:	f003 021c 	and.w	r2, r3, #28
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c52:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c5c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00c      	beq.n	8004c80 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c74:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c7e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4798      	blx	r3
    }
  }
  return status;
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc6:	f003 031c 	and.w	r3, r3, #28
 8004cca:	2204      	movs	r2, #4
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d026      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x7a>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d021      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d107      	bne.n	8004cfe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0204 	bic.w	r2, r2, #4
 8004cfc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d02:	f003 021c 	and.w	r2, r3, #28
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	2104      	movs	r1, #4
 8004d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d10:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d071      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004d22:	e06c      	b.n	8004dfe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d28:	f003 031c 	and.w	r3, r3, #28
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	409a      	lsls	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4013      	ands	r3, r2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d02e      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xec>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d029      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10b      	bne.n	8004d68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 020a 	bic.w	r2, r2, #10
 8004d5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6c:	f003 021c 	and.w	r2, r3, #28
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d74:	2102      	movs	r1, #2
 8004d76:	fa01 f202 	lsl.w	r2, r1, r2
 8004d7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d038      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004d94:	e033      	b.n	8004dfe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9a:	f003 031c 	and.w	r3, r3, #28
 8004d9e:	2208      	movs	r2, #8
 8004da0:	409a      	lsls	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4013      	ands	r3, r2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d02a      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x156>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d025      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 020e 	bic.w	r2, r2, #14
 8004dc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc8:	f003 021c 	and.w	r2, r3, #28
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d004      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004dfe:	bf00      	nop
 8004e00:	bf00      	nop
}
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d004      	beq.n	8004e32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e30:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e36:	f003 021c 	and.w	r2, r3, #28
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	2101      	movs	r1, #1
 8004e40:	fa01 f202 	lsl.w	r2, r1, r2
 8004e44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b10      	cmp	r3, #16
 8004e54:	d108      	bne.n	8004e68 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004e66:	e007      	b.n	8004e78 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	60da      	str	r2, [r3, #12]
}
 8004e78:	bf00      	nop
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	4b17      	ldr	r3, [pc, #92]	@ (8004ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d80a      	bhi.n	8004eae <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9c:	089b      	lsrs	r3, r3, #2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ea4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6493      	str	r3, [r2, #72]	@ 0x48
 8004eac:	e007      	b.n	8004ebe <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb2:	089b      	lsrs	r3, r3, #2
 8004eb4:	009a      	lsls	r2, r3, #2
 8004eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004eb8:	4413      	add	r3, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	3b08      	subs	r3, #8
 8004ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8004efc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004ed4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f003 031f 	and.w	r3, r3, #31
 8004edc:	2201      	movs	r2, #1
 8004ede:	409a      	lsls	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	40020407 	.word	0x40020407
 8004ef4:	4002081c 	.word	0x4002081c
 8004ef8:	cccccccd 	.word	0xcccccccd
 8004efc:	40020880 	.word	0x40020880

08004f00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f10:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4b0b      	ldr	r3, [pc, #44]	@ (8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a09      	ldr	r2, [pc, #36]	@ (8004f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004f24:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	2201      	movs	r2, #1
 8004f30:	409a      	lsls	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	1000823f 	.word	0x1000823f
 8004f48:	40020940 	.word	0x40020940

08004f4c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f56:	2300      	movs	r3, #0
 8004f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f5a:	e14c      	b.n	80051f6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	2101      	movs	r1, #1
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	fa01 f303 	lsl.w	r3, r1, r3
 8004f68:	4013      	ands	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 813e 	beq.w	80051f0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d005      	beq.n	8004f8c <HAL_GPIO_Init+0x40>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d130      	bne.n	8004fee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	2203      	movs	r2, #3
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	091b      	lsrs	r3, r3, #4
 8004fd8:	f003 0201 	and.w	r2, r3, #1
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d017      	beq.n	800502a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	2203      	movs	r2, #3
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	43db      	mvns	r3, r3
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4013      	ands	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d123      	bne.n	800507e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	08da      	lsrs	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3208      	adds	r2, #8
 800503e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005042:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	220f      	movs	r2, #15
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	43db      	mvns	r3, r3
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4013      	ands	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	08da      	lsrs	r2, r3, #3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3208      	adds	r2, #8
 8005078:	6939      	ldr	r1, [r7, #16]
 800507a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	2203      	movs	r2, #3
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	43db      	mvns	r3, r3
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4013      	ands	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f003 0203 	and.w	r2, r3, #3
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 8098 	beq.w	80051f0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80050c0:	4a54      	ldr	r2, [pc, #336]	@ (8005214 <HAL_GPIO_Init+0x2c8>)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	089b      	lsrs	r3, r3, #2
 80050c6:	3302      	adds	r3, #2
 80050c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f003 0303 	and.w	r3, r3, #3
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	220f      	movs	r2, #15
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4013      	ands	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80050ea:	d019      	beq.n	8005120 <HAL_GPIO_Init+0x1d4>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a4a      	ldr	r2, [pc, #296]	@ (8005218 <HAL_GPIO_Init+0x2cc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d013      	beq.n	800511c <HAL_GPIO_Init+0x1d0>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a49      	ldr	r2, [pc, #292]	@ (800521c <HAL_GPIO_Init+0x2d0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00d      	beq.n	8005118 <HAL_GPIO_Init+0x1cc>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a48      	ldr	r2, [pc, #288]	@ (8005220 <HAL_GPIO_Init+0x2d4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d007      	beq.n	8005114 <HAL_GPIO_Init+0x1c8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a47      	ldr	r2, [pc, #284]	@ (8005224 <HAL_GPIO_Init+0x2d8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d101      	bne.n	8005110 <HAL_GPIO_Init+0x1c4>
 800510c:	2304      	movs	r3, #4
 800510e:	e008      	b.n	8005122 <HAL_GPIO_Init+0x1d6>
 8005110:	2307      	movs	r3, #7
 8005112:	e006      	b.n	8005122 <HAL_GPIO_Init+0x1d6>
 8005114:	2303      	movs	r3, #3
 8005116:	e004      	b.n	8005122 <HAL_GPIO_Init+0x1d6>
 8005118:	2302      	movs	r3, #2
 800511a:	e002      	b.n	8005122 <HAL_GPIO_Init+0x1d6>
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <HAL_GPIO_Init+0x1d6>
 8005120:	2300      	movs	r3, #0
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	f002 0203 	and.w	r2, r2, #3
 8005128:	0092      	lsls	r2, r2, #2
 800512a:	4093      	lsls	r3, r2
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005132:	4938      	ldr	r1, [pc, #224]	@ (8005214 <HAL_GPIO_Init+0x2c8>)
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	089b      	lsrs	r3, r3, #2
 8005138:	3302      	adds	r3, #2
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005140:	4b39      	ldr	r3, [pc, #228]	@ (8005228 <HAL_GPIO_Init+0x2dc>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	43db      	mvns	r3, r3
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4013      	ands	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005164:	4a30      	ldr	r2, [pc, #192]	@ (8005228 <HAL_GPIO_Init+0x2dc>)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800516a:	4b2f      	ldr	r3, [pc, #188]	@ (8005228 <HAL_GPIO_Init+0x2dc>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	43db      	mvns	r3, r3
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4013      	ands	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800518e:	4a26      	ldr	r2, [pc, #152]	@ (8005228 <HAL_GPIO_Init+0x2dc>)
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005194:	4b24      	ldr	r3, [pc, #144]	@ (8005228 <HAL_GPIO_Init+0x2dc>)
 8005196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800519a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	43db      	mvns	r3, r3
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4013      	ands	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80051ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005228 <HAL_GPIO_Init+0x2dc>)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80051c2:	4b19      	ldr	r3, [pc, #100]	@ (8005228 <HAL_GPIO_Init+0x2dc>)
 80051c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	43db      	mvns	r3, r3
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4013      	ands	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80051e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005228 <HAL_GPIO_Init+0x2dc>)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3301      	adds	r3, #1
 80051f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	f47f aeab 	bne.w	8004f5c <HAL_GPIO_Init+0x10>
  }
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	40010000 	.word	0x40010000
 8005218:	48000400 	.word	0x48000400
 800521c:	48000800 	.word	0x48000800
 8005220:	48000c00 	.word	0x48000c00
 8005224:	48001000 	.word	0x48001000
 8005228:	58000800 	.word	0x58000800

0800522c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	807b      	strh	r3, [r7, #2]
 8005238:	4613      	mov	r3, r2
 800523a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800523c:	787b      	ldrb	r3, [r7, #1]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005242:	887a      	ldrh	r2, [r7, #2]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005248:	e002      	b.n	8005250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800524a:	887a      	ldrh	r2, [r7, #2]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005262:	4b0a      	ldr	r3, [pc, #40]	@ (800528c <HAL_HSEM_IRQHandler+0x30>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005268:	4b08      	ldr	r3, [pc, #32]	@ (800528c <HAL_HSEM_IRQHandler+0x30>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	43db      	mvns	r3, r3
 8005270:	4906      	ldr	r1, [pc, #24]	@ (800528c <HAL_HSEM_IRQHandler+0x30>)
 8005272:	4013      	ands	r3, r2
 8005274:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005276:	4a05      	ldr	r2, [pc, #20]	@ (800528c <HAL_HSEM_IRQHandler+0x30>)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f807 	bl	8005290 <HAL_HSEM_FreeCallback>
}
 8005282:	bf00      	nop
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	58001500 	.word	0x58001500

08005290 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d01e      	beq.n	80052f4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80052b6:	4b13      	ldr	r3, [pc, #76]	@ (8005304 <HAL_IPCC_Init+0x60>)
 80052b8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d102      	bne.n	80052cc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fd f9d6 	bl	8002678 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80052cc:	68b8      	ldr	r0, [r7, #8]
 80052ce:	f000 f85b 	bl	8005388 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f82c 	bl	800533c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80052f2:	e001      	b.n	80052f8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	58000c00 	.word	0x58000c00

08005308 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	4613      	mov	r3, r2
 8005314:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	4613      	mov	r3, r2
 800532e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	e00f      	b.n	800536a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	4a0b      	ldr	r2, [pc, #44]	@ (8005380 <IPCC_SetDefaultCallbacks+0x44>)
 8005354:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3306      	adds	r3, #6
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	4a08      	ldr	r2, [pc, #32]	@ (8005384 <IPCC_SetDefaultCallbacks+0x48>)
 8005362:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b05      	cmp	r3, #5
 800536e:	d9ec      	bls.n	800534a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005370:	bf00      	nop
 8005372:	bf00      	nop
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	08005309 	.word	0x08005309
 8005384:	08005323 	.word	0x08005323

08005388 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800539c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	223f      	movs	r2, #63	@ 0x3f
 80053a2:	609a      	str	r2, [r3, #8]
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e0c0      	b.n	8005544 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f00e f998 	bl	801370c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2203      	movs	r2, #3
 80053e0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f005 f9f4 	bl	800a7d6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053ee:	2300      	movs	r3, #0
 80053f0:	73fb      	strb	r3, [r7, #15]
 80053f2:	e03e      	b.n	8005472 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80053f4:	7bfa      	ldrb	r2, [r7, #15]
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	440b      	add	r3, r1
 8005402:	3311      	adds	r3, #17
 8005404:	2201      	movs	r2, #1
 8005406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005408:	7bfa      	ldrb	r2, [r7, #15]
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	440b      	add	r3, r1
 8005416:	3310      	adds	r3, #16
 8005418:	7bfa      	ldrb	r2, [r7, #15]
 800541a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800541c:	7bfa      	ldrb	r2, [r7, #15]
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	440b      	add	r3, r1
 800542a:	3313      	adds	r3, #19
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005430:	7bfa      	ldrb	r2, [r7, #15]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	440b      	add	r3, r1
 800543e:	3320      	adds	r3, #32
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005444:	7bfa      	ldrb	r2, [r7, #15]
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	440b      	add	r3, r1
 8005452:	3324      	adds	r3, #36	@ 0x24
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	440b      	add	r3, r1
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	3301      	adds	r3, #1
 8005470:	73fb      	strb	r3, [r7, #15]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	791b      	ldrb	r3, [r3, #4]
 8005476:	7bfa      	ldrb	r2, [r7, #15]
 8005478:	429a      	cmp	r2, r3
 800547a:	d3bb      	bcc.n	80053f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]
 8005480:	e044      	b.n	800550c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005482:	7bfa      	ldrb	r2, [r7, #15]
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	440b      	add	r3, r1
 8005490:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005498:	7bfa      	ldrb	r2, [r7, #15]
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	440b      	add	r3, r1
 80054a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80054aa:	7bfa      	ldrb	r2, [r7, #15]
 80054ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054ae:	7bfa      	ldrb	r2, [r7, #15]
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	440b      	add	r3, r1
 80054bc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80054c0:	2200      	movs	r2, #0
 80054c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054c4:	7bfa      	ldrb	r2, [r7, #15]
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	4613      	mov	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	440b      	add	r3, r1
 80054d2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054da:	7bfa      	ldrb	r2, [r7, #15]
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	440b      	add	r3, r1
 80054e8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054f0:	7bfa      	ldrb	r2, [r7, #15]
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	440b      	add	r3, r1
 80054fe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	3301      	adds	r3, #1
 800550a:	73fb      	strb	r3, [r7, #15]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	791b      	ldrb	r3, [r3, #4]
 8005510:	7bfa      	ldrb	r2, [r7, #15]
 8005512:	429a      	cmp	r2, r3
 8005514:	d3b5      	bcc.n	8005482 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3304      	adds	r3, #4
 800551e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005522:	f005 f973 	bl	800a80c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	7a9b      	ldrb	r3, [r3, #10]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d102      	bne.n	8005542 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f001 fc40 	bl	8006dc2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_PCD_Start+0x16>
 800555e:	2302      	movs	r3, #2
 8005560:	e012      	b.n	8005588 <HAL_PCD_Start+0x3c>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f005 f91a 	bl	800a7a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f007 fbda 	bl	800cd32 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4618      	mov	r0, r3
 800559e:	f007 fbdf 	bl	800cd60 <USB_ReadInterrupts>
 80055a2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fb04 	bl	8005bbc <PCD_EP_ISR_Handler>

    return;
 80055b4:	e110      	b.n	80057d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d013      	beq.n	80055e8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055d2:	b292      	uxth	r2, r2
 80055d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f00e f93a 	bl	8013852 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80055de:	2100      	movs	r1, #0
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f8fc 	bl	80057de <HAL_PCD_SetAddress>

    return;
 80055e6:	e0f7      	b.n	80057d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00c      	beq.n	800560c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005604:	b292      	uxth	r2, r2
 8005606:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800560a:	e0e5      	b.n	80057d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00c      	beq.n	8005630 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800561e:	b29a      	uxth	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005628:	b292      	uxth	r2, r2
 800562a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800562e:	e0d3      	b.n	80057d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d034      	beq.n	80056a4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005642:	b29a      	uxth	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0204 	bic.w	r2, r2, #4
 800564c:	b292      	uxth	r2, r2
 800564e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800565a:	b29a      	uxth	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0208 	bic.w	r2, r2, #8
 8005664:	b292      	uxth	r2, r2
 8005666:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005670:	2b01      	cmp	r3, #1
 8005672:	d107      	bne.n	8005684 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800567c:	2100      	movs	r1, #0
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f00e fadc 	bl	8013c3c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f00e f91d 	bl	80138c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005692:	b29a      	uxth	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800569c:	b292      	uxth	r2, r2
 800569e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80056a2:	e099      	b.n	80057d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d027      	beq.n	80056fe <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0208 	orr.w	r2, r2, #8
 80056c0:	b292      	uxth	r2, r2
 80056c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056d8:	b292      	uxth	r2, r2
 80056da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0204 	orr.w	r2, r2, #4
 80056f0:	b292      	uxth	r2, r2
 80056f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f00e f8ca 	bl	8013890 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80056fc:	e06c      	b.n	80057d8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005704:	2b00      	cmp	r3, #0
 8005706:	d040      	beq.n	800578a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005710:	b29a      	uxth	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800571a:	b292      	uxth	r2, r2
 800571c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d12b      	bne.n	8005782 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005732:	b29a      	uxth	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0204 	orr.w	r2, r2, #4
 800573c:	b292      	uxth	r2, r2
 800573e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800574a:	b29a      	uxth	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0208 	orr.w	r2, r2, #8
 8005754:	b292      	uxth	r2, r2
 8005756:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800576a:	b29b      	uxth	r3, r3
 800576c:	089b      	lsrs	r3, r3, #2
 800576e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005778:	2101      	movs	r1, #1
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f00e fa5e 	bl	8013c3c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005780:	e02a      	b.n	80057d8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f00e f884 	bl	8013890 <HAL_PCD_SuspendCallback>
    return;
 8005788:	e026      	b.n	80057d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00f      	beq.n	80057b4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800579c:	b29a      	uxth	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80057a6:	b292      	uxth	r2, r2
 80057a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f00e f842 	bl	8013836 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80057b2:	e011      	b.n	80057d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00c      	beq.n	80057d8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057d0:	b292      	uxth	r2, r2
 80057d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80057d6:	bf00      	nop
  }
}
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	460b      	mov	r3, r1
 80057e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_PCD_SetAddress+0x1a>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e012      	b.n	800581e <HAL_PCD_SetAddress+0x40>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	78fa      	ldrb	r2, [r7, #3]
 8005804:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	78fa      	ldrb	r2, [r7, #3]
 800580c:	4611      	mov	r1, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f007 fa7b 	bl	800cd0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	4608      	mov	r0, r1
 8005830:	4611      	mov	r1, r2
 8005832:	461a      	mov	r2, r3
 8005834:	4603      	mov	r3, r0
 8005836:	70fb      	strb	r3, [r7, #3]
 8005838:	460b      	mov	r3, r1
 800583a:	803b      	strh	r3, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005848:	2b00      	cmp	r3, #0
 800584a:	da0e      	bge.n	800586a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	f003 0207 	and.w	r2, r3, #7
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	3310      	adds	r3, #16
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	4413      	add	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	705a      	strb	r2, [r3, #1]
 8005868:	e00e      	b.n	8005888 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	f003 0207 	and.w	r2, r3, #7
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	4413      	add	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	b2da      	uxtb	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005894:	883a      	ldrh	r2, [r7, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	78ba      	ldrb	r2, [r7, #2]
 800589e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80058a0:	78bb      	ldrb	r3, [r7, #2]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d102      	bne.n	80058ac <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_PCD_EP_Open+0x94>
 80058b6:	2302      	movs	r3, #2
 80058b8:	e00e      	b.n	80058d8 <HAL_PCD_EP_Open+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68f9      	ldr	r1, [r7, #12]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f004 ffbd 	bl	800a848 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80058d6:	7afb      	ldrb	r3, [r7, #11]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	da0e      	bge.n	8005912 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	f003 0207 	and.w	r2, r3, #7
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	3310      	adds	r3, #16
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	4413      	add	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2201      	movs	r2, #1
 800590e:	705a      	strb	r2, [r3, #1]
 8005910:	e00e      	b.n	8005930 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005912:	78fb      	ldrb	r3, [r7, #3]
 8005914:	f003 0207 	and.w	r2, r3, #7
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	4413      	add	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	b2da      	uxtb	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_PCD_EP_Close+0x6a>
 8005946:	2302      	movs	r3, #2
 8005948:	e00e      	b.n	8005968 <HAL_PCD_EP_Close+0x88>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	4618      	mov	r0, r3
 800595a:	f005 fb39 	bl	800afd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	607a      	str	r2, [r7, #4]
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	460b      	mov	r3, r1
 800597e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005980:	7afb      	ldrb	r3, [r7, #11]
 8005982:	f003 0207 	and.w	r2, r3, #7
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2200      	movs	r2, #0
 80059a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2200      	movs	r2, #0
 80059ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059b0:	7afb      	ldrb	r3, [r7, #11]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6979      	ldr	r1, [r7, #20]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f005 fcf1 	bl	800b3aa <USB_EPStartXfer>

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	460b      	mov	r3, r1
 80059dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	f003 0207 	and.w	r2, r3, #7
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	440b      	add	r3, r1
 80059f0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80059f4:	681b      	ldr	r3, [r3, #0]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b086      	sub	sp, #24
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	603b      	str	r3, [r7, #0]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a12:	7afb      	ldrb	r3, [r7, #11]
 8005a14:	f003 0207 	and.w	r2, r3, #7
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	3310      	adds	r3, #16
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2200      	movs	r2, #0
 8005a46:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a4e:	7afb      	ldrb	r3, [r7, #11]
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6979      	ldr	r1, [r7, #20]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f005 fca2 	bl	800b3aa <USB_EPStartXfer>

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	7912      	ldrb	r2, [r2, #4]
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e03e      	b.n	8005b0c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	da0e      	bge.n	8005ab4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	f003 0207 	and.w	r2, r3, #7
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	3310      	adds	r3, #16
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	705a      	strb	r2, [r3, #1]
 8005ab2:	e00c      	b.n	8005ace <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ab4:	78fa      	ldrb	r2, [r7, #3]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_PCD_EP_SetStall+0x7e>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e00e      	b.n	8005b0c <HAL_PCD_EP_SetStall+0x9c>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68f9      	ldr	r1, [r7, #12]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f007 f805 	bl	800cb0c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	7912      	ldrb	r2, [r2, #4]
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d901      	bls.n	8005b32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e040      	b.n	8005bb4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	da0e      	bge.n	8005b58 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	f003 0207 	and.w	r2, r3, #7
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	3310      	adds	r3, #16
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	705a      	strb	r2, [r3, #1]
 8005b56:	e00e      	b.n	8005b76 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	f003 0207 	and.w	r2, r3, #7
 8005b5e:	4613      	mov	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_PCD_EP_ClrStall+0x82>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e00e      	b.n	8005bb4 <HAL_PCD_EP_ClrStall+0xa0>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f007 f802 	bl	800cbae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b096      	sub	sp, #88	@ 0x58
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005bc4:	e3ad      	b.n	8006322 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005bd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005be0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f040 816f 	bne.w	8005ec8 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005bea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005bee:	f003 0310 	and.w	r3, r3, #16
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d14c      	bne.n	8005c90 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c06:	81fb      	strh	r3, [r7, #14]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	89fb      	ldrh	r3, [r7, #14]
 8005c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3310      	adds	r3, #16
 8005c1e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	4413      	add	r3, r2
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	441a      	add	r2, r3
 8005c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c54:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005c56:	2100      	movs	r1, #0
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f00d fdd2 	bl	8013802 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	7b1b      	ldrb	r3, [r3, #12]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 835c 	beq.w	8006322 <PCD_EP_ISR_Handler+0x766>
 8005c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f040 8357 	bne.w	8006322 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	7b1b      	ldrb	r3, [r3, #12]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	731a      	strb	r2, [r3, #12]
 8005c8e:	e348      	b.n	8006322 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005c96:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005ca2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005ca6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d032      	beq.n	8005d14 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6812      	ldr	r2, [r2, #0]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cd4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ce2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ce6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	f007 f88c 	bl	800ce06 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	823b      	strh	r3, [r7, #16]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	8a3a      	ldrh	r2, [r7, #16]
 8005d04:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d08:	b292      	uxth	r2, r2
 8005d0a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f00d fd4b 	bl	80137a8 <HAL_PCD_SetupStageCallback>
 8005d12:	e306      	b.n	8006322 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005d14:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f280 8302 	bge.w	8006322 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	83fb      	strh	r3, [r7, #30]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	8bfa      	ldrh	r2, [r7, #30]
 8005d34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d38:	b292      	uxth	r2, r2
 8005d3a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	4413      	add	r3, r2
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6812      	ldr	r2, [r2, #0]
 8005d54:	4413      	add	r3, r2
 8005d56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d62:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d019      	beq.n	8005da0 <PCD_EP_ISR_Handler+0x1e4>
 8005d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d015      	beq.n	8005da0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d7a:	6959      	ldr	r1, [r3, #20]
 8005d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d7e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d82:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f007 f83e 	bl	800ce06 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d8c:	695a      	ldr	r2, [r3, #20]
 8005d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	441a      	add	r2, r3
 8005d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d96:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005d98:	2100      	movs	r1, #0
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f00d fd16 	bl	80137cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005daa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005dae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f040 82b5 	bne.w	8006322 <PCD_EP_ISR_Handler+0x766>
 8005db8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005dbc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005dc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005dc4:	f000 82ad 	beq.w	8006322 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	61bb      	str	r3, [r7, #24]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	4413      	add	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	801a      	strh	r2, [r3, #0]
 8005df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8005dfe:	d91d      	bls.n	8005e3c <PCD_EP_ISR_Handler+0x280>
 8005e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	f003 031f 	and.w	r3, r3, #31
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d102      	bne.n	8005e1a <PCD_EP_ISR_Handler+0x25e>
 8005e14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e16:	3b01      	subs	r3, #1
 8005e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	029b      	lsls	r3, r3, #10
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	801a      	strh	r2, [r3, #0]
 8005e3a:	e026      	b.n	8005e8a <PCD_EP_ISR_Handler+0x2ce>
 8005e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <PCD_EP_ISR_Handler+0x29e>
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	801a      	strh	r2, [r3, #0]
 8005e58:	e017      	b.n	8005e8a <PCD_EP_ISR_Handler+0x2ce>
 8005e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <PCD_EP_ISR_Handler+0x2b8>
 8005e6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e70:	3301      	adds	r3, #1
 8005e72:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	029b      	lsls	r3, r3, #10
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	4313      	orrs	r3, r2
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9a:	827b      	strh	r3, [r7, #18]
 8005e9c:	8a7b      	ldrh	r3, [r7, #18]
 8005e9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005ea2:	827b      	strh	r3, [r7, #18]
 8005ea4:	8a7b      	ldrh	r3, [r7, #18]
 8005ea6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005eaa:	827b      	strh	r3, [r7, #18]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	8a7b      	ldrh	r3, [r7, #18]
 8005eb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	8013      	strh	r3, [r2, #0]
 8005ec6:	e22c      	b.n	8006322 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005edc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f280 80f6 	bge.w	80060d2 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005efc:	4013      	ands	r3, r2
 8005efe:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005f14:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005f18:	b292      	uxth	r2, r2
 8005f1a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005f1c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	4413      	add	r3, r2
 8005f30:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f34:	7b1b      	ldrb	r3, [r3, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d123      	bne.n	8005f82 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	4413      	add	r3, r2
 8005f54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f5e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005f62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 808e 	beq.w	8006088 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f72:	6959      	ldr	r1, [r3, #20]
 8005f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f76:	88da      	ldrh	r2, [r3, #6]
 8005f78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005f7c:	f006 ff43 	bl	800ce06 <USB_ReadPMA>
 8005f80:	e082      	b.n	8006088 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f84:	78db      	ldrb	r3, [r3, #3]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d10a      	bne.n	8005fa0 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005f8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005f8e:	461a      	mov	r2, r3
 8005f90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f9d3 	bl	800633e <HAL_PCD_EP_DB_Receive>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005f9e:	e073      	b.n	8006088 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fba:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	441a      	add	r2, r3
 8005fcc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fdc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d022      	beq.n	8006044 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006006:	b29b      	uxth	r3, r3
 8006008:	461a      	mov	r2, r3
 800600a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	4413      	add	r3, r2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6812      	ldr	r2, [r2, #0]
 8006016:	4413      	add	r3, r2
 8006018:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006022:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006026:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800602a:	2b00      	cmp	r3, #0
 800602c:	d02c      	beq.n	8006088 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006034:	6959      	ldr	r1, [r3, #20]
 8006036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006038:	891a      	ldrh	r2, [r3, #8]
 800603a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800603e:	f006 fee2 	bl	800ce06 <USB_ReadPMA>
 8006042:	e021      	b.n	8006088 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800604c:	b29b      	uxth	r3, r3
 800604e:	461a      	mov	r2, r3
 8006050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	4413      	add	r3, r2
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6812      	ldr	r2, [r2, #0]
 800605c:	4413      	add	r3, r2
 800605e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006068:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800606c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800607a:	6959      	ldr	r1, [r3, #20]
 800607c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800607e:	895a      	ldrh	r2, [r3, #10]
 8006080:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006084:	f006 febf 	bl	800ce06 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006090:	441a      	add	r2, r3
 8006092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006094:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006098:	695a      	ldr	r2, [r3, #20]
 800609a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800609e:	441a      	add	r2, r3
 80060a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80060a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d005      	beq.n	80060b8 <PCD_EP_ISR_Handler+0x4fc>
 80060ac:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80060b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d206      	bcs.n	80060c6 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80060b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f00d fb84 	bl	80137cc <HAL_PCD_DataOutStageCallback>
 80060c4:	e005      	b.n	80060d2 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060cc:	4618      	mov	r0, r3
 80060ce:	f005 f96c 	bl	800b3aa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80060d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80060d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8121 	beq.w	8006322 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80060e0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	3310      	adds	r3, #16
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	4413      	add	r3, r2
 80060f2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800610a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	441a      	add	r2, r3
 8006120:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800612c:	b29b      	uxth	r3, r3
 800612e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006132:	78db      	ldrb	r3, [r3, #3]
 8006134:	2b01      	cmp	r3, #1
 8006136:	f040 80a2 	bne.w	800627e <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800613a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800613c:	2200      	movs	r2, #0
 800613e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006142:	7b1b      	ldrb	r3, [r3, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 8093 	beq.w	8006270 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800614a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800614e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006152:	2b00      	cmp	r3, #0
 8006154:	d046      	beq.n	80061e4 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d126      	bne.n	80061ac <PCD_EP_ISR_Handler+0x5f0>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	627b      	str	r3, [r7, #36]	@ 0x24
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800616c:	b29b      	uxth	r3, r3
 800616e:	461a      	mov	r2, r3
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	4413      	add	r3, r2
 8006174:	627b      	str	r3, [r7, #36]	@ 0x24
 8006176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	00da      	lsls	r2, r3, #3
 800617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617e:	4413      	add	r3, r2
 8006180:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006184:	623b      	str	r3, [r7, #32]
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006190:	b29a      	uxth	r2, r3
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	801a      	strh	r2, [r3, #0]
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	801a      	strh	r2, [r3, #0]
 80061aa:	e061      	b.n	8006270 <PCD_EP_ISR_Handler+0x6b4>
 80061ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061ae:	785b      	ldrb	r3, [r3, #1]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d15d      	bne.n	8006270 <PCD_EP_ISR_Handler+0x6b4>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c8:	4413      	add	r3, r2
 80061ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	00da      	lsls	r2, r3, #3
 80061d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d4:	4413      	add	r3, r2
 80061d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80061da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061de:	2200      	movs	r2, #0
 80061e0:	801a      	strh	r2, [r3, #0]
 80061e2:	e045      	b.n	8006270 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061ec:	785b      	ldrb	r3, [r3, #1]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d126      	bne.n	8006240 <PCD_EP_ISR_Handler+0x684>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006200:	b29b      	uxth	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006206:	4413      	add	r3, r2
 8006208:	637b      	str	r3, [r7, #52]	@ 0x34
 800620a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	00da      	lsls	r2, r3, #3
 8006210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006212:	4413      	add	r3, r2
 8006214:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006218:	633b      	str	r3, [r7, #48]	@ 0x30
 800621a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006224:	b29a      	uxth	r2, r3
 8006226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006228:	801a      	strh	r2, [r3, #0]
 800622a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29b      	uxth	r3, r3
 8006230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006238:	b29a      	uxth	r2, r3
 800623a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	e017      	b.n	8006270 <PCD_EP_ISR_Handler+0x6b4>
 8006240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d113      	bne.n	8006270 <PCD_EP_ISR_Handler+0x6b4>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006250:	b29b      	uxth	r3, r3
 8006252:	461a      	mov	r2, r3
 8006254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006256:	4413      	add	r3, r2
 8006258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800625a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	00da      	lsls	r2, r3, #3
 8006260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006262:	4413      	add	r3, r2
 8006264:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006268:	63bb      	str	r3, [r7, #56]	@ 0x38
 800626a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626c:	2200      	movs	r2, #0
 800626e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	4619      	mov	r1, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f00d fac3 	bl	8013802 <HAL_PCD_DataInStageCallback>
 800627c:	e051      	b.n	8006322 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800627e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006286:	2b00      	cmp	r3, #0
 8006288:	d144      	bne.n	8006314 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006292:	b29b      	uxth	r3, r3
 8006294:	461a      	mov	r2, r3
 8006296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	4413      	add	r3, r2
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6812      	ldr	r2, [r2, #0]
 80062a2:	4413      	add	r3, r2
 80062a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062ae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80062b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d907      	bls.n	80062ce <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80062be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80062c6:	1ad2      	subs	r2, r2, r3
 80062c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062ca:	619a      	str	r2, [r3, #24]
 80062cc:	e002      	b.n	80062d4 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80062ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062d0:	2200      	movs	r2, #0
 80062d2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80062d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d106      	bne.n	80062ea <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80062dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f00d fa8d 	bl	8013802 <HAL_PCD_DataInStageCallback>
 80062e8:	e01b      	b.n	8006322 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80062ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062ec:	695a      	ldr	r2, [r3, #20]
 80062ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80062f2:	441a      	add	r2, r3
 80062f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80062f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006300:	441a      	add	r2, r3
 8006302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006304:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800630c:	4618      	mov	r0, r3
 800630e:	f005 f84c 	bl	800b3aa <USB_EPStartXfer>
 8006312:	e006      	b.n	8006322 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006314:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006318:	461a      	mov	r2, r3
 800631a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f917 	bl	8006550 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800632a:	b29b      	uxth	r3, r3
 800632c:	b21b      	sxth	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	f6ff ac49 	blt.w	8005bc6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3758      	adds	r7, #88	@ 0x58
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b088      	sub	sp, #32
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	4613      	mov	r3, r2
 800634a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800634c:	88fb      	ldrh	r3, [r7, #6]
 800634e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d07c      	beq.n	8006450 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800635e:	b29b      	uxth	r3, r3
 8006360:	461a      	mov	r2, r3
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	4413      	add	r3, r2
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	4413      	add	r3, r2
 8006370:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800637a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	699a      	ldr	r2, [r3, #24]
 8006380:	8b7b      	ldrh	r3, [r7, #26]
 8006382:	429a      	cmp	r2, r3
 8006384:	d306      	bcc.n	8006394 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	8b7b      	ldrh	r3, [r7, #26]
 800638c:	1ad2      	subs	r2, r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	619a      	str	r2, [r3, #24]
 8006392:	e002      	b.n	800639a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2200      	movs	r2, #0
 8006398:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d123      	bne.n	80063ea <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063bc:	833b      	strh	r3, [r7, #24]
 80063be:	8b3b      	ldrh	r3, [r7, #24]
 80063c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80063c4:	833b      	strh	r3, [r7, #24]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	441a      	add	r2, r3
 80063d4:	8b3b      	ldrh	r3, [r7, #24]
 80063d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80063ea:	88fb      	ldrh	r3, [r7, #6]
 80063ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01f      	beq.n	8006434 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800640a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640e:	82fb      	strh	r3, [r7, #22]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	441a      	add	r2, r3
 800641e:	8afb      	ldrh	r3, [r7, #22]
 8006420:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006424:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800642c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006430:	b29b      	uxth	r3, r3
 8006432:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006434:	8b7b      	ldrh	r3, [r7, #26]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 8085 	beq.w	8006546 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6818      	ldr	r0, [r3, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6959      	ldr	r1, [r3, #20]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	891a      	ldrh	r2, [r3, #8]
 8006448:	8b7b      	ldrh	r3, [r7, #26]
 800644a:	f006 fcdc 	bl	800ce06 <USB_ReadPMA>
 800644e:	e07a      	b.n	8006546 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006458:	b29b      	uxth	r3, r3
 800645a:	461a      	mov	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4413      	add	r3, r2
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	4413      	add	r3, r2
 800646a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006474:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	8b7b      	ldrh	r3, [r7, #26]
 800647c:	429a      	cmp	r2, r3
 800647e:	d306      	bcc.n	800648e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	699a      	ldr	r2, [r3, #24]
 8006484:	8b7b      	ldrh	r3, [r7, #26]
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	619a      	str	r2, [r3, #24]
 800648c:	e002      	b.n	8006494 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2200      	movs	r2, #0
 8006492:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d123      	bne.n	80064e4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	461a      	mov	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b6:	83fb      	strh	r3, [r7, #30]
 80064b8:	8bfb      	ldrh	r3, [r7, #30]
 80064ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80064be:	83fb      	strh	r3, [r7, #30]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	441a      	add	r2, r3
 80064ce:	8bfb      	ldrh	r3, [r7, #30]
 80064d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d11f      	bne.n	800652e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006508:	83bb      	strh	r3, [r7, #28]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	441a      	add	r2, r3
 8006518:	8bbb      	ldrh	r3, [r7, #28]
 800651a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800651e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006526:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800652a:	b29b      	uxth	r3, r3
 800652c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800652e:	8b7b      	ldrh	r3, [r7, #26]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d008      	beq.n	8006546 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	6959      	ldr	r1, [r3, #20]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	895a      	ldrh	r2, [r3, #10]
 8006540:	8b7b      	ldrh	r3, [r7, #26]
 8006542:	f006 fc60 	bl	800ce06 <USB_ReadPMA>
    }
  }

  return count;
 8006546:	8b7b      	ldrh	r3, [r7, #26]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3720      	adds	r7, #32
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b0a4      	sub	sp, #144	@ 0x90
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 81db 	beq.w	8006920 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006572:	b29b      	uxth	r3, r3
 8006574:	461a      	mov	r2, r3
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	4413      	add	r3, r2
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	4413      	add	r3, r2
 8006584:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800658e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	699a      	ldr	r2, [r3, #24]
 8006596:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800659a:	429a      	cmp	r2, r3
 800659c:	d907      	bls.n	80065ae <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80065a6:	1ad2      	subs	r2, r2, r3
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	619a      	str	r2, [r3, #24]
 80065ac:	e002      	b.n	80065b4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2200      	movs	r2, #0
 80065b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f040 80b9 	bne.w	8006730 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	785b      	ldrb	r3, [r3, #1]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d126      	bne.n	8006614 <HAL_PCD_EP_DB_Transmit+0xc4>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	461a      	mov	r2, r3
 80065d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065da:	4413      	add	r3, r2
 80065dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	00da      	lsls	r2, r3, #3
 80065e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e6:	4413      	add	r3, r2
 80065e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80065ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660c:	b29a      	uxth	r2, r3
 800660e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006610:	801a      	strh	r2, [r3, #0]
 8006612:	e01a      	b.n	800664a <HAL_PCD_EP_DB_Transmit+0xfa>
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	785b      	ldrb	r3, [r3, #1]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d116      	bne.n	800664a <HAL_PCD_EP_DB_Transmit+0xfa>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	637b      	str	r3, [r7, #52]	@ 0x34
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800662a:	b29b      	uxth	r3, r3
 800662c:	461a      	mov	r2, r3
 800662e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006630:	4413      	add	r3, r2
 8006632:	637b      	str	r3, [r7, #52]	@ 0x34
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	00da      	lsls	r2, r3, #3
 800663a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800663c:	4413      	add	r3, r2
 800663e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006642:	633b      	str	r3, [r7, #48]	@ 0x30
 8006644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006646:	2200      	movs	r2, #0
 8006648:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d126      	bne.n	80066a6 <HAL_PCD_EP_DB_Transmit+0x156>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	61fb      	str	r3, [r7, #28]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006666:	b29b      	uxth	r3, r3
 8006668:	461a      	mov	r2, r3
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	4413      	add	r3, r2
 800666e:	61fb      	str	r3, [r7, #28]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	00da      	lsls	r2, r3, #3
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	4413      	add	r3, r2
 800667a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800668a:	b29a      	uxth	r2, r3
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	801a      	strh	r2, [r3, #0]
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800669a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669e:	b29a      	uxth	r2, r3
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	e017      	b.n	80066d6 <HAL_PCD_EP_DB_Transmit+0x186>
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	785b      	ldrb	r3, [r3, #1]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d113      	bne.n	80066d6 <HAL_PCD_EP_DB_Transmit+0x186>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	461a      	mov	r2, r3
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	4413      	add	r3, r2
 80066be:	627b      	str	r3, [r7, #36]	@ 0x24
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	00da      	lsls	r2, r3, #3
 80066c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c8:	4413      	add	r3, r2
 80066ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066ce:	623b      	str	r3, [r7, #32]
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	2200      	movs	r2, #0
 80066d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	4619      	mov	r1, r3
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f00d f890 	bl	8013802 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 82fa 	beq.w	8006ce2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006708:	82fb      	strh	r3, [r7, #22]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	441a      	add	r2, r3
 8006718:	8afb      	ldrh	r3, [r7, #22]
 800671a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800671e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800672a:	b29b      	uxth	r3, r3
 800672c:	8013      	strh	r3, [r2, #0]
 800672e:	e2d8      	b.n	8006ce2 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006730:	88fb      	ldrh	r3, [r7, #6]
 8006732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d021      	beq.n	800677e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b29b      	uxth	r3, r3
 800674c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006754:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	441a      	add	r2, r3
 8006766:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800676a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800676e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006772:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800677a:	b29b      	uxth	r3, r3
 800677c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006784:	2b01      	cmp	r3, #1
 8006786:	f040 82ac 	bne.w	8006ce2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	695a      	ldr	r2, [r3, #20]
 800678e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006792:	441a      	add	r2, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80067a0:	441a      	add	r2, r3
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	6a1a      	ldr	r2, [r3, #32]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d30b      	bcc.n	80067ca <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	6a1a      	ldr	r2, [r3, #32]
 80067be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067c2:	1ad2      	subs	r2, r2, r3
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	621a      	str	r2, [r3, #32]
 80067c8:	e017      	b.n	80067fa <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d108      	bne.n	80067e4 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80067d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80067d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80067e2:	e00a      	b.n	80067fa <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2200      	movs	r2, #0
 80067f8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	785b      	ldrb	r3, [r3, #1]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d165      	bne.n	80068ce <HAL_PCD_EP_DB_Transmit+0x37e>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006810:	b29b      	uxth	r3, r3
 8006812:	461a      	mov	r2, r3
 8006814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006816:	4413      	add	r3, r2
 8006818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	00da      	lsls	r2, r3, #3
 8006820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006822:	4413      	add	r3, r2
 8006824:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006828:	63bb      	str	r3, [r7, #56]	@ 0x38
 800682a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	b29b      	uxth	r3, r3
 8006830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006834:	b29a      	uxth	r2, r3
 8006836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800683e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006840:	d91d      	bls.n	800687e <HAL_PCD_EP_DB_Transmit+0x32e>
 8006842:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006846:	095b      	lsrs	r3, r3, #5
 8006848:	64bb      	str	r3, [r7, #72]	@ 0x48
 800684a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800684e:	f003 031f 	and.w	r3, r3, #31
 8006852:	2b00      	cmp	r3, #0
 8006854:	d102      	bne.n	800685c <HAL_PCD_EP_DB_Transmit+0x30c>
 8006856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006858:	3b01      	subs	r3, #1
 800685a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800685c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	b29a      	uxth	r2, r3
 8006862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006864:	b29b      	uxth	r3, r3
 8006866:	029b      	lsls	r3, r3, #10
 8006868:	b29b      	uxth	r3, r3
 800686a:	4313      	orrs	r3, r2
 800686c:	b29b      	uxth	r3, r3
 800686e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006876:	b29a      	uxth	r2, r3
 8006878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687a:	801a      	strh	r2, [r3, #0]
 800687c:	e044      	b.n	8006908 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800687e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10a      	bne.n	800689c <HAL_PCD_EP_DB_Transmit+0x34c>
 8006886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006894:	b29a      	uxth	r2, r3
 8006896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006898:	801a      	strh	r2, [r3, #0]
 800689a:	e035      	b.n	8006908 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800689c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068a0:	085b      	lsrs	r3, r3, #1
 80068a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <HAL_PCD_EP_DB_Transmit+0x366>
 80068b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068b2:	3301      	adds	r3, #1
 80068b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068be:	b29b      	uxth	r3, r3
 80068c0:	029b      	lsls	r3, r3, #10
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	4313      	orrs	r3, r2
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ca:	801a      	strh	r2, [r3, #0]
 80068cc:	e01c      	b.n	8006908 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	785b      	ldrb	r3, [r3, #1]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d118      	bne.n	8006908 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	647b      	str	r3, [r7, #68]	@ 0x44
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	461a      	mov	r2, r3
 80068e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ea:	4413      	add	r3, r2
 80068ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	00da      	lsls	r2, r3, #3
 80068f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068f6:	4413      	add	r3, r2
 80068f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80068fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80068fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006902:	b29a      	uxth	r2, r3
 8006904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006906:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	6959      	ldr	r1, [r3, #20]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	891a      	ldrh	r2, [r3, #8]
 8006914:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006918:	b29b      	uxth	r3, r3
 800691a:	f006 fa31 	bl	800cd80 <USB_WritePMA>
 800691e:	e1e0      	b.n	8006ce2 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006928:	b29b      	uxth	r3, r3
 800692a:	461a      	mov	r2, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	4413      	add	r3, r2
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	6812      	ldr	r2, [r2, #0]
 8006938:	4413      	add	r3, r2
 800693a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006944:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	699a      	ldr	r2, [r3, #24]
 800694c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006950:	429a      	cmp	r2, r3
 8006952:	d307      	bcc.n	8006964 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	699a      	ldr	r2, [r3, #24]
 8006958:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800695c:	1ad2      	subs	r2, r2, r3
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	619a      	str	r2, [r3, #24]
 8006962:	e002      	b.n	800696a <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2200      	movs	r2, #0
 8006968:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 80c0 	bne.w	8006af4 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	785b      	ldrb	r3, [r3, #1]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d126      	bne.n	80069ca <HAL_PCD_EP_DB_Transmit+0x47a>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800698a:	b29b      	uxth	r3, r3
 800698c:	461a      	mov	r2, r3
 800698e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006990:	4413      	add	r3, r2
 8006992:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	00da      	lsls	r2, r3, #3
 800699a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800699c:	4413      	add	r3, r2
 800699e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80069a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069b2:	801a      	strh	r2, [r3, #0]
 80069b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	e01a      	b.n	8006a00 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	785b      	ldrb	r3, [r3, #1]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d116      	bne.n	8006a00 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	461a      	mov	r2, r3
 80069e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069e6:	4413      	add	r3, r2
 80069e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	00da      	lsls	r2, r3, #3
 80069f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069f2:	4413      	add	r3, r2
 80069f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80069f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80069fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069fc:	2200      	movs	r2, #0
 80069fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	785b      	ldrb	r3, [r3, #1]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d12b      	bne.n	8006a66 <HAL_PCD_EP_DB_Transmit+0x516>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a22:	4413      	add	r3, r2
 8006a24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	00da      	lsls	r2, r3, #3
 8006a2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a2e:	4413      	add	r3, r2
 8006a30:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a62:	801a      	strh	r2, [r3, #0]
 8006a64:	e017      	b.n	8006a96 <HAL_PCD_EP_DB_Transmit+0x546>
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	785b      	ldrb	r3, [r3, #1]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d113      	bne.n	8006a96 <HAL_PCD_EP_DB_Transmit+0x546>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a7c:	4413      	add	r3, r2
 8006a7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	00da      	lsls	r2, r3, #3
 8006a86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a88:	4413      	add	r3, r2
 8006a8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a92:	2200      	movs	r2, #0
 8006a94:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f00c feb0 	bl	8013802 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006aa2:	88fb      	ldrh	r3, [r7, #6]
 8006aa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f040 811a 	bne.w	8006ce2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	441a      	add	r2, r3
 8006ada:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ae6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	8013      	strh	r3, [r2, #0]
 8006af2:	e0f6      	b.n	8006ce2 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006af4:	88fb      	ldrh	r3, [r7, #6]
 8006af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d121      	bne.n	8006b42 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b18:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	461a      	mov	r2, r3
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	441a      	add	r2, r3
 8006b2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	f040 80ca 	bne.w	8006ce2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	695a      	ldr	r2, [r3, #20]
 8006b52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006b56:	441a      	add	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006b64:	441a      	add	r2, r3
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	6a1a      	ldr	r2, [r3, #32]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d30b      	bcc.n	8006b8e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	6a1a      	ldr	r2, [r3, #32]
 8006b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b86:	1ad2      	subs	r2, r2, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	621a      	str	r2, [r3, #32]
 8006b8c:	e017      	b.n	8006bbe <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d108      	bne.n	8006ba8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8006b96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006b9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006ba6:	e00a      	b.n	8006bbe <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	785b      	ldrb	r3, [r3, #1]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d165      	bne.n	8006c98 <HAL_PCD_EP_DB_Transmit+0x748>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006be0:	4413      	add	r3, r2
 8006be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	00da      	lsls	r2, r3, #3
 8006bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bec:	4413      	add	r3, r2
 8006bee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006bf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c08:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c0a:	d91d      	bls.n	8006c48 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c10:	095b      	lsrs	r3, r3, #5
 8006c12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c18:	f003 031f 	and.w	r3, r3, #31
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d102      	bne.n	8006c26 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006c20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c22:	3b01      	subs	r3, #1
 8006c24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	029b      	lsls	r3, r3, #10
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	4313      	orrs	r3, r2
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c44:	801a      	strh	r2, [r3, #0]
 8006c46:	e041      	b.n	8006ccc <HAL_PCD_EP_DB_Transmit+0x77c>
 8006c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10a      	bne.n	8006c66 <HAL_PCD_EP_DB_Transmit+0x716>
 8006c50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c62:	801a      	strh	r2, [r3, #0]
 8006c64:	e032      	b.n	8006ccc <HAL_PCD_EP_DB_Transmit+0x77c>
 8006c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_PCD_EP_DB_Transmit+0x730>
 8006c7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	029b      	lsls	r3, r3, #10
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c94:	801a      	strh	r2, [r3, #0]
 8006c96:	e019      	b.n	8006ccc <HAL_PCD_EP_DB_Transmit+0x77c>
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	785b      	ldrb	r3, [r3, #1]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d115      	bne.n	8006ccc <HAL_PCD_EP_DB_Transmit+0x77c>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	461a      	mov	r2, r3
 8006cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cae:	4413      	add	r3, r2
 8006cb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	00da      	lsls	r2, r3, #3
 8006cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cba:	4413      	add	r3, r2
 8006cbc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006cc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	6959      	ldr	r1, [r3, #20]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	895a      	ldrh	r2, [r3, #10]
 8006cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f006 f84f 	bl	800cd80 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cfc:	82bb      	strh	r3, [r7, #20]
 8006cfe:	8abb      	ldrh	r3, [r7, #20]
 8006d00:	f083 0310 	eor.w	r3, r3, #16
 8006d04:	82bb      	strh	r3, [r7, #20]
 8006d06:	8abb      	ldrh	r3, [r7, #20]
 8006d08:	f083 0320 	eor.w	r3, r3, #32
 8006d0c:	82bb      	strh	r3, [r7, #20]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	441a      	add	r2, r3
 8006d1c:	8abb      	ldrh	r3, [r7, #20]
 8006d1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3790      	adds	r7, #144	@ 0x90
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	607b      	str	r3, [r7, #4]
 8006d46:	460b      	mov	r3, r1
 8006d48:	817b      	strh	r3, [r7, #10]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006d4e:	897b      	ldrh	r3, [r7, #10]
 8006d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00b      	beq.n	8006d72 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d5a:	897b      	ldrh	r3, [r7, #10]
 8006d5c:	f003 0207 	and.w	r2, r3, #7
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	00db      	lsls	r3, r3, #3
 8006d68:	3310      	adds	r3, #16
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	e009      	b.n	8006d86 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006d72:	897a      	ldrh	r2, [r7, #10]
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006d86:	893b      	ldrh	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d107      	bne.n	8006d9c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	80da      	strh	r2, [r3, #6]
 8006d9a:	e00b      	b.n	8006db4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	0c1b      	lsrs	r3, r3, #16
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f043 0301 	orr.w	r3, r3, #1
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f043 0302 	orr.w	r3, r3, #2
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
	...

08006e18 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e1c:	4b05      	ldr	r3, [pc, #20]	@ (8006e34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a04      	ldr	r2, [pc, #16]	@ (8006e34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e26:	6013      	str	r3, [r2, #0]
}
 8006e28:	bf00      	nop
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	58000400 	.word	0x58000400

08006e38 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006e3c:	4b04      	ldr	r3, [pc, #16]	@ (8006e50 <HAL_PWREx_GetVoltageRange+0x18>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	58000400 	.word	0x58000400

08006e54 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006e58:	4b05      	ldr	r3, [pc, #20]	@ (8006e70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	4a04      	ldr	r2, [pc, #16]	@ (8006e70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006e5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e62:	6053      	str	r3, [r2, #4]
}
 8006e64:	bf00      	nop
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	58000400 	.word	0x58000400

08006e74 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e86:	d101      	bne.n	8006e8c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e000      	b.n	8006e8e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <LL_RCC_HSE_Enable>:
{
 8006e98:	b480      	push	{r7}
 8006e9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ea6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006eaa:	6013      	str	r3, [r2, #0]
}
 8006eac:	bf00      	nop
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <LL_RCC_HSE_Disable>:
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ec8:	6013      	str	r3, [r2, #0]
}
 8006eca:	bf00      	nop
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <LL_RCC_HSE_IsReady>:
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ee2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ee6:	d101      	bne.n	8006eec <LL_RCC_HSE_IsReady+0x18>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e000      	b.n	8006eee <LL_RCC_HSE_IsReady+0x1a>
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <LL_RCC_HSI_Enable>:
{
 8006ef8:	b480      	push	{r7}
 8006efa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f0a:	6013      	str	r3, [r2, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <LL_RCC_HSI_Disable>:
{
 8006f16:	b480      	push	{r7}
 8006f18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f28:	6013      	str	r3, [r2, #0]
}
 8006f2a:	bf00      	nop
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <LL_RCC_HSI_IsReady>:
{
 8006f34:	b480      	push	{r7}
 8006f36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f46:	d101      	bne.n	8006f4c <LL_RCC_HSI_IsReady+0x18>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <LL_RCC_HSI_IsReady+0x1a>
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	061b      	lsls	r3, r3, #24
 8006f6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f72:	4313      	orrs	r3, r2
 8006f74:	604b      	str	r3, [r1, #4]
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <LL_RCC_HSI48_Enable>:
{
 8006f82:	b480      	push	{r7}
 8006f84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f92:	f043 0301 	orr.w	r3, r3, #1
 8006f96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006f9a:	bf00      	nop
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <LL_RCC_HSI48_Disable>:
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fb4:	f023 0301 	bic.w	r3, r3, #1
 8006fb8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006fbc:	bf00      	nop
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <LL_RCC_HSI48_IsReady>:
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d101      	bne.n	8006fde <LL_RCC_HSI48_IsReady+0x18>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <LL_RCC_HSI48_IsReady+0x1a>
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <LL_RCC_LSE_Enable>:
{
 8006fea:	b480      	push	{r7}
 8006fec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ffa:	f043 0301 	orr.w	r3, r3, #1
 8006ffe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007002:	bf00      	nop
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <LL_RCC_LSE_Disable>:
{
 800700c:	b480      	push	{r7}
 800700e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007018:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007024:	bf00      	nop
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <LL_RCC_LSE_EnableBypass>:
{
 800702e:	b480      	push	{r7}
 8007030:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800703a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800703e:	f043 0304 	orr.w	r3, r3, #4
 8007042:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007046:	bf00      	nop
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <LL_RCC_LSE_DisableBypass>:
{
 8007050:	b480      	push	{r7}
 8007052:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800705c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007060:	f023 0304 	bic.w	r3, r3, #4
 8007064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007068:	bf00      	nop
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <LL_RCC_LSE_IsReady>:
{
 8007072:	b480      	push	{r7}
 8007074:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007076:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800707a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b02      	cmp	r3, #2
 8007084:	d101      	bne.n	800708a <LL_RCC_LSE_IsReady+0x18>
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <LL_RCC_LSE_IsReady+0x1a>
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <LL_RCC_LSI1_Enable>:
{
 8007096:	b480      	push	{r7}
 8007098:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800709a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800709e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070a6:	f043 0301 	orr.w	r3, r3, #1
 80070aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80070ae:	bf00      	nop
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <LL_RCC_LSI1_Disable>:
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80070bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070c8:	f023 0301 	bic.w	r3, r3, #1
 80070cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80070d0:	bf00      	nop
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <LL_RCC_LSI1_IsReady>:
{
 80070da:	b480      	push	{r7}
 80070dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80070de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d101      	bne.n	80070f2 <LL_RCC_LSI1_IsReady+0x18>
 80070ee:	2301      	movs	r3, #1
 80070f0:	e000      	b.n	80070f4 <LL_RCC_LSI1_IsReady+0x1a>
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <LL_RCC_LSI2_Enable>:
{
 80070fe:	b480      	push	{r7}
 8007100:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800710a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800710e:	f043 0304 	orr.w	r3, r3, #4
 8007112:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007116:	bf00      	nop
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <LL_RCC_LSI2_Disable>:
{
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800712c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007130:	f023 0304 	bic.w	r3, r3, #4
 8007134:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007138:	bf00      	nop
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <LL_RCC_LSI2_IsReady>:
{
 8007142:	b480      	push	{r7}
 8007144:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800714a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800714e:	f003 0308 	and.w	r3, r3, #8
 8007152:	2b08      	cmp	r3, #8
 8007154:	d101      	bne.n	800715a <LL_RCC_LSI2_IsReady+0x18>
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <LL_RCC_LSI2_IsReady+0x1a>
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <LL_RCC_LSI2_SetTrimming>:
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800716e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007176:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	021b      	lsls	r3, r3, #8
 800717e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007182:	4313      	orrs	r3, r2
 8007184:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <LL_RCC_MSI_Enable>:
{
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071a2:	f043 0301 	orr.w	r3, r3, #1
 80071a6:	6013      	str	r3, [r2, #0]
}
 80071a8:	bf00      	nop
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <LL_RCC_MSI_Disable>:
{
 80071b2:	b480      	push	{r7}
 80071b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80071b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071c0:	f023 0301 	bic.w	r3, r3, #1
 80071c4:	6013      	str	r3, [r2, #0]
}
 80071c6:	bf00      	nop
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <LL_RCC_MSI_IsReady>:
{
 80071d0:	b480      	push	{r7}
 80071d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80071d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d101      	bne.n	80071e6 <LL_RCC_MSI_IsReady+0x16>
 80071e2:	2301      	movs	r3, #1
 80071e4:	e000      	b.n	80071e8 <LL_RCC_MSI_IsReady+0x18>
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <LL_RCC_MSI_SetRange>:
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80071fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007204:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4313      	orrs	r3, r2
 800720c:	600b      	str	r3, [r1, #0]
}
 800720e:	bf00      	nop
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <LL_RCC_MSI_GetRange>:
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800722a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2bb0      	cmp	r3, #176	@ 0xb0
 8007230:	d901      	bls.n	8007236 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007232:	23b0      	movs	r3, #176	@ 0xb0
 8007234:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007236:	687b      	ldr	r3, [r7, #4]
}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800724c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	021b      	lsls	r3, r3, #8
 800725a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800725e:	4313      	orrs	r3, r2
 8007260:	604b      	str	r3, [r1, #4]
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <LL_RCC_SetSysClkSource>:
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f023 0203 	bic.w	r2, r3, #3
 8007280:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4313      	orrs	r3, r2
 8007288:	608b      	str	r3, [r1, #8]
}
 800728a:	bf00      	nop
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <LL_RCC_GetSysClkSource>:
{
 8007296:	b480      	push	{r7}
 8007298:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800729a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 030c 	and.w	r3, r3, #12
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <LL_RCC_SetAHBPrescaler>:
{
 80072ae:	b480      	push	{r7}
 80072b0:	b083      	sub	sp, #12
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80072b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	608b      	str	r3, [r1, #8]
}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80072d6:	b480      	push	{r7}
 80072d8:	b083      	sub	sp, #12
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80072de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80072e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80072f6:	bf00      	nop
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <LL_RCC_SetAHB4Prescaler>:
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800730a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800730e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007312:	f023 020f 	bic.w	r2, r3, #15
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	091b      	lsrs	r3, r3, #4
 800731a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800731e:	4313      	orrs	r3, r2
 8007320:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <LL_RCC_SetAPB1Prescaler>:
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007342:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4313      	orrs	r3, r2
 800734a:	608b      	str	r3, [r1, #8]
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <LL_RCC_SetAPB2Prescaler>:
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800736a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4313      	orrs	r3, r2
 8007372:	608b      	str	r3, [r1, #8]
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <LL_RCC_GetAHBPrescaler>:
{
 8007380:	b480      	push	{r7}
 8007382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800738e:	4618      	mov	r0, r3
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <LL_RCC_GetAHB4Prescaler>:
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800739c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80073a4:	011b      	lsls	r3, r3, #4
 80073a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <LL_RCC_GetAPB1Prescaler>:
{
 80073b4:	b480      	push	{r7}
 80073b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80073b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <LL_RCC_GetAPB2Prescaler>:
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80073d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80073da:	4618      	mov	r0, r3
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80073e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073f6:	6013      	str	r3, [r2, #0]
}
 80073f8:	bf00      	nop
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8007402:	b480      	push	{r7}
 8007404:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007410:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007414:	6013      	str	r3, [r2, #0]
}
 8007416:	bf00      	nop
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800742e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007432:	d101      	bne.n	8007438 <LL_RCC_PLL_IsReady+0x18>
 8007434:	2301      	movs	r3, #1
 8007436:	e000      	b.n	800743a <LL_RCC_PLL_IsReady+0x1a>
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007444:	b480      	push	{r7}
 8007446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007448:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	0a1b      	lsrs	r3, r3, #8
 8007450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8007454:	4618      	mov	r0, r3
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800745e:	b480      	push	{r7}
 8007460:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800746c:	4618      	mov	r0, r3
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007476:	b480      	push	{r7}
 8007478:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800747a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8007484:	4618      	mov	r0, r3
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800748e:	b480      	push	{r7}
 8007490:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f003 0303 	and.w	r3, r3, #3
}
 800749c:	4618      	mov	r0, r3
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80074a6:	b480      	push	{r7}
 80074a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80074aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074b8:	d101      	bne.n	80074be <LL_RCC_IsActiveFlag_HPRE+0x18>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e000      	b.n	80074c0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80074ca:	b480      	push	{r7}
 80074cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80074ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80074d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074de:	d101      	bne.n	80074e4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80074e0:	2301      	movs	r3, #1
 80074e2:	e000      	b.n	80074e6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80074f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80074fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007504:	d101      	bne.n	800750a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007506:	2301      	movs	r3, #1
 8007508:	e000      	b.n	800750c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007516:	b480      	push	{r7}
 8007518:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800751a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007524:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007528:	d101      	bne.n	800752e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800752a:	2301      	movs	r3, #1
 800752c:	e000      	b.n	8007530 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800753a:	b480      	push	{r7}
 800753c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800753e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007548:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800754c:	d101      	bne.n	8007552 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800754e:	2301      	movs	r3, #1
 8007550:	e000      	b.n	8007554 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
	...

08007560 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007560:	b590      	push	{r4, r7, lr}
 8007562:	b08d      	sub	sp, #52	@ 0x34
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e363      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 808d 	beq.w	800769a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007580:	f7ff fe89 	bl	8007296 <LL_RCC_GetSysClkSource>
 8007584:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007586:	f7ff ff82 	bl	800748e <LL_RCC_PLL_GetMainSource>
 800758a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800758c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d005      	beq.n	800759e <HAL_RCC_OscConfig+0x3e>
 8007592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007594:	2b0c      	cmp	r3, #12
 8007596:	d147      	bne.n	8007628 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759a:	2b01      	cmp	r3, #1
 800759c:	d144      	bne.n	8007628 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e347      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80075ae:	f7ff fe34 	bl	800721a <LL_RCC_MSI_GetRange>
 80075b2:	4603      	mov	r3, r0
 80075b4:	429c      	cmp	r4, r3
 80075b6:	d914      	bls.n	80075e2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 fd2f 	bl	8008020 <RCC_SetFlashLatencyFromMSIRange>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e336      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fe0e 	bl	80071f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff fe32 	bl	8007244 <LL_RCC_MSI_SetCalibTrimming>
 80075e0:	e013      	b.n	800760a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff fe03 	bl	80071f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7ff fe27 	bl	8007244 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 fd10 	bl	8008020 <RCC_SetFlashLatencyFromMSIRange>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e317      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800760a:	f000 fcc9 	bl	8007fa0 <HAL_RCC_GetHCLKFreq>
 800760e:	4603      	mov	r3, r0
 8007610:	4aa4      	ldr	r2, [pc, #656]	@ (80078a4 <HAL_RCC_OscConfig+0x344>)
 8007612:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007614:	4ba4      	ldr	r3, [pc, #656]	@ (80078a8 <HAL_RCC_OscConfig+0x348>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4618      	mov	r0, r3
 800761a:	f7fb fdbb 	bl	8003194 <HAL_InitTick>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d039      	beq.n	8007698 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e308      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d01e      	beq.n	800766e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007630:	f7ff fdb0 	bl	8007194 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007634:	f7fb fdfc 	bl	8003230 <HAL_GetTick>
 8007638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800763c:	f7fb fdf8 	bl	8003230 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b02      	cmp	r3, #2
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e2f5      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800764e:	f7ff fdbf 	bl	80071d0 <LL_RCC_MSI_IsReady>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d0f1      	beq.n	800763c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765c:	4618      	mov	r0, r3
 800765e:	f7ff fdc8 	bl	80071f2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff fdec 	bl	8007244 <LL_RCC_MSI_SetCalibTrimming>
 800766c:	e015      	b.n	800769a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800766e:	f7ff fda0 	bl	80071b2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007672:	f7fb fddd 	bl	8003230 <HAL_GetTick>
 8007676:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007678:	e008      	b.n	800768c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800767a:	f7fb fdd9 	bl	8003230 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	2b02      	cmp	r3, #2
 8007686:	d901      	bls.n	800768c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e2d6      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800768c:	f7ff fda0 	bl	80071d0 <LL_RCC_MSI_IsReady>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1f1      	bne.n	800767a <HAL_RCC_OscConfig+0x11a>
 8007696:	e000      	b.n	800769a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007698:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d047      	beq.n	8007736 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076a6:	f7ff fdf6 	bl	8007296 <LL_RCC_GetSysClkSource>
 80076aa:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076ac:	f7ff feef 	bl	800748e <LL_RCC_PLL_GetMainSource>
 80076b0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d005      	beq.n	80076c4 <HAL_RCC_OscConfig+0x164>
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	2b0c      	cmp	r3, #12
 80076bc:	d108      	bne.n	80076d0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d105      	bne.n	80076d0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d134      	bne.n	8007736 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e2b4      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076d8:	d102      	bne.n	80076e0 <HAL_RCC_OscConfig+0x180>
 80076da:	f7ff fbdd 	bl	8006e98 <LL_RCC_HSE_Enable>
 80076de:	e001      	b.n	80076e4 <HAL_RCC_OscConfig+0x184>
 80076e0:	f7ff fbe9 	bl	8006eb6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d012      	beq.n	8007712 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ec:	f7fb fda0 	bl	8003230 <HAL_GetTick>
 80076f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80076f2:	e008      	b.n	8007706 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076f4:	f7fb fd9c 	bl	8003230 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	2b64      	cmp	r3, #100	@ 0x64
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e299      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007706:	f7ff fbe5 	bl	8006ed4 <LL_RCC_HSE_IsReady>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0f1      	beq.n	80076f4 <HAL_RCC_OscConfig+0x194>
 8007710:	e011      	b.n	8007736 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007712:	f7fb fd8d 	bl	8003230 <HAL_GetTick>
 8007716:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007718:	e008      	b.n	800772c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800771a:	f7fb fd89 	bl	8003230 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b64      	cmp	r3, #100	@ 0x64
 8007726:	d901      	bls.n	800772c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e286      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800772c:	f7ff fbd2 	bl	8006ed4 <LL_RCC_HSE_IsReady>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f1      	bne.n	800771a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d04c      	beq.n	80077dc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007742:	f7ff fda8 	bl	8007296 <LL_RCC_GetSysClkSource>
 8007746:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007748:	f7ff fea1 	bl	800748e <LL_RCC_PLL_GetMainSource>
 800774c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	2b04      	cmp	r3, #4
 8007752:	d005      	beq.n	8007760 <HAL_RCC_OscConfig+0x200>
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	2b0c      	cmp	r3, #12
 8007758:	d10e      	bne.n	8007778 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d10b      	bne.n	8007778 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e266      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff fbf1 	bl	8006f58 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007776:	e031      	b.n	80077dc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d019      	beq.n	80077b4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007780:	f7ff fbba 	bl	8006ef8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007784:	f7fb fd54 	bl	8003230 <HAL_GetTick>
 8007788:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800778a:	e008      	b.n	800779e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800778c:	f7fb fd50 	bl	8003230 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d901      	bls.n	800779e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e24d      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800779e:	f7ff fbc9 	bl	8006f34 <LL_RCC_HSI_IsReady>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0f1      	beq.n	800778c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff fbd3 	bl	8006f58 <LL_RCC_HSI_SetCalibTrimming>
 80077b2:	e013      	b.n	80077dc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077b4:	f7ff fbaf 	bl	8006f16 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b8:	f7fb fd3a 	bl	8003230 <HAL_GetTick>
 80077bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80077be:	e008      	b.n	80077d2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077c0:	f7fb fd36 	bl	8003230 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d901      	bls.n	80077d2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e233      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80077d2:	f7ff fbaf 	bl	8006f34 <LL_RCC_HSI_IsReady>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f1      	bne.n	80077c0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0308 	and.w	r3, r3, #8
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d106      	bne.n	80077f6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 80a3 	beq.w	800793c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d076      	beq.n	80078ec <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0310 	and.w	r3, r3, #16
 8007806:	2b00      	cmp	r3, #0
 8007808:	d046      	beq.n	8007898 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800780a:	f7ff fc66 	bl	80070da <LL_RCC_LSI1_IsReady>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d113      	bne.n	800783c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007814:	f7ff fc3f 	bl	8007096 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007818:	f7fb fd0a 	bl	8003230 <HAL_GetTick>
 800781c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800781e:	e008      	b.n	8007832 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007820:	f7fb fd06 	bl	8003230 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b02      	cmp	r3, #2
 800782c:	d901      	bls.n	8007832 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e203      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007832:	f7ff fc52 	bl	80070da <LL_RCC_LSI1_IsReady>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0f1      	beq.n	8007820 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800783c:	f7ff fc5f 	bl	80070fe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007840:	f7fb fcf6 	bl	8003230 <HAL_GetTick>
 8007844:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007846:	e008      	b.n	800785a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007848:	f7fb fcf2 	bl	8003230 <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	2b03      	cmp	r3, #3
 8007854:	d901      	bls.n	800785a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e1ef      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800785a:	f7ff fc72 	bl	8007142 <LL_RCC_LSI2_IsReady>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0f1      	beq.n	8007848 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff fc7c 	bl	8007166 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800786e:	f7ff fc23 	bl	80070b8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007872:	f7fb fcdd 	bl	8003230 <HAL_GetTick>
 8007876:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007878:	e008      	b.n	800788c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800787a:	f7fb fcd9 	bl	8003230 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d901      	bls.n	800788c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e1d6      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800788c:	f7ff fc25 	bl	80070da <LL_RCC_LSI1_IsReady>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1f1      	bne.n	800787a <HAL_RCC_OscConfig+0x31a>
 8007896:	e051      	b.n	800793c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007898:	f7ff fbfd 	bl	8007096 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800789c:	f7fb fcc8 	bl	8003230 <HAL_GetTick>
 80078a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80078a2:	e00c      	b.n	80078be <HAL_RCC_OscConfig+0x35e>
 80078a4:	20000008 	.word	0x20000008
 80078a8:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80078ac:	f7fb fcc0 	bl	8003230 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e1bd      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80078be:	f7ff fc0c 	bl	80070da <LL_RCC_LSI1_IsReady>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d0f1      	beq.n	80078ac <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80078c8:	f7ff fc2a 	bl	8007120 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80078cc:	e008      	b.n	80078e0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80078ce:	f7fb fcaf 	bl	8003230 <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d901      	bls.n	80078e0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e1ac      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80078e0:	f7ff fc2f 	bl	8007142 <LL_RCC_LSI2_IsReady>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1f1      	bne.n	80078ce <HAL_RCC_OscConfig+0x36e>
 80078ea:	e027      	b.n	800793c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80078ec:	f7ff fc18 	bl	8007120 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f0:	f7fb fc9e 	bl	8003230 <HAL_GetTick>
 80078f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80078f6:	e008      	b.n	800790a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80078f8:	f7fb fc9a 	bl	8003230 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b03      	cmp	r3, #3
 8007904:	d901      	bls.n	800790a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e197      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800790a:	f7ff fc1a 	bl	8007142 <LL_RCC_LSI2_IsReady>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1f1      	bne.n	80078f8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007914:	f7ff fbd0 	bl	80070b8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007918:	f7fb fc8a 	bl	8003230 <HAL_GetTick>
 800791c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800791e:	e008      	b.n	8007932 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007920:	f7fb fc86 	bl	8003230 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e183      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007932:	f7ff fbd2 	bl	80070da <LL_RCC_LSI1_IsReady>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1f1      	bne.n	8007920 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b00      	cmp	r3, #0
 8007946:	d05b      	beq.n	8007a00 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007948:	4ba7      	ldr	r3, [pc, #668]	@ (8007be8 <HAL_RCC_OscConfig+0x688>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007950:	2b00      	cmp	r3, #0
 8007952:	d114      	bne.n	800797e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007954:	f7ff fa60 	bl	8006e18 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007958:	f7fb fc6a 	bl	8003230 <HAL_GetTick>
 800795c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800795e:	e008      	b.n	8007972 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007960:	f7fb fc66 	bl	8003230 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	2b02      	cmp	r3, #2
 800796c:	d901      	bls.n	8007972 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e163      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007972:	4b9d      	ldr	r3, [pc, #628]	@ (8007be8 <HAL_RCC_OscConfig+0x688>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0f0      	beq.n	8007960 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d102      	bne.n	800798c <HAL_RCC_OscConfig+0x42c>
 8007986:	f7ff fb30 	bl	8006fea <LL_RCC_LSE_Enable>
 800798a:	e00c      	b.n	80079a6 <HAL_RCC_OscConfig+0x446>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	2b05      	cmp	r3, #5
 8007992:	d104      	bne.n	800799e <HAL_RCC_OscConfig+0x43e>
 8007994:	f7ff fb4b 	bl	800702e <LL_RCC_LSE_EnableBypass>
 8007998:	f7ff fb27 	bl	8006fea <LL_RCC_LSE_Enable>
 800799c:	e003      	b.n	80079a6 <HAL_RCC_OscConfig+0x446>
 800799e:	f7ff fb35 	bl	800700c <LL_RCC_LSE_Disable>
 80079a2:	f7ff fb55 	bl	8007050 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d014      	beq.n	80079d8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ae:	f7fb fc3f 	bl	8003230 <HAL_GetTick>
 80079b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80079b4:	e00a      	b.n	80079cc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079b6:	f7fb fc3b 	bl	8003230 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d901      	bls.n	80079cc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e136      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80079cc:	f7ff fb51 	bl	8007072 <LL_RCC_LSE_IsReady>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d0ef      	beq.n	80079b6 <HAL_RCC_OscConfig+0x456>
 80079d6:	e013      	b.n	8007a00 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079d8:	f7fb fc2a 	bl	8003230 <HAL_GetTick>
 80079dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80079de:	e00a      	b.n	80079f6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079e0:	f7fb fc26 	bl	8003230 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d901      	bls.n	80079f6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e121      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80079f6:	f7ff fb3c 	bl	8007072 <LL_RCC_LSE_IsReady>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1ef      	bne.n	80079e0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d02c      	beq.n	8007a66 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d014      	beq.n	8007a3e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a14:	f7ff fab5 	bl	8006f82 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a18:	f7fb fc0a 	bl	8003230 <HAL_GetTick>
 8007a1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a20:	f7fb fc06 	bl	8003230 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e103      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007a32:	f7ff fac8 	bl	8006fc6 <LL_RCC_HSI48_IsReady>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d0f1      	beq.n	8007a20 <HAL_RCC_OscConfig+0x4c0>
 8007a3c:	e013      	b.n	8007a66 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a3e:	f7ff fab1 	bl	8006fa4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a42:	f7fb fbf5 	bl	8003230 <HAL_GetTick>
 8007a46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007a48:	e008      	b.n	8007a5c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a4a:	f7fb fbf1 	bl	8003230 <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d901      	bls.n	8007a5c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e0ee      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007a5c:	f7ff fab3 	bl	8006fc6 <LL_RCC_HSI48_IsReady>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1f1      	bne.n	8007a4a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 80e4 	beq.w	8007c38 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a70:	f7ff fc11 	bl	8007296 <LL_RCC_GetSysClkSource>
 8007a74:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8007a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	f040 80b4 	bne.w	8007bf0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f003 0203 	and.w	r2, r3, #3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d123      	bne.n	8007ade <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d11c      	bne.n	8007ade <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	0a1b      	lsrs	r3, r3, #8
 8007aa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d114      	bne.n	8007ade <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d10d      	bne.n	8007ade <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d106      	bne.n	8007ade <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d05d      	beq.n	8007b9a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	2b0c      	cmp	r3, #12
 8007ae2:	d058      	beq.n	8007b96 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e0a1      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007af6:	f7ff fc84 	bl	8007402 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007afa:	f7fb fb99 	bl	8003230 <HAL_GetTick>
 8007afe:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b00:	e008      	b.n	8007b14 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b02:	f7fb fb95 	bl	8003230 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d901      	bls.n	8007b14 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e092      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1ef      	bne.n	8007b02 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b26:	68da      	ldr	r2, [r3, #12]
 8007b28:	4b30      	ldr	r3, [pc, #192]	@ (8007bec <HAL_RCC_OscConfig+0x68c>)
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007b34:	4311      	orrs	r1, r2
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007b3a:	0212      	lsls	r2, r2, #8
 8007b3c:	4311      	orrs	r1, r2
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007b42:	4311      	orrs	r1, r2
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007b48:	4311      	orrs	r1, r2
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007b58:	f7ff fc44 	bl	80073e4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b6c:	f7fb fb60 	bl	8003230 <HAL_GetTick>
 8007b70:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b74:	f7fb fb5c 	bl	8003230 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e059      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d0ef      	beq.n	8007b74 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b94:	e050      	b.n	8007c38 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e04f      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d147      	bne.n	8007c38 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007ba8:	f7ff fc1c 	bl	80073e4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007bbc:	f7fb fb38 	bl	8003230 <HAL_GetTick>
 8007bc0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bc2:	e008      	b.n	8007bd6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bc4:	f7fb fb34 	bl	8003230 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e031      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d0ef      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x664>
 8007be4:	e028      	b.n	8007c38 <HAL_RCC_OscConfig+0x6d8>
 8007be6:	bf00      	nop
 8007be8:	58000400 	.word	0x58000400
 8007bec:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	2b0c      	cmp	r3, #12
 8007bf4:	d01e      	beq.n	8007c34 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bf6:	f7ff fc04 	bl	8007402 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bfa:	f7fb fb19 	bl	8003230 <HAL_GetTick>
 8007bfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c00:	e008      	b.n	8007c14 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c02:	f7fb fb15 	bl	8003230 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d901      	bls.n	8007c14 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e012      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1ef      	bne.n	8007c02 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c2c:	4b05      	ldr	r3, [pc, #20]	@ (8007c44 <HAL_RCC_OscConfig+0x6e4>)
 8007c2e:	4013      	ands	r3, r2
 8007c30:	60cb      	str	r3, [r1, #12]
 8007c32:	e001      	b.n	8007c38 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e000      	b.n	8007c3a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3734      	adds	r7, #52	@ 0x34
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd90      	pop	{r4, r7, pc}
 8007c42:	bf00      	nop
 8007c44:	eefefffc 	.word	0xeefefffc

08007c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e12d      	b.n	8007eb8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c5c:	4b98      	ldr	r3, [pc, #608]	@ (8007ec0 <HAL_RCC_ClockConfig+0x278>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d91b      	bls.n	8007ca2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c6a:	4b95      	ldr	r3, [pc, #596]	@ (8007ec0 <HAL_RCC_ClockConfig+0x278>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f023 0207 	bic.w	r2, r3, #7
 8007c72:	4993      	ldr	r1, [pc, #588]	@ (8007ec0 <HAL_RCC_ClockConfig+0x278>)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c7a:	f7fb fad9 	bl	8003230 <HAL_GetTick>
 8007c7e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c80:	e008      	b.n	8007c94 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007c82:	f7fb fad5 	bl	8003230 <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d901      	bls.n	8007c94 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e111      	b.n	8007eb8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c94:	4b8a      	ldr	r3, [pc, #552]	@ (8007ec0 <HAL_RCC_ClockConfig+0x278>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0307 	and.w	r3, r3, #7
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d1ef      	bne.n	8007c82 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d016      	beq.n	8007cdc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff fafb 	bl	80072ae <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007cb8:	f7fb faba 	bl	8003230 <HAL_GetTick>
 8007cbc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007cc0:	f7fb fab6 	bl	8003230 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d901      	bls.n	8007cd2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e0f2      	b.n	8007eb8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007cd2:	f7ff fbe8 	bl	80074a6 <LL_RCC_IsActiveFlag_HPRE>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0f1      	beq.n	8007cc0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0320 	and.w	r3, r3, #32
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d016      	beq.n	8007d16 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	695b      	ldr	r3, [r3, #20]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7ff faf2 	bl	80072d6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007cf2:	f7fb fa9d 	bl	8003230 <HAL_GetTick>
 8007cf6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007cf8:	e008      	b.n	8007d0c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007cfa:	f7fb fa99 	bl	8003230 <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d901      	bls.n	8007d0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e0d5      	b.n	8007eb8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007d0c:	f7ff fbdd 	bl	80074ca <LL_RCC_IsActiveFlag_C2HPRE>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0f1      	beq.n	8007cfa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d016      	beq.n	8007d50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7ff faeb 	bl	8007302 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007d2c:	f7fb fa80 	bl	8003230 <HAL_GetTick>
 8007d30:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007d32:	e008      	b.n	8007d46 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007d34:	f7fb fa7c 	bl	8003230 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d901      	bls.n	8007d46 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e0b8      	b.n	8007eb8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007d46:	f7ff fbd3 	bl	80074f0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d0f1      	beq.n	8007d34 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0304 	and.w	r3, r3, #4
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d016      	beq.n	8007d8a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7ff fae5 	bl	8007330 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007d66:	f7fb fa63 	bl	8003230 <HAL_GetTick>
 8007d6a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007d6c:	e008      	b.n	8007d80 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007d6e:	f7fb fa5f 	bl	8003230 <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d901      	bls.n	8007d80 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e09b      	b.n	8007eb8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007d80:	f7ff fbc9 	bl	8007516 <LL_RCC_IsActiveFlag_PPRE1>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0f1      	beq.n	8007d6e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0308 	and.w	r3, r3, #8
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d017      	beq.n	8007dc6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff fadb 	bl	8007358 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007da2:	f7fb fa45 	bl	8003230 <HAL_GetTick>
 8007da6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007da8:	e008      	b.n	8007dbc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007daa:	f7fb fa41 	bl	8003230 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d901      	bls.n	8007dbc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e07d      	b.n	8007eb8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007dbc:	f7ff fbbd 	bl	800753a <LL_RCC_IsActiveFlag_PPRE2>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d0f1      	beq.n	8007daa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d043      	beq.n	8007e5a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d106      	bne.n	8007de8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007dda:	f7ff f87b 	bl	8006ed4 <LL_RCC_HSE_IsReady>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d11e      	bne.n	8007e22 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e067      	b.n	8007eb8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	d106      	bne.n	8007dfe <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007df0:	f7ff fb16 	bl	8007420 <LL_RCC_PLL_IsReady>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d113      	bne.n	8007e22 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e05c      	b.n	8007eb8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d106      	bne.n	8007e14 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007e06:	f7ff f9e3 	bl	80071d0 <LL_RCC_MSI_IsReady>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d108      	bne.n	8007e22 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e051      	b.n	8007eb8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007e14:	f7ff f88e 	bl	8006f34 <LL_RCC_HSI_IsReady>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e04a      	b.n	8007eb8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff fa21 	bl	800726e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e2c:	f7fb fa00 	bl	8003230 <HAL_GetTick>
 8007e30:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e32:	e00a      	b.n	8007e4a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e34:	f7fb f9fc 	bl	8003230 <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d901      	bls.n	8007e4a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e036      	b.n	8007eb8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e4a:	f7ff fa24 	bl	8007296 <LL_RCC_GetSysClkSource>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d1ec      	bne.n	8007e34 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e5a:	4b19      	ldr	r3, [pc, #100]	@ (8007ec0 <HAL_RCC_ClockConfig+0x278>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0307 	and.w	r3, r3, #7
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d21b      	bcs.n	8007ea0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e68:	4b15      	ldr	r3, [pc, #84]	@ (8007ec0 <HAL_RCC_ClockConfig+0x278>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f023 0207 	bic.w	r2, r3, #7
 8007e70:	4913      	ldr	r1, [pc, #76]	@ (8007ec0 <HAL_RCC_ClockConfig+0x278>)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e78:	f7fb f9da 	bl	8003230 <HAL_GetTick>
 8007e7c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007e80:	f7fb f9d6 	bl	8003230 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e012      	b.n	8007eb8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e92:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec0 <HAL_RCC_ClockConfig+0x278>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0307 	and.w	r3, r3, #7
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d1ef      	bne.n	8007e80 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007ea0:	f000 f87e 	bl	8007fa0 <HAL_RCC_GetHCLKFreq>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	4a07      	ldr	r2, [pc, #28]	@ (8007ec4 <HAL_RCC_ClockConfig+0x27c>)
 8007ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007eaa:	f7fb f9cd 	bl	8003248 <HAL_GetTickPrio>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fb f96f 	bl	8003194 <HAL_InitTick>
 8007eb6:	4603      	mov	r3, r0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	58004000 	.word	0x58004000
 8007ec4:	20000008 	.word	0x20000008

08007ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ec8:	b590      	push	{r4, r7, lr}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ece:	f7ff f9e2 	bl	8007296 <LL_RCC_GetSysClkSource>
 8007ed2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007eda:	f7ff f99e 	bl	800721a <LL_RCC_MSI_GetRange>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	091b      	lsrs	r3, r3, #4
 8007ee2:	f003 030f 	and.w	r3, r3, #15
 8007ee6:	4a2b      	ldr	r2, [pc, #172]	@ (8007f94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	e04b      	b.n	8007f88 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b04      	cmp	r3, #4
 8007ef4:	d102      	bne.n	8007efc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007ef6:	4b28      	ldr	r3, [pc, #160]	@ (8007f98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	e045      	b.n	8007f88 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b08      	cmp	r3, #8
 8007f00:	d10a      	bne.n	8007f18 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007f02:	f7fe ffb7 	bl	8006e74 <LL_RCC_HSE_IsEnabledDiv2>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d102      	bne.n	8007f12 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007f0c:	4b22      	ldr	r3, [pc, #136]	@ (8007f98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	e03a      	b.n	8007f88 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007f12:	4b22      	ldr	r3, [pc, #136]	@ (8007f9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	e037      	b.n	8007f88 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007f18:	f7ff fab9 	bl	800748e <LL_RCC_PLL_GetMainSource>
 8007f1c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d003      	beq.n	8007f2c <HAL_RCC_GetSysClockFreq+0x64>
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d003      	beq.n	8007f32 <HAL_RCC_GetSysClockFreq+0x6a>
 8007f2a:	e00d      	b.n	8007f48 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8007f98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007f2e:	60bb      	str	r3, [r7, #8]
        break;
 8007f30:	e015      	b.n	8007f5e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007f32:	f7fe ff9f 	bl	8006e74 <LL_RCC_HSE_IsEnabledDiv2>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d102      	bne.n	8007f42 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007f3c:	4b16      	ldr	r3, [pc, #88]	@ (8007f98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007f3e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007f40:	e00d      	b.n	8007f5e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8007f42:	4b16      	ldr	r3, [pc, #88]	@ (8007f9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8007f44:	60bb      	str	r3, [r7, #8]
        break;
 8007f46:	e00a      	b.n	8007f5e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007f48:	f7ff f967 	bl	800721a <LL_RCC_MSI_GetRange>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	091b      	lsrs	r3, r3, #4
 8007f50:	f003 030f 	and.w	r3, r3, #15
 8007f54:	4a0f      	ldr	r2, [pc, #60]	@ (8007f94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f5a:	60bb      	str	r3, [r7, #8]
        break;
 8007f5c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007f5e:	f7ff fa71 	bl	8007444 <LL_RCC_PLL_GetN>
 8007f62:	4602      	mov	r2, r0
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	fb03 f402 	mul.w	r4, r3, r2
 8007f6a:	f7ff fa84 	bl	8007476 <LL_RCC_PLL_GetDivider>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	091b      	lsrs	r3, r3, #4
 8007f72:	3301      	adds	r3, #1
 8007f74:	fbb4 f4f3 	udiv	r4, r4, r3
 8007f78:	f7ff fa71 	bl	800745e <LL_RCC_PLL_GetR>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	0f5b      	lsrs	r3, r3, #29
 8007f80:	3301      	adds	r3, #1
 8007f82:	fbb4 f3f3 	udiv	r3, r4, r3
 8007f86:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007f88:	68fb      	ldr	r3, [r7, #12]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd90      	pop	{r4, r7, pc}
 8007f92:	bf00      	nop
 8007f94:	08016764 	.word	0x08016764
 8007f98:	00f42400 	.word	0x00f42400
 8007f9c:	01e84800 	.word	0x01e84800

08007fa0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fa0:	b598      	push	{r3, r4, r7, lr}
 8007fa2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007fa4:	f7ff ff90 	bl	8007ec8 <HAL_RCC_GetSysClockFreq>
 8007fa8:	4604      	mov	r4, r0
 8007faa:	f7ff f9e9 	bl	8007380 <LL_RCC_GetAHBPrescaler>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	091b      	lsrs	r3, r3, #4
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	4a03      	ldr	r2, [pc, #12]	@ (8007fc4 <HAL_RCC_GetHCLKFreq+0x24>)
 8007fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fbc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	bd98      	pop	{r3, r4, r7, pc}
 8007fc4:	08016704 	.word	0x08016704

08007fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fc8:	b598      	push	{r3, r4, r7, lr}
 8007fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007fcc:	f7ff ffe8 	bl	8007fa0 <HAL_RCC_GetHCLKFreq>
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	f7ff f9ef 	bl	80073b4 <LL_RCC_GetAPB1Prescaler>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	0a1b      	lsrs	r3, r3, #8
 8007fda:	f003 0307 	and.w	r3, r3, #7
 8007fde:	4a04      	ldr	r2, [pc, #16]	@ (8007ff0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fe4:	f003 031f 	and.w	r3, r3, #31
 8007fe8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	bd98      	pop	{r3, r4, r7, pc}
 8007ff0:	08016744 	.word	0x08016744

08007ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ff4:	b598      	push	{r3, r4, r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007ff8:	f7ff ffd2 	bl	8007fa0 <HAL_RCC_GetHCLKFreq>
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	f7ff f9e5 	bl	80073cc <LL_RCC_GetAPB2Prescaler>
 8008002:	4603      	mov	r3, r0
 8008004:	0adb      	lsrs	r3, r3, #11
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	4a04      	ldr	r2, [pc, #16]	@ (800801c <HAL_RCC_GetPCLK2Freq+0x28>)
 800800c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008010:	f003 031f 	and.w	r3, r3, #31
 8008014:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008018:	4618      	mov	r0, r3
 800801a:	bd98      	pop	{r3, r4, r7, pc}
 800801c:	08016744 	.word	0x08016744

08008020 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008020:	b590      	push	{r4, r7, lr}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2bb0      	cmp	r3, #176	@ 0xb0
 800802c:	d903      	bls.n	8008036 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800802e:	4b15      	ldr	r3, [pc, #84]	@ (8008084 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008032:	60fb      	str	r3, [r7, #12]
 8008034:	e007      	b.n	8008046 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	091b      	lsrs	r3, r3, #4
 800803a:	f003 030f 	and.w	r3, r3, #15
 800803e:	4a11      	ldr	r2, [pc, #68]	@ (8008084 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008044:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008046:	f7ff f9a7 	bl	8007398 <LL_RCC_GetAHB4Prescaler>
 800804a:	4603      	mov	r3, r0
 800804c:	091b      	lsrs	r3, r3, #4
 800804e:	f003 030f 	and.w	r3, r3, #15
 8008052:	4a0d      	ldr	r2, [pc, #52]	@ (8008088 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	fbb2 f3f3 	udiv	r3, r2, r3
 800805e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	4a0a      	ldr	r2, [pc, #40]	@ (800808c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008064:	fba2 2303 	umull	r2, r3, r2, r3
 8008068:	0c9c      	lsrs	r4, r3, #18
 800806a:	f7fe fee5 	bl	8006e38 <HAL_PWREx_GetVoltageRange>
 800806e:	4603      	mov	r3, r0
 8008070:	4619      	mov	r1, r3
 8008072:	4620      	mov	r0, r4
 8008074:	f000 f80c 	bl	8008090 <RCC_SetFlashLatency>
 8008078:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	bd90      	pop	{r4, r7, pc}
 8008082:	bf00      	nop
 8008084:	08016764 	.word	0x08016764
 8008088:	08016704 	.word	0x08016704
 800808c:	431bde83 	.word	0x431bde83

08008090 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008090:	b590      	push	{r4, r7, lr}
 8008092:	b093      	sub	sp, #76	@ 0x4c
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800809a:	4b37      	ldr	r3, [pc, #220]	@ (8008178 <RCC_SetFlashLatency+0xe8>)
 800809c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80080a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80080a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80080a6:	4a35      	ldr	r2, [pc, #212]	@ (800817c <RCC_SetFlashLatency+0xec>)
 80080a8:	f107 031c 	add.w	r3, r7, #28
 80080ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80080ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80080b2:	4b33      	ldr	r3, [pc, #204]	@ (8008180 <RCC_SetFlashLatency+0xf0>)
 80080b4:	f107 040c 	add.w	r4, r7, #12
 80080b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80080ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80080be:	2300      	movs	r3, #0
 80080c0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080c8:	d11a      	bne.n	8008100 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80080ca:	2300      	movs	r3, #0
 80080cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80080ce:	e013      	b.n	80080f8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80080d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	3348      	adds	r3, #72	@ 0x48
 80080d6:	443b      	add	r3, r7
 80080d8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d807      	bhi.n	80080f2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80080e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	3348      	adds	r3, #72	@ 0x48
 80080e8:	443b      	add	r3, r7
 80080ea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80080ee:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80080f0:	e020      	b.n	8008134 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80080f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080f4:	3301      	adds	r3, #1
 80080f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80080f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d9e8      	bls.n	80080d0 <RCC_SetFlashLatency+0x40>
 80080fe:	e019      	b.n	8008134 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008100:	2300      	movs	r3, #0
 8008102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008104:	e013      	b.n	800812e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	3348      	adds	r3, #72	@ 0x48
 800810c:	443b      	add	r3, r7
 800810e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	429a      	cmp	r2, r3
 8008116:	d807      	bhi.n	8008128 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	3348      	adds	r3, #72	@ 0x48
 800811e:	443b      	add	r3, r7
 8008120:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008124:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8008126:	e005      	b.n	8008134 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800812a:	3301      	adds	r3, #1
 800812c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800812e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008130:	2b02      	cmp	r3, #2
 8008132:	d9e8      	bls.n	8008106 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8008134:	4b13      	ldr	r3, [pc, #76]	@ (8008184 <RCC_SetFlashLatency+0xf4>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f023 0207 	bic.w	r2, r3, #7
 800813c:	4911      	ldr	r1, [pc, #68]	@ (8008184 <RCC_SetFlashLatency+0xf4>)
 800813e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008140:	4313      	orrs	r3, r2
 8008142:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008144:	f7fb f874 	bl	8003230 <HAL_GetTick>
 8008148:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800814a:	e008      	b.n	800815e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800814c:	f7fb f870 	bl	8003230 <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	2b02      	cmp	r3, #2
 8008158:	d901      	bls.n	800815e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e007      	b.n	800816e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800815e:	4b09      	ldr	r3, [pc, #36]	@ (8008184 <RCC_SetFlashLatency+0xf4>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008168:	429a      	cmp	r2, r3
 800816a:	d1ef      	bne.n	800814c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	374c      	adds	r7, #76	@ 0x4c
 8008172:	46bd      	mov	sp, r7
 8008174:	bd90      	pop	{r4, r7, pc}
 8008176:	bf00      	nop
 8008178:	08015938 	.word	0x08015938
 800817c:	08015948 	.word	0x08015948
 8008180:	08015954 	.word	0x08015954
 8008184:	58004000 	.word	0x58004000

08008188 <LL_RCC_LSE_IsEnabled>:
{
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800818c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <LL_RCC_LSE_IsEnabled+0x18>
 800819c:	2301      	movs	r3, #1
 800819e:	e000      	b.n	80081a2 <LL_RCC_LSE_IsEnabled+0x1a>
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <LL_RCC_LSE_IsReady>:
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80081b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d101      	bne.n	80081c4 <LL_RCC_LSE_IsReady+0x18>
 80081c0:	2301      	movs	r3, #1
 80081c2:	e000      	b.n	80081c6 <LL_RCC_LSE_IsReady+0x1a>
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <LL_RCC_SetRFWKPClockSource>:
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80081d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80081e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <LL_RCC_SetSMPSClockSource>:
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8008204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800820a:	f023 0203 	bic.w	r2, r3, #3
 800820e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4313      	orrs	r3, r2
 8008216:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <LL_RCC_SetSMPSPrescaler>:
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800822c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008232:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008236:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4313      	orrs	r3, r2
 800823e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <LL_RCC_SetUSARTClockSource>:
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800825c:	f023 0203 	bic.w	r2, r3, #3
 8008260:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4313      	orrs	r3, r2
 8008268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <LL_RCC_SetLPUARTClockSource>:
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008288:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800828c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4313      	orrs	r3, r2
 8008294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <LL_RCC_SetI2CClockSource>:
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80082ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	091b      	lsrs	r3, r3, #4
 80082b8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80082bc:	43db      	mvns	r3, r3
 80082be:	401a      	ands	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	011b      	lsls	r3, r3, #4
 80082c4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80082c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082cc:	4313      	orrs	r3, r2
 80082ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <LL_RCC_SetLPTIMClockSource>:
{
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80082e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	0c1b      	lsrs	r3, r3, #16
 80082f2:	041b      	lsls	r3, r3, #16
 80082f4:	43db      	mvns	r3, r3
 80082f6:	401a      	ands	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	041b      	lsls	r3, r3, #16
 80082fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008300:	4313      	orrs	r3, r2
 8008302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <LL_RCC_SetSAIClockSource>:
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800831a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800831e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008322:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008326:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4313      	orrs	r3, r2
 800832e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <LL_RCC_SetRNGClockSource>:
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800834a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800834e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008352:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4313      	orrs	r3, r2
 800835a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800835e:	bf00      	nop
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <LL_RCC_SetCLK48ClockSource>:
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800837a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800837e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4313      	orrs	r3, r2
 8008386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <LL_RCC_SetUSBClockSource>:
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b082      	sub	sp, #8
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7ff ffe3 	bl	800836a <LL_RCC_SetCLK48ClockSource>
}
 80083a4:	bf00      	nop
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <LL_RCC_SetADCClockSource>:
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80083b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083bc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80083c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <LL_RCC_SetRTCClockSource>:
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80083e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80083ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <LL_RCC_GetRTCClockSource>:
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800840c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008410:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8008414:	4618      	mov	r0, r3
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <LL_RCC_ForceBackupDomainReset>:
{
 800841e:	b480      	push	{r7}
 8008420:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800842a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800842e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008432:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008436:	bf00      	nop
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800844c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008458:	bf00      	nop
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <LL_RCC_PLLSAI1_Enable>:
{
 8008462:	b480      	push	{r7}
 8008464:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008470:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008474:	6013      	str	r3, [r2, #0]
}
 8008476:	bf00      	nop
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <LL_RCC_PLLSAI1_Disable>:
{
 8008480:	b480      	push	{r7}
 8008482:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800848e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008492:	6013      	str	r3, [r2, #0]
}
 8008494:	bf00      	nop
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <LL_RCC_PLLSAI1_IsReady>:
{
 800849e:	b480      	push	{r7}
 80084a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80084a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084b0:	d101      	bne.n	80084b6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e000      	b.n	80084b8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b088      	sub	sp, #32
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80084ca:	2300      	movs	r3, #0
 80084cc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80084ce:	2300      	movs	r3, #0
 80084d0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d034      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80084e6:	d021      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80084e8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80084ec:	d81b      	bhi.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80084ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084f2:	d01d      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80084f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084f8:	d815      	bhi.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00b      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80084fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008502:	d110      	bne.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800850e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008512:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008514:	e00d      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	3304      	adds	r3, #4
 800851a:	4618      	mov	r0, r3
 800851c:	f000 f947 	bl	80087ae <RCCEx_PLLSAI1_ConfigNP>
 8008520:	4603      	mov	r3, r0
 8008522:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008524:	e005      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	77fb      	strb	r3, [r7, #31]
        break;
 800852a:	e002      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800852c:	bf00      	nop
 800852e:	e000      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008532:	7ffb      	ldrb	r3, [r7, #31]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d105      	bne.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff fee8 	bl	8008312 <LL_RCC_SetSAIClockSource>
 8008542:	e001      	b.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008544:	7ffb      	ldrb	r3, [r7, #31]
 8008546:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008550:	2b00      	cmp	r3, #0
 8008552:	d046      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008554:	f7ff ff56 	bl	8008404 <LL_RCC_GetRTCClockSource>
 8008558:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	429a      	cmp	r2, r3
 8008562:	d03c      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008564:	f7fe fc58 	bl	8006e18 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d105      	bne.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff ff30 	bl	80083d8 <LL_RCC_SetRTCClockSource>
 8008578:	e02e      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800857a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800857e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008582:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008584:	f7ff ff4b 	bl	800841e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008588:	f7ff ff5a 	bl	8008440 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008596:	4313      	orrs	r3, r2
 8008598:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800859a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80085a4:	f7ff fdf0 	bl	8008188 <LL_RCC_LSE_IsEnabled>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d114      	bne.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80085ae:	f7fa fe3f 	bl	8003230 <HAL_GetTick>
 80085b2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80085b4:	e00b      	b.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085b6:	f7fa fe3b 	bl	8003230 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d902      	bls.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	77fb      	strb	r3, [r7, #31]
              break;
 80085cc:	e004      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80085ce:	f7ff fded 	bl	80081ac <LL_RCC_LSE_IsReady>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d1ee      	bne.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80085d8:	7ffb      	ldrb	r3, [r7, #31]
 80085da:	77bb      	strb	r3, [r7, #30]
 80085dc:	e001      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085de:	7ffb      	ldrb	r3, [r7, #31]
 80085e0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d004      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7ff fe2a 	bl	800824c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d004      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff fe35 	bl	8008278 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0310 	and.w	r3, r3, #16
 8008616:	2b00      	cmp	r3, #0
 8008618:	d004      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800861e:	4618      	mov	r0, r3
 8008620:	f7ff fe5d 	bl	80082de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0320 	and.w	r3, r3, #32
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff fe52 	bl	80082de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0304 	and.w	r3, r3, #4
 8008642:	2b00      	cmp	r3, #0
 8008644:	d004      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	4618      	mov	r0, r3
 800864c:	f7ff fe2a 	bl	80082a4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0308 	and.w	r3, r3, #8
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008660:	4618      	mov	r0, r3
 8008662:	f7ff fe1f 	bl	80082a4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800866e:	2b00      	cmp	r3, #0
 8008670:	d022      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff fe8d 	bl	8008396 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008684:	d107      	bne.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008690:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008694:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800869a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800869e:	d10b      	bne.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3304      	adds	r3, #4
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 f8dd 	bl	8008864 <RCCEx_PLLSAI1_ConfigNQ>
 80086aa:	4603      	mov	r3, r0
 80086ac:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80086ae:	7ffb      	ldrb	r3, [r7, #31]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80086b4:	7ffb      	ldrb	r3, [r7, #31]
 80086b6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d02b      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086cc:	d008      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086d6:	d003      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d105      	bne.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff fe2a 	bl	800833e <LL_RCC_SetRNGClockSource>
 80086ea:	e00a      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	2000      	movs	r0, #0
 80086f8:	f7ff fe21 	bl	800833e <LL_RCC_SetRNGClockSource>
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7ff fe34 	bl	800836a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008706:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800870a:	d107      	bne.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800870c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800871a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008724:	2b00      	cmp	r3, #0
 8008726:	d022      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800872c:	4618      	mov	r0, r3
 800872e:	f7ff fe3d 	bl	80083ac <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800873a:	d107      	bne.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800873c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800874a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008754:	d10b      	bne.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	3304      	adds	r3, #4
 800875a:	4618      	mov	r0, r3
 800875c:	f000 f8dd 	bl	800891a <RCCEx_PLLSAI1_ConfigNR>
 8008760:	4603      	mov	r3, r0
 8008762:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008764:	7ffb      	ldrb	r3, [r7, #31]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800876a:	7ffb      	ldrb	r3, [r7, #31]
 800876c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d004      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800877e:	4618      	mov	r0, r3
 8008780:	f7ff fd26 	bl	80081d0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d009      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008794:	4618      	mov	r0, r3
 8008796:	f7ff fd45 	bl	8008224 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff fd2c 	bl	80081fc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80087a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3720      	adds	r7, #32
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b084      	sub	sp, #16
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80087ba:	f7ff fe61 	bl	8008480 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80087be:	f7fa fd37 	bl	8003230 <HAL_GetTick>
 80087c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80087c4:	e009      	b.n	80087da <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80087c6:	f7fa fd33 	bl	8003230 <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d902      	bls.n	80087da <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	73fb      	strb	r3, [r7, #15]
      break;
 80087d8:	e004      	b.n	80087e4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80087da:	f7ff fe60 	bl	800849e <LL_RCC_PLLSAI1_IsReady>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1f0      	bne.n	80087c6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d137      	bne.n	800885a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80087ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80087fe:	4313      	orrs	r3, r2
 8008800:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008814:	4313      	orrs	r3, r2
 8008816:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008818:	f7ff fe23 	bl	8008462 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800881c:	f7fa fd08 	bl	8003230 <HAL_GetTick>
 8008820:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008822:	e009      	b.n	8008838 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008824:	f7fa fd04 	bl	8003230 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d902      	bls.n	8008838 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	73fb      	strb	r3, [r7, #15]
        break;
 8008836:	e004      	b.n	8008842 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008838:	f7ff fe31 	bl	800849e <LL_RCC_PLLSAI1_IsReady>
 800883c:	4603      	mov	r3, r0
 800883e:	2b01      	cmp	r3, #1
 8008840:	d1f0      	bne.n	8008824 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d108      	bne.n	800885a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800884c:	691a      	ldr	r2, [r3, #16]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008856:	4313      	orrs	r3, r2
 8008858:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800885a:	7bfb      	ldrb	r3, [r7, #15]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008870:	f7ff fe06 	bl	8008480 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008874:	f7fa fcdc 	bl	8003230 <HAL_GetTick>
 8008878:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800887a:	e009      	b.n	8008890 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800887c:	f7fa fcd8 	bl	8003230 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b02      	cmp	r3, #2
 8008888:	d902      	bls.n	8008890 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	73fb      	strb	r3, [r7, #15]
      break;
 800888e:	e004      	b.n	800889a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008890:	f7ff fe05 	bl	800849e <LL_RCC_PLLSAI1_IsReady>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1f0      	bne.n	800887c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800889a:	7bfb      	ldrb	r3, [r7, #15]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d137      	bne.n	8008910 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80088a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	021b      	lsls	r3, r3, #8
 80088b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80088b4:	4313      	orrs	r3, r2
 80088b6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80088b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80088ca:	4313      	orrs	r3, r2
 80088cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80088ce:	f7ff fdc8 	bl	8008462 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088d2:	f7fa fcad 	bl	8003230 <HAL_GetTick>
 80088d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80088d8:	e009      	b.n	80088ee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088da:	f7fa fca9 	bl	8003230 <HAL_GetTick>
 80088de:	4602      	mov	r2, r0
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d902      	bls.n	80088ee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	73fb      	strb	r3, [r7, #15]
        break;
 80088ec:	e004      	b.n	80088f8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80088ee:	f7ff fdd6 	bl	800849e <LL_RCC_PLLSAI1_IsReady>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d1f0      	bne.n	80088da <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d108      	bne.n	8008910 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80088fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800890c:	4313      	orrs	r3, r2
 800890e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008910:	7bfb      	ldrb	r3, [r7, #15]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b084      	sub	sp, #16
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008926:	f7ff fdab 	bl	8008480 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800892a:	f7fa fc81 	bl	8003230 <HAL_GetTick>
 800892e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008930:	e009      	b.n	8008946 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008932:	f7fa fc7d 	bl	8003230 <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	2b02      	cmp	r3, #2
 800893e:	d902      	bls.n	8008946 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	73fb      	strb	r3, [r7, #15]
      break;
 8008944:	e004      	b.n	8008950 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008946:	f7ff fdaa 	bl	800849e <LL_RCC_PLLSAI1_IsReady>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1f0      	bne.n	8008932 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d137      	bne.n	80089c6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	021b      	lsls	r3, r3, #8
 8008966:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800896a:	4313      	orrs	r3, r2
 800896c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800896e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008980:	4313      	orrs	r3, r2
 8008982:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008984:	f7ff fd6d 	bl	8008462 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008988:	f7fa fc52 	bl	8003230 <HAL_GetTick>
 800898c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800898e:	e009      	b.n	80089a4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008990:	f7fa fc4e 	bl	8003230 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b02      	cmp	r3, #2
 800899c:	d902      	bls.n	80089a4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	73fb      	strb	r3, [r7, #15]
        break;
 80089a2:	e004      	b.n	80089ae <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80089a4:	f7ff fd7b 	bl	800849e <LL_RCC_PLLSAI1_IsReady>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d1f0      	bne.n	8008990 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d108      	bne.n	80089c6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80089b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089b8:	691a      	ldr	r2, [r3, #16]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80089c2:	4313      	orrs	r3, r2
 80089c4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e09f      	b.n	8008b22 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d106      	bne.n	80089fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7fa f878 	bl	8002aec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2202      	movs	r2, #2
 8008a00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008a04:	4b49      	ldr	r3, [pc, #292]	@ (8008b2c <HAL_RTC_Init+0x15c>)
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f003 0310 	and.w	r3, r3, #16
 8008a0c:	2b10      	cmp	r3, #16
 8008a0e:	d07e      	beq.n	8008b0e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	22ca      	movs	r2, #202	@ 0xca
 8008a16:	625a      	str	r2, [r3, #36]	@ 0x24
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2253      	movs	r2, #83	@ 0x53
 8008a1e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fac6 	bl	8008fb2 <RTC_EnterInitMode>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00a      	beq.n	8008a42 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	22ff      	movs	r2, #255	@ 0xff
 8008a32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2204      	movs	r2, #4
 8008a38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	73fb      	strb	r3, [r7, #15]
 8008a40:	e067      	b.n	8008b12 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	6812      	ldr	r2, [r2, #0]
 8008a4c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a54:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6899      	ldr	r1, [r3, #8]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	431a      	orrs	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	430a      	orrs	r2, r1
 8008a72:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	68d2      	ldr	r2, [r2, #12]
 8008a7c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6919      	ldr	r1, [r3, #16]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	041a      	lsls	r2, r3, #16
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68da      	ldr	r2, [r3, #12]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008aa0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f022 0203 	bic.w	r2, r2, #3
 8008ab0:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	69da      	ldr	r2, [r3, #28]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f003 0320 	and.w	r3, r3, #32
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d113      	bne.n	8008b00 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fa44 	bl	8008f66 <HAL_RTC_WaitForSynchro>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00d      	beq.n	8008b00 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	22ff      	movs	r2, #255	@ 0xff
 8008aea:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2204      	movs	r2, #4
 8008af0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e010      	b.n	8008b22 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	22ff      	movs	r2, #255	@ 0xff
 8008b06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73fb      	strb	r3, [r7, #15]
 8008b0c:	e001      	b.n	8008b12 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d103      	bne.n	8008b20 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	40002800 	.word	0x40002800

08008b30 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b30:	b590      	push	{r4, r7, lr}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d101      	bne.n	8008b4a <HAL_RTC_SetTime+0x1a>
 8008b46:	2302      	movs	r3, #2
 8008b48:	e0b2      	b.n	8008cb0 <HAL_RTC_SetTime+0x180>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2202      	movs	r2, #2
 8008b56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d126      	bne.n	8008bae <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d102      	bne.n	8008b74 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	2200      	movs	r2, #0
 8008b72:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fa44 	bl	8009006 <RTC_ByteToBcd2>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	785b      	ldrb	r3, [r3, #1]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 fa3d 	bl	8009006 <RTC_ByteToBcd2>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008b90:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	789b      	ldrb	r3, [r3, #2]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fa35 	bl	8009006 <RTC_ByteToBcd2>
 8008b9c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008b9e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	78db      	ldrb	r3, [r3, #3]
 8008ba6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	617b      	str	r3, [r7, #20]
 8008bac:	e018      	b.n	8008be0 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d102      	bne.n	8008bc2 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	785b      	ldrb	r3, [r3, #1]
 8008bcc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008bce:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008bd4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	78db      	ldrb	r3, [r3, #3]
 8008bda:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	22ca      	movs	r2, #202	@ 0xca
 8008be6:	625a      	str	r2, [r3, #36]	@ 0x24
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2253      	movs	r2, #83	@ 0x53
 8008bee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 f9de 	bl	8008fb2 <RTC_EnterInitMode>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00d      	beq.n	8008c18 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	22ff      	movs	r2, #255	@ 0xff
 8008c02:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2204      	movs	r2, #4
 8008c08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e04b      	b.n	8008cb0 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008c22:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008c26:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689a      	ldr	r2, [r3, #8]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008c36:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6899      	ldr	r1, [r3, #8]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	431a      	orrs	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c5e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d113      	bne.n	8008c96 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 f979 	bl	8008f66 <HAL_RTC_WaitForSynchro>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00d      	beq.n	8008c96 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	22ff      	movs	r2, #255	@ 0xff
 8008c80:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2204      	movs	r2, #4
 8008c86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e00c      	b.n	8008cb0 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	22ff      	movs	r2, #255	@ 0xff
 8008c9c:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8008cae:	2300      	movs	r3, #0
  }
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	371c      	adds	r7, #28
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd90      	pop	{r4, r7, pc}

08008cb8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008ce6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008cea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	0c1b      	lsrs	r3, r3, #16
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	0a1b      	lsrs	r3, r3, #8
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	0c1b      	lsrs	r3, r3, #16
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d11a      	bne.n	8008d66 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 f986 	bl	8009046 <RTC_Bcd2ToByte>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	785b      	ldrb	r3, [r3, #1]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 f97d 	bl	8009046 <RTC_Bcd2ToByte>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	461a      	mov	r2, r3
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	789b      	ldrb	r3, [r3, #2]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 f974 	bl	8009046 <RTC_Bcd2ToByte>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	461a      	mov	r2, r3
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008d70:	b590      	push	{r4, r7, lr}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d101      	bne.n	8008d8a <HAL_RTC_SetDate+0x1a>
 8008d86:	2302      	movs	r3, #2
 8008d88:	e09c      	b.n	8008ec4 <HAL_RTC_SetDate+0x154>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2202      	movs	r2, #2
 8008d96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10e      	bne.n	8008dbe <HAL_RTC_SetDate+0x4e>
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	785b      	ldrb	r3, [r3, #1]
 8008da4:	f003 0310 	and.w	r3, r3, #16
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d008      	beq.n	8008dbe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	785b      	ldrb	r3, [r3, #1]
 8008db0:	f023 0310 	bic.w	r3, r3, #16
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	330a      	adds	r3, #10
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d11c      	bne.n	8008dfe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	78db      	ldrb	r3, [r3, #3]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 f91c 	bl	8009006 <RTC_ByteToBcd2>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	785b      	ldrb	r3, [r3, #1]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 f915 	bl	8009006 <RTC_ByteToBcd2>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008de0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	789b      	ldrb	r3, [r3, #2]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 f90d 	bl	8009006 <RTC_ByteToBcd2>
 8008dec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008dee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	e00e      	b.n	8008e1c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	78db      	ldrb	r3, [r3, #3]
 8008e02:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	785b      	ldrb	r3, [r3, #1]
 8008e08:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008e0a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008e10:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	22ca      	movs	r2, #202	@ 0xca
 8008e22:	625a      	str	r2, [r3, #36]	@ 0x24
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2253      	movs	r2, #83	@ 0x53
 8008e2a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 f8c0 	bl	8008fb2 <RTC_EnterInitMode>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00d      	beq.n	8008e54 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	22ff      	movs	r2, #255	@ 0xff
 8008e3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2204      	movs	r2, #4
 8008e44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e037      	b.n	8008ec4 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008e5e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008e62:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68da      	ldr	r2, [r3, #12]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e72:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f003 0320 	and.w	r3, r3, #32
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d113      	bne.n	8008eaa <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 f86f 	bl	8008f66 <HAL_RTC_WaitForSynchro>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00d      	beq.n	8008eaa <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	22ff      	movs	r2, #255	@ 0xff
 8008e94:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2204      	movs	r2, #4
 8008e9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e00c      	b.n	8008ec4 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	22ff      	movs	r2, #255	@ 0xff
 8008eb0:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
  }
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	371c      	adds	r7, #28
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd90      	pop	{r4, r7, pc}

08008ecc <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008ee2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008ee6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	0c1b      	lsrs	r3, r3, #16
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	0a1b      	lsrs	r3, r3, #8
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	f003 031f 	and.w	r3, r3, #31
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	0b5b      	lsrs	r3, r3, #13
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	f003 0307 	and.w	r3, r3, #7
 8008f1a:	b2da      	uxtb	r2, r3
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d11a      	bne.n	8008f5c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	78db      	ldrb	r3, [r3, #3]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 f88b 	bl	8009046 <RTC_Bcd2ToByte>
 8008f30:	4603      	mov	r3, r0
 8008f32:	461a      	mov	r2, r3
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	785b      	ldrb	r3, [r3, #1]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 f882 	bl	8009046 <RTC_Bcd2ToByte>
 8008f42:	4603      	mov	r3, r0
 8008f44:	461a      	mov	r2, r3
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	789b      	ldrb	r3, [r3, #2]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 f879 	bl	8009046 <RTC_Bcd2ToByte>
 8008f54:	4603      	mov	r3, r0
 8008f56:	461a      	mov	r2, r3
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68da      	ldr	r2, [r3, #12]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008f7c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008f7e:	f7fa f957 	bl	8003230 <HAL_GetTick>
 8008f82:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f84:	e009      	b.n	8008f9a <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f86:	f7fa f953 	bl	8003230 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f94:	d901      	bls.n	8008f9a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008f96:	2303      	movs	r3, #3
 8008f98:	e007      	b.n	8008faa <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f003 0320 	and.w	r3, r3, #32
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0ee      	beq.n	8008f86 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d119      	bne.n	8008ffc <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008fd2:	f7fa f92d 	bl	8003230 <HAL_GetTick>
 8008fd6:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008fd8:	e009      	b.n	8008fee <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008fda:	f7fa f929 	bl	8003230 <HAL_GetTick>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008fe8:	d901      	bls.n	8008fee <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e007      	b.n	8008ffe <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0ee      	beq.n	8008fda <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009006:	b480      	push	{r7}
 8009008:	b085      	sub	sp, #20
 800900a:	af00      	add	r7, sp, #0
 800900c:	4603      	mov	r3, r0
 800900e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8009014:	79fb      	ldrb	r3, [r7, #7]
 8009016:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8009018:	e005      	b.n	8009026 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3301      	adds	r3, #1
 800901e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8009020:	7afb      	ldrb	r3, [r7, #11]
 8009022:	3b0a      	subs	r3, #10
 8009024:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8009026:	7afb      	ldrb	r3, [r7, #11]
 8009028:	2b09      	cmp	r3, #9
 800902a:	d8f6      	bhi.n	800901a <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	b2db      	uxtb	r3, r3
 8009030:	011b      	lsls	r3, r3, #4
 8009032:	b2da      	uxtb	r2, r3
 8009034:	7afb      	ldrb	r3, [r7, #11]
 8009036:	4313      	orrs	r3, r2
 8009038:	b2db      	uxtb	r3, r3
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009046:	b480      	push	{r7}
 8009048:	b085      	sub	sp, #20
 800904a:	af00      	add	r7, sp, #0
 800904c:	4603      	mov	r3, r0
 800904e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	091b      	lsrs	r3, r3, #4
 8009054:	b2db      	uxtb	r3, r3
 8009056:	461a      	mov	r2, r3
 8009058:	4613      	mov	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4413      	add	r3, r2
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	b2da      	uxtb	r2, r3
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	f003 030f 	and.w	r3, r3, #15
 800906c:	b2db      	uxtb	r3, r3
 800906e:	4413      	add	r3, r2
 8009070:	b2db      	uxtb	r3, r3
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
	...

08009080 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d101      	bne.n	800909a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8009096:	2302      	movs	r3, #2
 8009098:	e0a8      	b.n	80091ec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2202      	movs	r2, #2
 80090a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	22ca      	movs	r2, #202	@ 0xca
 80090b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2253      	movs	r2, #83	@ 0x53
 80090b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d020      	beq.n	800910a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80090c8:	f7fa f8b2 	bl	8003230 <HAL_GetTick>
 80090cc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80090ce:	e015      	b.n	80090fc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80090d0:	f7fa f8ae 	bl	8003230 <HAL_GetTick>
 80090d4:	4602      	mov	r2, r0
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090de:	d90d      	bls.n	80090fc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	22ff      	movs	r2, #255	@ 0xff
 80090e6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2203      	movs	r2, #3
 80090ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e077      	b.n	80091ec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f003 0304 	and.w	r3, r3, #4
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1e2      	bne.n	80090d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689a      	ldr	r2, [r3, #8]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009118:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	b2da      	uxtb	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800912a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800912c:	f7fa f880 	bl	8003230 <HAL_GetTick>
 8009130:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009132:	e015      	b.n	8009160 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009134:	f7fa f87c 	bl	8003230 <HAL_GetTick>
 8009138:	4602      	mov	r2, r0
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	1ad3      	subs	r3, r2, r3
 800913e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009142:	d90d      	bls.n	8009160 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	22ff      	movs	r2, #255	@ 0xff
 800914a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2203      	movs	r2, #3
 8009150:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800915c:	2303      	movs	r3, #3
 800915e:	e045      	b.n	80091ec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	f003 0304 	and.w	r3, r3, #4
 800916a:	2b00      	cmp	r3, #0
 800916c:	d0e2      	beq.n	8009134 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	689a      	ldr	r2, [r3, #8]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 0207 	bic.w	r2, r2, #7
 8009184:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6899      	ldr	r1, [r3, #8]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	430a      	orrs	r2, r1
 8009194:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009196:	4b17      	ldr	r3, [pc, #92]	@ (80091f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800919c:	4a15      	ldr	r2, [pc, #84]	@ (80091f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800919e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091a2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80091a6:	4b13      	ldr	r3, [pc, #76]	@ (80091f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a12      	ldr	r2, [pc, #72]	@ (80091f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80091ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091b0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091c0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	689a      	ldr	r2, [r3, #8]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80091d0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	22ff      	movs	r2, #255	@ 0xff
 80091d8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3718      	adds	r7, #24
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	58000800 	.word	0x58000800

080091f8 <LL_RCC_GetUSARTClockSource>:
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8009200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009204:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4013      	ands	r3, r2
}
 800920c:	4618      	mov	r0, r3
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <LL_RCC_GetLPUARTClockSource>:
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009224:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4013      	ands	r3, r2
}
 800922c:	4618      	mov	r0, r3
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e042      	b.n	80092d0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009250:	2b00      	cmp	r3, #0
 8009252:	d106      	bne.n	8009262 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7f9 fe75 	bl	8002f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2224      	movs	r2, #36	@ 0x24
 8009266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f022 0201 	bic.w	r2, r2, #1
 8009278:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800927e:	2b00      	cmp	r3, #0
 8009280:	d002      	beq.n	8009288 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fe32 	bl	8009eec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 fc07 	bl	8009a9c <UART_SetConfig>
 800928e:	4603      	mov	r3, r0
 8009290:	2b01      	cmp	r3, #1
 8009292:	d101      	bne.n	8009298 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e01b      	b.n	80092d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80092a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689a      	ldr	r2, [r3, #8]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80092b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f042 0201 	orr.w	r2, r2, #1
 80092c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 feb1 	bl	800a030 <UART_CheckIdleState>
 80092ce:	4603      	mov	r3, r0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08a      	sub	sp, #40	@ 0x28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	4613      	mov	r3, r2
 80092e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092ec:	2b20      	cmp	r3, #32
 80092ee:	d167      	bne.n	80093c0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d002      	beq.n	80092fc <HAL_UART_Transmit_DMA+0x24>
 80092f6:	88fb      	ldrh	r3, [r7, #6]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d101      	bne.n	8009300 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e060      	b.n	80093c2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	88fa      	ldrh	r2, [r7, #6]
 800930a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	88fa      	ldrh	r2, [r7, #6]
 8009312:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2221      	movs	r2, #33	@ 0x21
 8009322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800932a:	2b00      	cmp	r3, #0
 800932c:	d028      	beq.n	8009380 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009332:	4a26      	ldr	r2, [pc, #152]	@ (80093cc <HAL_UART_Transmit_DMA+0xf4>)
 8009334:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800933a:	4a25      	ldr	r2, [pc, #148]	@ (80093d0 <HAL_UART_Transmit_DMA+0xf8>)
 800933c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009342:	4a24      	ldr	r2, [pc, #144]	@ (80093d4 <HAL_UART_Transmit_DMA+0xfc>)
 8009344:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800934a:	2200      	movs	r2, #0
 800934c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009356:	4619      	mov	r1, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3328      	adds	r3, #40	@ 0x28
 800935e:	461a      	mov	r2, r3
 8009360:	88fb      	ldrh	r3, [r7, #6]
 8009362:	f7fb fb69 	bl	8004a38 <HAL_DMA_Start_IT>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d009      	beq.n	8009380 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2210      	movs	r2, #16
 8009370:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2220      	movs	r2, #32
 8009378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e020      	b.n	80093c2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2240      	movs	r2, #64	@ 0x40
 8009386:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3308      	adds	r3, #8
 800938e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	e853 3f00 	ldrex	r3, [r3]
 8009396:	613b      	str	r3, [r7, #16]
   return(result);
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800939e:	627b      	str	r3, [r7, #36]	@ 0x24
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	3308      	adds	r3, #8
 80093a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093a8:	623a      	str	r2, [r7, #32]
 80093aa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ac:	69f9      	ldr	r1, [r7, #28]
 80093ae:	6a3a      	ldr	r2, [r7, #32]
 80093b0:	e841 2300 	strex	r3, r2, [r1]
 80093b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1e5      	bne.n	8009388 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	e000      	b.n	80093c2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80093c0:	2302      	movs	r3, #2
  }
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3728      	adds	r7, #40	@ 0x28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	0800a3ad 	.word	0x0800a3ad
 80093d0:	0800a447 	.word	0x0800a447
 80093d4:	0800a463 	.word	0x0800a463

080093d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b0ba      	sub	sp, #232	@ 0xe8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80093fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009402:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009406:	4013      	ands	r3, r2
 8009408:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800940c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009410:	2b00      	cmp	r3, #0
 8009412:	d11b      	bne.n	800944c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009418:	f003 0320 	and.w	r3, r3, #32
 800941c:	2b00      	cmp	r3, #0
 800941e:	d015      	beq.n	800944c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009424:	f003 0320 	and.w	r3, r3, #32
 8009428:	2b00      	cmp	r3, #0
 800942a:	d105      	bne.n	8009438 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800942c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d009      	beq.n	800944c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 8300 	beq.w	8009a42 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	4798      	blx	r3
      }
      return;
 800944a:	e2fa      	b.n	8009a42 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800944c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 8123 	beq.w	800969c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009456:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800945a:	4b8d      	ldr	r3, [pc, #564]	@ (8009690 <HAL_UART_IRQHandler+0x2b8>)
 800945c:	4013      	ands	r3, r2
 800945e:	2b00      	cmp	r3, #0
 8009460:	d106      	bne.n	8009470 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009462:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009466:	4b8b      	ldr	r3, [pc, #556]	@ (8009694 <HAL_UART_IRQHandler+0x2bc>)
 8009468:	4013      	ands	r3, r2
 800946a:	2b00      	cmp	r3, #0
 800946c:	f000 8116 	beq.w	800969c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009474:	f003 0301 	and.w	r3, r3, #1
 8009478:	2b00      	cmp	r3, #0
 800947a:	d011      	beq.n	80094a0 <HAL_UART_IRQHandler+0xc8>
 800947c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00b      	beq.n	80094a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2201      	movs	r2, #1
 800948e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009496:	f043 0201 	orr.w	r2, r3, #1
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094a4:	f003 0302 	and.w	r3, r3, #2
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d011      	beq.n	80094d0 <HAL_UART_IRQHandler+0xf8>
 80094ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094b0:	f003 0301 	and.w	r3, r3, #1
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00b      	beq.n	80094d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2202      	movs	r2, #2
 80094be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094c6:	f043 0204 	orr.w	r2, r3, #4
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094d4:	f003 0304 	and.w	r3, r3, #4
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d011      	beq.n	8009500 <HAL_UART_IRQHandler+0x128>
 80094dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094e0:	f003 0301 	and.w	r3, r3, #1
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00b      	beq.n	8009500 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2204      	movs	r2, #4
 80094ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094f6:	f043 0202 	orr.w	r2, r3, #2
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009504:	f003 0308 	and.w	r3, r3, #8
 8009508:	2b00      	cmp	r3, #0
 800950a:	d017      	beq.n	800953c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800950c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009510:	f003 0320 	and.w	r3, r3, #32
 8009514:	2b00      	cmp	r3, #0
 8009516:	d105      	bne.n	8009524 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009518:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800951c:	4b5c      	ldr	r3, [pc, #368]	@ (8009690 <HAL_UART_IRQHandler+0x2b8>)
 800951e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00b      	beq.n	800953c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2208      	movs	r2, #8
 800952a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009532:	f043 0208 	orr.w	r2, r3, #8
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800953c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009540:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009544:	2b00      	cmp	r3, #0
 8009546:	d012      	beq.n	800956e <HAL_UART_IRQHandler+0x196>
 8009548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800954c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00c      	beq.n	800956e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800955c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009564:	f043 0220 	orr.w	r2, r3, #32
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 8266 	beq.w	8009a46 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800957a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800957e:	f003 0320 	and.w	r3, r3, #32
 8009582:	2b00      	cmp	r3, #0
 8009584:	d013      	beq.n	80095ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800958a:	f003 0320 	and.w	r3, r3, #32
 800958e:	2b00      	cmp	r3, #0
 8009590:	d105      	bne.n	800959e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800959a:	2b00      	cmp	r3, #0
 800959c:	d007      	beq.n	80095ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095c2:	2b40      	cmp	r3, #64	@ 0x40
 80095c4:	d005      	beq.n	80095d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80095c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80095ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d054      	beq.n	800967c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fe84 	bl	800a2e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095e2:	2b40      	cmp	r3, #64	@ 0x40
 80095e4:	d146      	bne.n	8009674 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3308      	adds	r3, #8
 80095ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80095fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009600:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009604:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3308      	adds	r3, #8
 800960e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009612:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009616:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800961e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009622:	e841 2300 	strex	r3, r2, [r1]
 8009626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800962a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1d9      	bne.n	80095e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009638:	2b00      	cmp	r3, #0
 800963a:	d017      	beq.n	800966c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009642:	4a15      	ldr	r2, [pc, #84]	@ (8009698 <HAL_UART_IRQHandler+0x2c0>)
 8009644:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800964c:	4618      	mov	r0, r3
 800964e:	f7fb facd 	bl	8004bec <HAL_DMA_Abort_IT>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d019      	beq.n	800968c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800965e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009666:	4610      	mov	r0, r2
 8009668:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800966a:	e00f      	b.n	800968c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f9ff 	bl	8009a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009672:	e00b      	b.n	800968c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f9fb 	bl	8009a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800967a:	e007      	b.n	800968c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f9f7 	bl	8009a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800968a:	e1dc      	b.n	8009a46 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800968c:	bf00      	nop
    return;
 800968e:	e1da      	b.n	8009a46 <HAL_UART_IRQHandler+0x66e>
 8009690:	10000001 	.word	0x10000001
 8009694:	04000120 	.word	0x04000120
 8009698:	0800a4e3 	.word	0x0800a4e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	f040 8170 	bne.w	8009986 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80096a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096aa:	f003 0310 	and.w	r3, r3, #16
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 8169 	beq.w	8009986 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80096b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096b8:	f003 0310 	and.w	r3, r3, #16
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 8162 	beq.w	8009986 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2210      	movs	r2, #16
 80096c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096d4:	2b40      	cmp	r3, #64	@ 0x40
 80096d6:	f040 80d8 	bne.w	800988a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80096e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 80af 	beq.w	8009850 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80096fc:	429a      	cmp	r2, r3
 80096fe:	f080 80a7 	bcs.w	8009850 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009708:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0320 	and.w	r3, r3, #32
 800971a:	2b00      	cmp	r3, #0
 800971c:	f040 8087 	bne.w	800982e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009728:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800972c:	e853 3f00 	ldrex	r3, [r3]
 8009730:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009734:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800973c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
 8009746:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800974a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800974e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009752:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009756:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800975a:	e841 2300 	strex	r3, r2, [r1]
 800975e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009762:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1da      	bne.n	8009720 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3308      	adds	r3, #8
 8009770:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009772:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009774:	e853 3f00 	ldrex	r3, [r3]
 8009778:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800977a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800977c:	f023 0301 	bic.w	r3, r3, #1
 8009780:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3308      	adds	r3, #8
 800978a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800978e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009792:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009796:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800979a:	e841 2300 	strex	r3, r2, [r1]
 800979e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80097a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1e1      	bne.n	800976a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3308      	adds	r3, #8
 80097ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097b0:	e853 3f00 	ldrex	r3, [r3]
 80097b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80097b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3308      	adds	r3, #8
 80097c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80097ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80097cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80097d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80097d2:	e841 2300 	strex	r3, r2, [r1]
 80097d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80097d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1e3      	bne.n	80097a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2220      	movs	r2, #32
 80097e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097f4:	e853 3f00 	ldrex	r3, [r3]
 80097f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80097fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097fc:	f023 0310 	bic.w	r3, r3, #16
 8009800:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	461a      	mov	r2, r3
 800980a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800980e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009810:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009814:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009816:	e841 2300 	strex	r3, r2, [r1]
 800981a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800981c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1e4      	bne.n	80097ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009828:	4618      	mov	r0, r3
 800982a:	f7fb f980 	bl	8004b2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2202      	movs	r2, #2
 8009832:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009840:	b29b      	uxth	r3, r3
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	b29b      	uxth	r3, r3
 8009846:	4619      	mov	r1, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f91b 	bl	8009a84 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800984e:	e0fc      	b.n	8009a4a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800985a:	429a      	cmp	r2, r3
 800985c:	f040 80f5 	bne.w	8009a4a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b20      	cmp	r3, #32
 8009870:	f040 80eb 	bne.w	8009a4a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2202      	movs	r2, #2
 8009878:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009880:	4619      	mov	r1, r3
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f8fe 	bl	8009a84 <HAL_UARTEx_RxEventCallback>
      return;
 8009888:	e0df      	b.n	8009a4a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009896:	b29b      	uxth	r3, r3
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f000 80d1 	beq.w	8009a4e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80098ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 80cc 	beq.w	8009a4e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098be:	e853 3f00 	ldrex	r3, [r3]
 80098c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	461a      	mov	r2, r3
 80098d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80098d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80098da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098e0:	e841 2300 	strex	r3, r2, [r1]
 80098e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1e4      	bne.n	80098b6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3308      	adds	r3, #8
 80098f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f6:	e853 3f00 	ldrex	r3, [r3]
 80098fa:	623b      	str	r3, [r7, #32]
   return(result);
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009902:	f023 0301 	bic.w	r3, r3, #1
 8009906:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3308      	adds	r3, #8
 8009910:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009914:	633a      	str	r2, [r7, #48]	@ 0x30
 8009916:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009918:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800991a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800991c:	e841 2300 	strex	r3, r2, [r1]
 8009920:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1e1      	bne.n	80098ec <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2220      	movs	r2, #32
 800992c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	e853 3f00 	ldrex	r3, [r3]
 8009948:	60fb      	str	r3, [r7, #12]
   return(result);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f023 0310 	bic.w	r3, r3, #16
 8009950:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	461a      	mov	r2, r3
 800995a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800995e:	61fb      	str	r3, [r7, #28]
 8009960:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009962:	69b9      	ldr	r1, [r7, #24]
 8009964:	69fa      	ldr	r2, [r7, #28]
 8009966:	e841 2300 	strex	r3, r2, [r1]
 800996a:	617b      	str	r3, [r7, #20]
   return(result);
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1e4      	bne.n	800993c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2202      	movs	r2, #2
 8009976:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800997c:	4619      	mov	r1, r3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f880 	bl	8009a84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009984:	e063      	b.n	8009a4e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800998a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00e      	beq.n	80099b0 <HAL_UART_IRQHandler+0x5d8>
 8009992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d008      	beq.n	80099b0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80099a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fddb 	bl	800a564 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099ae:	e051      	b.n	8009a54 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80099b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d014      	beq.n	80099e6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80099bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d105      	bne.n	80099d4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80099c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d008      	beq.n	80099e6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d03a      	beq.n	8009a52 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	4798      	blx	r3
    }
    return;
 80099e4:	e035      	b.n	8009a52 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80099e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d009      	beq.n	8009a06 <HAL_UART_IRQHandler+0x62e>
 80099f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d003      	beq.n	8009a06 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 fd85 	bl	800a50e <UART_EndTransmit_IT>
    return;
 8009a04:	e026      	b.n	8009a54 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d009      	beq.n	8009a26 <HAL_UART_IRQHandler+0x64e>
 8009a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a16:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fdb4 	bl	800a58c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a24:	e016      	b.n	8009a54 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d010      	beq.n	8009a54 <HAL_UART_IRQHandler+0x67c>
 8009a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	da0c      	bge.n	8009a54 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fd9c 	bl	800a578 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a40:	e008      	b.n	8009a54 <HAL_UART_IRQHandler+0x67c>
      return;
 8009a42:	bf00      	nop
 8009a44:	e006      	b.n	8009a54 <HAL_UART_IRQHandler+0x67c>
    return;
 8009a46:	bf00      	nop
 8009a48:	e004      	b.n	8009a54 <HAL_UART_IRQHandler+0x67c>
      return;
 8009a4a:	bf00      	nop
 8009a4c:	e002      	b.n	8009a54 <HAL_UART_IRQHandler+0x67c>
      return;
 8009a4e:	bf00      	nop
 8009a50:	e000      	b.n	8009a54 <HAL_UART_IRQHandler+0x67c>
    return;
 8009a52:	bf00      	nop
  }
}
 8009a54:	37e8      	adds	r7, #232	@ 0xe8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop

08009a5c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009aa0:	b08c      	sub	sp, #48	@ 0x30
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	689a      	ldr	r2, [r3, #8]
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	431a      	orrs	r2, r3
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	431a      	orrs	r2, r3
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	69db      	ldr	r3, [r3, #28]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	4baf      	ldr	r3, [pc, #700]	@ (8009d88 <UART_SetConfig+0x2ec>)
 8009acc:	4013      	ands	r3, r2
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	6812      	ldr	r2, [r2, #0]
 8009ad2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ad4:	430b      	orrs	r3, r1
 8009ad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	68da      	ldr	r2, [r3, #12]
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	430a      	orrs	r2, r1
 8009aec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4aa4      	ldr	r2, [pc, #656]	@ (8009d8c <UART_SetConfig+0x2f0>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d004      	beq.n	8009b08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b04:	4313      	orrs	r3, r2
 8009b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009b12:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	6812      	ldr	r2, [r2, #0]
 8009b1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b1c:	430b      	orrs	r3, r1
 8009b1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b26:	f023 010f 	bic.w	r1, r3, #15
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	430a      	orrs	r2, r1
 8009b34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a95      	ldr	r2, [pc, #596]	@ (8009d90 <UART_SetConfig+0x2f4>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d125      	bne.n	8009b8c <UART_SetConfig+0xf0>
 8009b40:	2003      	movs	r0, #3
 8009b42:	f7ff fb59 	bl	80091f8 <LL_RCC_GetUSARTClockSource>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b03      	cmp	r3, #3
 8009b4a:	d81b      	bhi.n	8009b84 <UART_SetConfig+0xe8>
 8009b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b54 <UART_SetConfig+0xb8>)
 8009b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b52:	bf00      	nop
 8009b54:	08009b65 	.word	0x08009b65
 8009b58:	08009b75 	.word	0x08009b75
 8009b5c:	08009b6d 	.word	0x08009b6d
 8009b60:	08009b7d 	.word	0x08009b7d
 8009b64:	2301      	movs	r3, #1
 8009b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b6a:	e042      	b.n	8009bf2 <UART_SetConfig+0x156>
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b72:	e03e      	b.n	8009bf2 <UART_SetConfig+0x156>
 8009b74:	2304      	movs	r3, #4
 8009b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b7a:	e03a      	b.n	8009bf2 <UART_SetConfig+0x156>
 8009b7c:	2308      	movs	r3, #8
 8009b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b82:	e036      	b.n	8009bf2 <UART_SetConfig+0x156>
 8009b84:	2310      	movs	r3, #16
 8009b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b8a:	e032      	b.n	8009bf2 <UART_SetConfig+0x156>
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a7e      	ldr	r2, [pc, #504]	@ (8009d8c <UART_SetConfig+0x2f0>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d12a      	bne.n	8009bec <UART_SetConfig+0x150>
 8009b96:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8009b9a:	f7ff fb3d 	bl	8009218 <LL_RCC_GetLPUARTClockSource>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ba4:	d01a      	beq.n	8009bdc <UART_SetConfig+0x140>
 8009ba6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009baa:	d81b      	bhi.n	8009be4 <UART_SetConfig+0x148>
 8009bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bb0:	d00c      	beq.n	8009bcc <UART_SetConfig+0x130>
 8009bb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bb6:	d815      	bhi.n	8009be4 <UART_SetConfig+0x148>
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <UART_SetConfig+0x128>
 8009bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bc0:	d008      	beq.n	8009bd4 <UART_SetConfig+0x138>
 8009bc2:	e00f      	b.n	8009be4 <UART_SetConfig+0x148>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bca:	e012      	b.n	8009bf2 <UART_SetConfig+0x156>
 8009bcc:	2302      	movs	r3, #2
 8009bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bd2:	e00e      	b.n	8009bf2 <UART_SetConfig+0x156>
 8009bd4:	2304      	movs	r3, #4
 8009bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bda:	e00a      	b.n	8009bf2 <UART_SetConfig+0x156>
 8009bdc:	2308      	movs	r3, #8
 8009bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009be2:	e006      	b.n	8009bf2 <UART_SetConfig+0x156>
 8009be4:	2310      	movs	r3, #16
 8009be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bea:	e002      	b.n	8009bf2 <UART_SetConfig+0x156>
 8009bec:	2310      	movs	r3, #16
 8009bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a65      	ldr	r2, [pc, #404]	@ (8009d8c <UART_SetConfig+0x2f0>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	f040 8097 	bne.w	8009d2c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009bfe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c02:	2b08      	cmp	r3, #8
 8009c04:	d823      	bhi.n	8009c4e <UART_SetConfig+0x1b2>
 8009c06:	a201      	add	r2, pc, #4	@ (adr r2, 8009c0c <UART_SetConfig+0x170>)
 8009c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0c:	08009c31 	.word	0x08009c31
 8009c10:	08009c4f 	.word	0x08009c4f
 8009c14:	08009c39 	.word	0x08009c39
 8009c18:	08009c4f 	.word	0x08009c4f
 8009c1c:	08009c3f 	.word	0x08009c3f
 8009c20:	08009c4f 	.word	0x08009c4f
 8009c24:	08009c4f 	.word	0x08009c4f
 8009c28:	08009c4f 	.word	0x08009c4f
 8009c2c:	08009c47 	.word	0x08009c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c30:	f7fe f9ca 	bl	8007fc8 <HAL_RCC_GetPCLK1Freq>
 8009c34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c36:	e010      	b.n	8009c5a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c38:	4b56      	ldr	r3, [pc, #344]	@ (8009d94 <UART_SetConfig+0x2f8>)
 8009c3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c3c:	e00d      	b.n	8009c5a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c3e:	f7fe f943 	bl	8007ec8 <HAL_RCC_GetSysClockFreq>
 8009c42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c44:	e009      	b.n	8009c5a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c4c:	e005      	b.n	8009c5a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009c58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 812b 	beq.w	8009eb8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c66:	4a4c      	ldr	r2, [pc, #304]	@ (8009d98 <UART_SetConfig+0x2fc>)
 8009c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c70:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c74:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	4413      	add	r3, r2
 8009c80:	69ba      	ldr	r2, [r7, #24]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d305      	bcc.n	8009c92 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c8c:	69ba      	ldr	r2, [r7, #24]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d903      	bls.n	8009c9a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c98:	e10e      	b.n	8009eb8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	60bb      	str	r3, [r7, #8]
 8009ca0:	60fa      	str	r2, [r7, #12]
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca6:	4a3c      	ldr	r2, [pc, #240]	@ (8009d98 <UART_SetConfig+0x2fc>)
 8009ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	2200      	movs	r2, #0
 8009cb0:	603b      	str	r3, [r7, #0]
 8009cb2:	607a      	str	r2, [r7, #4]
 8009cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009cbc:	f7f6 fd9e 	bl	80007fc <__aeabi_uldivmod>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	f04f 0200 	mov.w	r2, #0
 8009ccc:	f04f 0300 	mov.w	r3, #0
 8009cd0:	020b      	lsls	r3, r1, #8
 8009cd2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cd6:	0202      	lsls	r2, r0, #8
 8009cd8:	6979      	ldr	r1, [r7, #20]
 8009cda:	6849      	ldr	r1, [r1, #4]
 8009cdc:	0849      	lsrs	r1, r1, #1
 8009cde:	2000      	movs	r0, #0
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	eb12 0804 	adds.w	r8, r2, r4
 8009ce8:	eb43 0905 	adc.w	r9, r3, r5
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	469a      	mov	sl, r3
 8009cf4:	4693      	mov	fp, r2
 8009cf6:	4652      	mov	r2, sl
 8009cf8:	465b      	mov	r3, fp
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	f7f6 fd7d 	bl	80007fc <__aeabi_uldivmod>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	4613      	mov	r3, r2
 8009d08:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d10:	d308      	bcc.n	8009d24 <UART_SetConfig+0x288>
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d18:	d204      	bcs.n	8009d24 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6a3a      	ldr	r2, [r7, #32]
 8009d20:	60da      	str	r2, [r3, #12]
 8009d22:	e0c9      	b.n	8009eb8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d2a:	e0c5      	b.n	8009eb8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d34:	d16d      	bne.n	8009e12 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009d36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	2b07      	cmp	r3, #7
 8009d3e:	d82d      	bhi.n	8009d9c <UART_SetConfig+0x300>
 8009d40:	a201      	add	r2, pc, #4	@ (adr r2, 8009d48 <UART_SetConfig+0x2ac>)
 8009d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d46:	bf00      	nop
 8009d48:	08009d69 	.word	0x08009d69
 8009d4c:	08009d71 	.word	0x08009d71
 8009d50:	08009d9d 	.word	0x08009d9d
 8009d54:	08009d77 	.word	0x08009d77
 8009d58:	08009d9d 	.word	0x08009d9d
 8009d5c:	08009d9d 	.word	0x08009d9d
 8009d60:	08009d9d 	.word	0x08009d9d
 8009d64:	08009d7f 	.word	0x08009d7f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d68:	f7fe f944 	bl	8007ff4 <HAL_RCC_GetPCLK2Freq>
 8009d6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d6e:	e01b      	b.n	8009da8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d70:	4b08      	ldr	r3, [pc, #32]	@ (8009d94 <UART_SetConfig+0x2f8>)
 8009d72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d74:	e018      	b.n	8009da8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d76:	f7fe f8a7 	bl	8007ec8 <HAL_RCC_GetSysClockFreq>
 8009d7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d7c:	e014      	b.n	8009da8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d84:	e010      	b.n	8009da8 <UART_SetConfig+0x30c>
 8009d86:	bf00      	nop
 8009d88:	cfff69f3 	.word	0xcfff69f3
 8009d8c:	40008000 	.word	0x40008000
 8009d90:	40013800 	.word	0x40013800
 8009d94:	00f42400 	.word	0x00f42400
 8009d98:	080167a4 	.word	0x080167a4
      default:
        pclk = 0U;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009da6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f000 8084 	beq.w	8009eb8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db4:	4a4b      	ldr	r2, [pc, #300]	@ (8009ee4 <UART_SetConfig+0x448>)
 8009db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dc2:	005a      	lsls	r2, r3, #1
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	085b      	lsrs	r3, r3, #1
 8009dca:	441a      	add	r2, r3
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dd6:	6a3b      	ldr	r3, [r7, #32]
 8009dd8:	2b0f      	cmp	r3, #15
 8009dda:	d916      	bls.n	8009e0a <UART_SetConfig+0x36e>
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009de2:	d212      	bcs.n	8009e0a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	f023 030f 	bic.w	r3, r3, #15
 8009dec:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009dee:	6a3b      	ldr	r3, [r7, #32]
 8009df0:	085b      	lsrs	r3, r3, #1
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	f003 0307 	and.w	r3, r3, #7
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	8bfb      	ldrh	r3, [r7, #30]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	8bfa      	ldrh	r2, [r7, #30]
 8009e06:	60da      	str	r2, [r3, #12]
 8009e08:	e056      	b.n	8009eb8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009e10:	e052      	b.n	8009eb8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009e16:	3b01      	subs	r3, #1
 8009e18:	2b07      	cmp	r3, #7
 8009e1a:	d822      	bhi.n	8009e62 <UART_SetConfig+0x3c6>
 8009e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e24 <UART_SetConfig+0x388>)
 8009e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e22:	bf00      	nop
 8009e24:	08009e45 	.word	0x08009e45
 8009e28:	08009e4d 	.word	0x08009e4d
 8009e2c:	08009e63 	.word	0x08009e63
 8009e30:	08009e53 	.word	0x08009e53
 8009e34:	08009e63 	.word	0x08009e63
 8009e38:	08009e63 	.word	0x08009e63
 8009e3c:	08009e63 	.word	0x08009e63
 8009e40:	08009e5b 	.word	0x08009e5b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e44:	f7fe f8d6 	bl	8007ff4 <HAL_RCC_GetPCLK2Freq>
 8009e48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e4a:	e010      	b.n	8009e6e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e4c:	4b26      	ldr	r3, [pc, #152]	@ (8009ee8 <UART_SetConfig+0x44c>)
 8009e4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e50:	e00d      	b.n	8009e6e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e52:	f7fe f839 	bl	8007ec8 <HAL_RCC_GetSysClockFreq>
 8009e56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e58:	e009      	b.n	8009e6e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e60:	e005      	b.n	8009e6e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8009e62:	2300      	movs	r3, #0
 8009e64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009e6c:	bf00      	nop
    }

    if (pclk != 0U)
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d021      	beq.n	8009eb8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e78:	4a1a      	ldr	r2, [pc, #104]	@ (8009ee4 <UART_SetConfig+0x448>)
 8009e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e82:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	085b      	lsrs	r3, r3, #1
 8009e8c:	441a      	add	r2, r3
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	2b0f      	cmp	r3, #15
 8009e9c:	d909      	bls.n	8009eb2 <UART_SetConfig+0x416>
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ea4:	d205      	bcs.n	8009eb2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	60da      	str	r2, [r3, #12]
 8009eb0:	e002      	b.n	8009eb8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009ed4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3730      	adds	r7, #48	@ 0x30
 8009edc:	46bd      	mov	sp, r7
 8009ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ee2:	bf00      	nop
 8009ee4:	080167a4 	.word	0x080167a4
 8009ee8:	00f42400 	.word	0x00f42400

08009eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef8:	f003 0308 	and.w	r3, r3, #8
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00a      	beq.n	8009f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f1a:	f003 0301 	and.w	r3, r3, #1
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00a      	beq.n	8009f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	430a      	orrs	r2, r1
 8009f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f3c:	f003 0302 	and.w	r3, r3, #2
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00a      	beq.n	8009f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f5e:	f003 0304 	and.w	r3, r3, #4
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00a      	beq.n	8009f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f80:	f003 0310 	and.w	r3, r3, #16
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00a      	beq.n	8009f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa2:	f003 0320 	and.w	r3, r3, #32
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00a      	beq.n	8009fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d01a      	beq.n	800a002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fea:	d10a      	bne.n	800a002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	430a      	orrs	r2, r1
 800a000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00a      	beq.n	800a024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	430a      	orrs	r2, r1
 800a022:	605a      	str	r2, [r3, #4]
  }
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b098      	sub	sp, #96	@ 0x60
 800a034:	af02      	add	r7, sp, #8
 800a036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a040:	f7f9 f8f6 	bl	8003230 <HAL_GetTick>
 800a044:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 0308 	and.w	r3, r3, #8
 800a050:	2b08      	cmp	r3, #8
 800a052:	d12f      	bne.n	800a0b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a054:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a05c:	2200      	movs	r2, #0
 800a05e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f88e 	bl	800a184 <UART_WaitOnFlagUntilTimeout>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d022      	beq.n	800a0b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a076:	e853 3f00 	ldrex	r3, [r3]
 800a07a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a07e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a082:	653b      	str	r3, [r7, #80]	@ 0x50
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	461a      	mov	r2, r3
 800a08a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a08c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a08e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a090:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a094:	e841 2300 	strex	r3, r2, [r1]
 800a098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a09a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d1e6      	bne.n	800a06e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2220      	movs	r2, #32
 800a0a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e063      	b.n	800a17c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 0304 	and.w	r3, r3, #4
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d149      	bne.n	800a156 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 f857 	bl	800a184 <UART_WaitOnFlagUntilTimeout>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d03c      	beq.n	800a156 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e4:	e853 3f00 	ldrex	r3, [r3]
 800a0e8:	623b      	str	r3, [r7, #32]
   return(result);
 800a0ea:	6a3b      	ldr	r3, [r7, #32]
 800a0ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a102:	e841 2300 	strex	r3, r2, [r1]
 800a106:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1e6      	bne.n	800a0dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	3308      	adds	r3, #8
 800a114:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	e853 3f00 	ldrex	r3, [r3]
 800a11c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f023 0301 	bic.w	r3, r3, #1
 800a124:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3308      	adds	r3, #8
 800a12c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a12e:	61fa      	str	r2, [r7, #28]
 800a130:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a132:	69b9      	ldr	r1, [r7, #24]
 800a134:	69fa      	ldr	r2, [r7, #28]
 800a136:	e841 2300 	strex	r3, r2, [r1]
 800a13a:	617b      	str	r3, [r7, #20]
   return(result);
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1e5      	bne.n	800a10e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2220      	movs	r2, #32
 800a146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e012      	b.n	800a17c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2220      	movs	r2, #32
 800a15a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2220      	movs	r2, #32
 800a162:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3758      	adds	r7, #88	@ 0x58
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	603b      	str	r3, [r7, #0]
 800a190:	4613      	mov	r3, r2
 800a192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a194:	e04f      	b.n	800a236 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19c:	d04b      	beq.n	800a236 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a19e:	f7f9 f847 	bl	8003230 <HAL_GetTick>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	69ba      	ldr	r2, [r7, #24]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d302      	bcc.n	800a1b4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d101      	bne.n	800a1b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e04e      	b.n	800a256 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 0304 	and.w	r3, r3, #4
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d037      	beq.n	800a236 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	2b80      	cmp	r3, #128	@ 0x80
 800a1ca:	d034      	beq.n	800a236 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	2b40      	cmp	r3, #64	@ 0x40
 800a1d0:	d031      	beq.n	800a236 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	69db      	ldr	r3, [r3, #28]
 800a1d8:	f003 0308 	and.w	r3, r3, #8
 800a1dc:	2b08      	cmp	r3, #8
 800a1de:	d110      	bne.n	800a202 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2208      	movs	r2, #8
 800a1e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f000 f879 	bl	800a2e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2208      	movs	r2, #8
 800a1f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e029      	b.n	800a256 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	69db      	ldr	r3, [r3, #28]
 800a208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a20c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a210:	d111      	bne.n	800a236 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a21a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f000 f85f 	bl	800a2e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2220      	movs	r2, #32
 800a226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a232:	2303      	movs	r3, #3
 800a234:	e00f      	b.n	800a256 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	69da      	ldr	r2, [r3, #28]
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	4013      	ands	r3, r2
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	429a      	cmp	r2, r3
 800a244:	bf0c      	ite	eq
 800a246:	2301      	moveq	r3, #1
 800a248:	2300      	movne	r3, #0
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	461a      	mov	r2, r3
 800a24e:	79fb      	ldrb	r3, [r7, #7]
 800a250:	429a      	cmp	r2, r3
 800a252:	d0a0      	beq.n	800a196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a25e:	b480      	push	{r7}
 800a260:	b08f      	sub	sp, #60	@ 0x3c
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	e853 3f00 	ldrex	r3, [r3]
 800a272:	61fb      	str	r3, [r7, #28]
   return(result);
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a27a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	461a      	mov	r2, r3
 800a282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a286:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a288:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a28a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a28c:	e841 2300 	strex	r3, r2, [r1]
 800a290:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1e6      	bne.n	800a266 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	3308      	adds	r3, #8
 800a29e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	e853 3f00 	ldrex	r3, [r3]
 800a2a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a2ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3308      	adds	r3, #8
 800a2b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2b8:	61ba      	str	r2, [r7, #24]
 800a2ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2bc:	6979      	ldr	r1, [r7, #20]
 800a2be:	69ba      	ldr	r2, [r7, #24]
 800a2c0:	e841 2300 	strex	r3, r2, [r1]
 800a2c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1e5      	bne.n	800a298 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2220      	movs	r2, #32
 800a2d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a2d4:	bf00      	nop
 800a2d6:	373c      	adds	r7, #60	@ 0x3c
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b095      	sub	sp, #84	@ 0x54
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f0:	e853 3f00 	ldrex	r3, [r3]
 800a2f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a306:	643b      	str	r3, [r7, #64]	@ 0x40
 800a308:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a30c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a30e:	e841 2300 	strex	r3, r2, [r1]
 800a312:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1e6      	bne.n	800a2e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	3308      	adds	r3, #8
 800a320:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	e853 3f00 	ldrex	r3, [r3]
 800a328:	61fb      	str	r3, [r7, #28]
   return(result);
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a330:	f023 0301 	bic.w	r3, r3, #1
 800a334:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3308      	adds	r3, #8
 800a33c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a33e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a340:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a342:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a346:	e841 2300 	strex	r3, r2, [r1]
 800a34a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1e3      	bne.n	800a31a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a356:	2b01      	cmp	r3, #1
 800a358:	d118      	bne.n	800a38c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	e853 3f00 	ldrex	r3, [r3]
 800a366:	60bb      	str	r3, [r7, #8]
   return(result);
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	f023 0310 	bic.w	r3, r3, #16
 800a36e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	461a      	mov	r2, r3
 800a376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a378:	61bb      	str	r3, [r7, #24]
 800a37a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37c:	6979      	ldr	r1, [r7, #20]
 800a37e:	69ba      	ldr	r2, [r7, #24]
 800a380:	e841 2300 	strex	r3, r2, [r1]
 800a384:	613b      	str	r3, [r7, #16]
   return(result);
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1e6      	bne.n	800a35a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2220      	movs	r2, #32
 800a390:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a3a0:	bf00      	nop
 800a3a2:	3754      	adds	r7, #84	@ 0x54
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b090      	sub	sp, #64	@ 0x40
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 0320 	and.w	r3, r3, #32
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d137      	bne.n	800a438 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a3c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3308      	adds	r3, #8
 800a3d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3da:	e853 3f00 	ldrex	r3, [r3]
 800a3de:	623b      	str	r3, [r7, #32]
   return(result);
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	3308      	adds	r3, #8
 800a3ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3f0:	633a      	str	r2, [r7, #48]	@ 0x30
 800a3f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3f8:	e841 2300 	strex	r3, r2, [r1]
 800a3fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1e5      	bne.n	800a3d0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	e853 3f00 	ldrex	r3, [r3]
 800a410:	60fb      	str	r3, [r7, #12]
   return(result);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a418:	637b      	str	r3, [r7, #52]	@ 0x34
 800a41a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	461a      	mov	r2, r3
 800a420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a422:	61fb      	str	r3, [r7, #28]
 800a424:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a426:	69b9      	ldr	r1, [r7, #24]
 800a428:	69fa      	ldr	r2, [r7, #28]
 800a42a:	e841 2300 	strex	r3, r2, [r1]
 800a42e:	617b      	str	r3, [r7, #20]
   return(result);
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1e6      	bne.n	800a404 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a436:	e002      	b.n	800a43e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a438:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a43a:	f7f8 f8d1 	bl	80025e0 <HAL_UART_TxCpltCallback>
}
 800a43e:	bf00      	nop
 800a440:	3740      	adds	r7, #64	@ 0x40
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b084      	sub	sp, #16
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a452:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f7ff fb01 	bl	8009a5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a45a:	bf00      	nop
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b086      	sub	sp, #24
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a46e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a476:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a47e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a48a:	2b80      	cmp	r3, #128	@ 0x80
 800a48c:	d109      	bne.n	800a4a2 <UART_DMAError+0x40>
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	2b21      	cmp	r3, #33	@ 0x21
 800a492:	d106      	bne.n	800a4a2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	2200      	movs	r2, #0
 800a498:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a49c:	6978      	ldr	r0, [r7, #20]
 800a49e:	f7ff fede 	bl	800a25e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4ac:	2b40      	cmp	r3, #64	@ 0x40
 800a4ae:	d109      	bne.n	800a4c4 <UART_DMAError+0x62>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2b22      	cmp	r3, #34	@ 0x22
 800a4b4:	d106      	bne.n	800a4c4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a4be:	6978      	ldr	r0, [r7, #20]
 800a4c0:	f7ff ff0e 	bl	800a2e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4ca:	f043 0210 	orr.w	r2, r3, #16
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4d4:	6978      	ldr	r0, [r7, #20]
 800a4d6:	f7ff facb 	bl	8009a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4da:	bf00      	nop
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7ff fab5 	bl	8009a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a506:	bf00      	nop
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b088      	sub	sp, #32
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	e853 3f00 	ldrex	r3, [r3]
 800a522:	60bb      	str	r3, [r7, #8]
   return(result);
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a52a:	61fb      	str	r3, [r7, #28]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	461a      	mov	r2, r3
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	61bb      	str	r3, [r7, #24]
 800a536:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a538:	6979      	ldr	r1, [r7, #20]
 800a53a:	69ba      	ldr	r2, [r7, #24]
 800a53c:	e841 2300 	strex	r3, r2, [r1]
 800a540:	613b      	str	r3, [r7, #16]
   return(result);
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1e6      	bne.n	800a516 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2220      	movs	r2, #32
 800a54c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f7f8 f842 	bl	80025e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a55c:	bf00      	nop
 800a55e:	3720      	adds	r7, #32
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d101      	bne.n	800a5b6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a5b2:	2302      	movs	r3, #2
 800a5b4:	e027      	b.n	800a606 <HAL_UARTEx_DisableFifoMode+0x66>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2224      	movs	r2, #36	@ 0x24
 800a5c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f022 0201 	bic.w	r2, r2, #1
 800a5dc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a5e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2220      	movs	r2, #32
 800a5f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3714      	adds	r7, #20
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b084      	sub	sp, #16
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a622:	2b01      	cmp	r3, #1
 800a624:	d101      	bne.n	800a62a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a626:	2302      	movs	r3, #2
 800a628:	e02d      	b.n	800a686 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2224      	movs	r2, #36	@ 0x24
 800a636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f022 0201 	bic.w	r2, r2, #1
 800a650:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	683a      	ldr	r2, [r7, #0]
 800a662:	430a      	orrs	r2, r1
 800a664:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 f850 	bl	800a70c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2220      	movs	r2, #32
 800a678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b084      	sub	sp, #16
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d101      	bne.n	800a6a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	e02d      	b.n	800a702 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2224      	movs	r2, #36	@ 0x24
 800a6b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f022 0201 	bic.w	r2, r2, #1
 800a6cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f812 	bl	800a70c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2220      	movs	r2, #32
 800a6f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
	...

0800a70c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d108      	bne.n	800a72e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a72c:	e031      	b.n	800a792 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a72e:	2308      	movs	r3, #8
 800a730:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a732:	2308      	movs	r3, #8
 800a734:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	0e5b      	lsrs	r3, r3, #25
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	f003 0307 	and.w	r3, r3, #7
 800a744:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	0f5b      	lsrs	r3, r3, #29
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	f003 0307 	and.w	r3, r3, #7
 800a754:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a756:	7bbb      	ldrb	r3, [r7, #14]
 800a758:	7b3a      	ldrb	r2, [r7, #12]
 800a75a:	4911      	ldr	r1, [pc, #68]	@ (800a7a0 <UARTEx_SetNbDataToProcess+0x94>)
 800a75c:	5c8a      	ldrb	r2, [r1, r2]
 800a75e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a762:	7b3a      	ldrb	r2, [r7, #12]
 800a764:	490f      	ldr	r1, [pc, #60]	@ (800a7a4 <UARTEx_SetNbDataToProcess+0x98>)
 800a766:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a768:	fb93 f3f2 	sdiv	r3, r3, r2
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	7b7a      	ldrb	r2, [r7, #13]
 800a778:	4909      	ldr	r1, [pc, #36]	@ (800a7a0 <UARTEx_SetNbDataToProcess+0x94>)
 800a77a:	5c8a      	ldrb	r2, [r1, r2]
 800a77c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a780:	7b7a      	ldrb	r2, [r7, #13]
 800a782:	4908      	ldr	r1, [pc, #32]	@ (800a7a4 <UARTEx_SetNbDataToProcess+0x98>)
 800a784:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a786:	fb93 f3f2 	sdiv	r3, r3, r2
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a792:	bf00      	nop
 800a794:	3714      	adds	r7, #20
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	080167bc 	.word	0x080167bc
 800a7a4:	080167c4 	.word	0x080167c4

0800a7a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a7b8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a7bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3714      	adds	r7, #20
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b085      	sub	sp, #20
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a7de:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a7e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	43db      	mvns	r3, r3
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3714      	adds	r7, #20
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	1d3b      	adds	r3, r7, #4
 800a816:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2200      	movs	r2, #0
 800a836:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a848:	b480      	push	{r7}
 800a84a:	b09d      	sub	sp, #116	@ 0x74
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4413      	add	r3, r2
 800a862:	881b      	ldrh	r3, [r3, #0]
 800a864:	b29b      	uxth	r3, r3
 800a866:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800a86a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a86e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	78db      	ldrb	r3, [r3, #3]
 800a876:	2b03      	cmp	r3, #3
 800a878:	d81f      	bhi.n	800a8ba <USB_ActivateEndpoint+0x72>
 800a87a:	a201      	add	r2, pc, #4	@ (adr r2, 800a880 <USB_ActivateEndpoint+0x38>)
 800a87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a880:	0800a891 	.word	0x0800a891
 800a884:	0800a8ad 	.word	0x0800a8ad
 800a888:	0800a8c3 	.word	0x0800a8c3
 800a88c:	0800a89f 	.word	0x0800a89f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a890:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a894:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a898:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a89c:	e012      	b.n	800a8c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a89e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a8a2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800a8a6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a8aa:	e00b      	b.n	800a8c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a8ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a8b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a8b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a8b8:	e004      	b.n	800a8c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800a8c0:	e000      	b.n	800a8c4 <USB_ActivateEndpoint+0x7c>
      break;
 800a8c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	441a      	add	r2, r3
 800a8ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a8d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4413      	add	r3, r2
 800a8f0:	881b      	ldrh	r3, [r3, #0]
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	b21b      	sxth	r3, r3
 800a8f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8fe:	b21a      	sxth	r2, r3
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	b21b      	sxth	r3, r3
 800a906:	4313      	orrs	r3, r2
 800a908:	b21b      	sxth	r3, r3
 800a90a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	441a      	add	r2, r3
 800a918:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a91c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a920:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a924:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	7b1b      	ldrb	r3, [r3, #12]
 800a934:	2b00      	cmp	r3, #0
 800a936:	f040 8178 	bne.w	800ac2a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	785b      	ldrb	r3, [r3, #1]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f000 8084 	beq.w	800aa4c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	61bb      	str	r3, [r7, #24]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a94e:	b29b      	uxth	r3, r3
 800a950:	461a      	mov	r2, r3
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	4413      	add	r3, r2
 800a956:	61bb      	str	r3, [r7, #24]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	00da      	lsls	r2, r3, #3
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	4413      	add	r3, r2
 800a962:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a966:	617b      	str	r3, [r7, #20]
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	88db      	ldrh	r3, [r3, #6]
 800a96c:	085b      	lsrs	r3, r3, #1
 800a96e:	b29b      	uxth	r3, r3
 800a970:	005b      	lsls	r3, r3, #1
 800a972:	b29a      	uxth	r2, r3
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4413      	add	r3, r2
 800a982:	881b      	ldrh	r3, [r3, #0]
 800a984:	827b      	strh	r3, [r7, #18]
 800a986:	8a7b      	ldrh	r3, [r7, #18]
 800a988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d01b      	beq.n	800a9c8 <USB_ActivateEndpoint+0x180>
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9a6:	823b      	strh	r3, [r7, #16]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	441a      	add	r2, r3
 800a9b2:	8a3b      	ldrh	r3, [r7, #16]
 800a9b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	78db      	ldrb	r3, [r3, #3]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d020      	beq.n	800aa12 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	4413      	add	r3, r2
 800a9da:	881b      	ldrh	r3, [r3, #0]
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9e6:	81bb      	strh	r3, [r7, #12]
 800a9e8:	89bb      	ldrh	r3, [r7, #12]
 800a9ea:	f083 0320 	eor.w	r3, r3, #32
 800a9ee:	81bb      	strh	r3, [r7, #12]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	441a      	add	r2, r3
 800a9fa:	89bb      	ldrh	r3, [r7, #12]
 800a9fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	8013      	strh	r3, [r2, #0]
 800aa10:	e2d5      	b.n	800afbe <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4413      	add	r3, r2
 800aa1c:	881b      	ldrh	r3, [r3, #0]
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa28:	81fb      	strh	r3, [r7, #14]
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	441a      	add	r2, r3
 800aa34:	89fb      	ldrh	r3, [r7, #14]
 800aa36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	8013      	strh	r3, [r2, #0]
 800aa4a:	e2b8      	b.n	800afbe <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	461a      	mov	r2, r3
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5c:	4413      	add	r3, r2
 800aa5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	00da      	lsls	r2, r3, #3
 800aa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa68:	4413      	add	r3, r2
 800aa6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800aa6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	88db      	ldrh	r3, [r3, #6]
 800aa74:	085b      	lsrs	r3, r3, #1
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	005b      	lsls	r3, r3, #1
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa90:	4413      	add	r3, r2
 800aa92:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	00da      	lsls	r2, r3, #3
 800aa9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9c:	4413      	add	r3, r2
 800aa9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aaa2:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa6:	881b      	ldrh	r3, [r3, #0]
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab2:	801a      	strh	r2, [r3, #0]
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	2b3e      	cmp	r3, #62	@ 0x3e
 800aaba:	d91d      	bls.n	800aaf8 <USB_ActivateEndpoint+0x2b0>
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	095b      	lsrs	r3, r3, #5
 800aac2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	f003 031f 	and.w	r3, r3, #31
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d102      	bne.n	800aad6 <USB_ActivateEndpoint+0x28e>
 800aad0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aad2:	3b01      	subs	r3, #1
 800aad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad8:	881b      	ldrh	r3, [r3, #0]
 800aada:	b29a      	uxth	r2, r3
 800aadc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aade:	b29b      	uxth	r3, r3
 800aae0:	029b      	lsls	r3, r3, #10
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	4313      	orrs	r3, r2
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf4:	801a      	strh	r2, [r3, #0]
 800aaf6:	e026      	b.n	800ab46 <USB_ActivateEndpoint+0x2fe>
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	691b      	ldr	r3, [r3, #16]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10a      	bne.n	800ab16 <USB_ActivateEndpoint+0x2ce>
 800ab00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab02:	881b      	ldrh	r3, [r3, #0]
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab12:	801a      	strh	r2, [r3, #0]
 800ab14:	e017      	b.n	800ab46 <USB_ActivateEndpoint+0x2fe>
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	085b      	lsrs	r3, r3, #1
 800ab1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d002      	beq.n	800ab30 <USB_ActivateEndpoint+0x2e8>
 800ab2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	029b      	lsls	r3, r3, #10
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4413      	add	r3, r2
 800ab50:	881b      	ldrh	r3, [r3, #0]
 800ab52:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ab54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ab56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d01b      	beq.n	800ab96 <USB_ActivateEndpoint+0x34e>
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	4413      	add	r3, r2
 800ab68:	881b      	ldrh	r3, [r3, #0]
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab74:	843b      	strh	r3, [r7, #32]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	441a      	add	r2, r3
 800ab80:	8c3b      	ldrh	r3, [r7, #32]
 800ab82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ab8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d124      	bne.n	800abe8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	b29b      	uxth	r3, r3
 800abac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800abb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abb4:	83bb      	strh	r3, [r7, #28]
 800abb6:	8bbb      	ldrh	r3, [r7, #28]
 800abb8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800abbc:	83bb      	strh	r3, [r7, #28]
 800abbe:	8bbb      	ldrh	r3, [r7, #28]
 800abc0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800abc4:	83bb      	strh	r3, [r7, #28]
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	441a      	add	r2, r3
 800abd0:	8bbb      	ldrh	r3, [r7, #28]
 800abd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	8013      	strh	r3, [r2, #0]
 800abe6:	e1ea      	b.n	800afbe <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4413      	add	r3, r2
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800abfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abfe:	83fb      	strh	r3, [r7, #30]
 800ac00:	8bfb      	ldrh	r3, [r7, #30]
 800ac02:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ac06:	83fb      	strh	r3, [r7, #30]
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	441a      	add	r2, r3
 800ac12:	8bfb      	ldrh	r3, [r7, #30]
 800ac14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	8013      	strh	r3, [r2, #0]
 800ac28:	e1c9      	b.n	800afbe <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	78db      	ldrb	r3, [r3, #3]
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d11e      	bne.n	800ac70 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4413      	add	r3, r2
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac48:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	441a      	add	r2, r3
 800ac56:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ac5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac62:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ac66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	8013      	strh	r3, [r2, #0]
 800ac6e:	e01d      	b.n	800acac <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	881b      	ldrh	r3, [r3, #0]
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ac82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac86:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	441a      	add	r2, r3
 800ac94:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800ac98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	461a      	mov	r2, r3
 800acba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acbc:	4413      	add	r3, r2
 800acbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	00da      	lsls	r2, r3, #3
 800acc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acc8:	4413      	add	r3, r2
 800acca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	891b      	ldrh	r3, [r3, #8]
 800acd4:	085b      	lsrs	r3, r3, #1
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	005b      	lsls	r3, r3, #1
 800acda:	b29a      	uxth	r2, r3
 800acdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800acde:	801a      	strh	r2, [r3, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	657b      	str	r3, [r7, #84]	@ 0x54
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acea:	b29b      	uxth	r3, r3
 800acec:	461a      	mov	r2, r3
 800acee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acf0:	4413      	add	r3, r2
 800acf2:	657b      	str	r3, [r7, #84]	@ 0x54
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	00da      	lsls	r2, r3, #3
 800acfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acfc:	4413      	add	r3, r2
 800acfe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ad02:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	895b      	ldrh	r3, [r3, #10]
 800ad08:	085b      	lsrs	r3, r3, #1
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	005b      	lsls	r3, r3, #1
 800ad0e:	b29a      	uxth	r2, r3
 800ad10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad12:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	785b      	ldrb	r3, [r3, #1]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f040 8093 	bne.w	800ae44 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4413      	add	r3, r2
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800ad2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ad32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d01b      	beq.n	800ad72 <USB_ActivateEndpoint+0x52a>
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4413      	add	r3, r2
 800ad44:	881b      	ldrh	r3, [r3, #0]
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad50:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	441a      	add	r2, r3
 800ad5c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ad5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ad6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4413      	add	r3, r2
 800ad7c:	881b      	ldrh	r3, [r3, #0]
 800ad7e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800ad80:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ad82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d01b      	beq.n	800adc2 <USB_ActivateEndpoint+0x57a>
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	881b      	ldrh	r3, [r3, #0]
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ada0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	441a      	add	r2, r3
 800adac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800adae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	4413      	add	r3, r2
 800adcc:	881b      	ldrh	r3, [r3, #0]
 800adce:	b29b      	uxth	r3, r3
 800add0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800add4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800add8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800adda:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800addc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ade0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800ade2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ade4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ade8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	441a      	add	r2, r3
 800adf4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800adf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	4413      	add	r3, r2
 800ae14:	881b      	ldrh	r3, [r3, #0]
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae20:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	441a      	add	r2, r3
 800ae2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	8013      	strh	r3, [r2, #0]
 800ae42:	e0bc      	b.n	800afbe <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ae54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ae58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d01d      	beq.n	800ae9c <USB_ActivateEndpoint+0x654>
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	881b      	ldrh	r3, [r3, #0]
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae76:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	441a      	add	r2, r3
 800ae84:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ae88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ae94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800aeac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800aeb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d01d      	beq.n	800aef4 <USB_ActivateEndpoint+0x6ac>
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4413      	add	r3, r2
 800aec2:	881b      	ldrh	r3, [r3, #0]
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aeca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aece:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	441a      	add	r2, r3
 800aedc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800aee0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aee4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aee8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aeec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	78db      	ldrb	r3, [r3, #3]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d024      	beq.n	800af46 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	881b      	ldrh	r3, [r3, #0]
 800af08:	b29b      	uxth	r3, r3
 800af0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af12:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800af16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800af1a:	f083 0320 	eor.w	r3, r3, #32
 800af1e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	441a      	add	r2, r3
 800af2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800af30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af40:	b29b      	uxth	r3, r3
 800af42:	8013      	strh	r3, [r2, #0]
 800af44:	e01d      	b.n	800af82 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4413      	add	r3, r2
 800af50:	881b      	ldrh	r3, [r3, #0]
 800af52:	b29b      	uxth	r3, r3
 800af54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af5c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	441a      	add	r2, r3
 800af6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800af6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af7e:	b29b      	uxth	r3, r3
 800af80:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4413      	add	r3, r2
 800af8c:	881b      	ldrh	r3, [r3, #0]
 800af8e:	b29b      	uxth	r3, r3
 800af90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af98:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	441a      	add	r2, r3
 800afa6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800afaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afba:	b29b      	uxth	r3, r3
 800afbc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800afbe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3774      	adds	r7, #116	@ 0x74
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop

0800afd0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b08d      	sub	sp, #52	@ 0x34
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	7b1b      	ldrb	r3, [r3, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f040 808e 	bne.w	800b100 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	785b      	ldrb	r3, [r3, #1]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d044      	beq.n	800b076 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	4413      	add	r3, r2
 800aff6:	881b      	ldrh	r3, [r3, #0]
 800aff8:	81bb      	strh	r3, [r7, #12]
 800affa:	89bb      	ldrh	r3, [r7, #12]
 800affc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b000:	2b00      	cmp	r3, #0
 800b002:	d01b      	beq.n	800b03c <USB_DeactivateEndpoint+0x6c>
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4413      	add	r3, r2
 800b00e:	881b      	ldrh	r3, [r3, #0]
 800b010:	b29b      	uxth	r3, r3
 800b012:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b01a:	817b      	strh	r3, [r7, #10]
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	441a      	add	r2, r3
 800b026:	897b      	ldrh	r3, [r7, #10]
 800b028:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b02c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b030:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b034:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b038:	b29b      	uxth	r3, r3
 800b03a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4413      	add	r3, r2
 800b046:	881b      	ldrh	r3, [r3, #0]
 800b048:	b29b      	uxth	r3, r3
 800b04a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b04e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b052:	813b      	strh	r3, [r7, #8]
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	441a      	add	r2, r3
 800b05e:	893b      	ldrh	r3, [r7, #8]
 800b060:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b064:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b068:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b06c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b070:	b29b      	uxth	r3, r3
 800b072:	8013      	strh	r3, [r2, #0]
 800b074:	e192      	b.n	800b39c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4413      	add	r3, r2
 800b080:	881b      	ldrh	r3, [r3, #0]
 800b082:	827b      	strh	r3, [r7, #18]
 800b084:	8a7b      	ldrh	r3, [r7, #18]
 800b086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d01b      	beq.n	800b0c6 <USB_DeactivateEndpoint+0xf6>
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4413      	add	r3, r2
 800b098:	881b      	ldrh	r3, [r3, #0]
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0a4:	823b      	strh	r3, [r7, #16]
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	441a      	add	r2, r3
 800b0b0:	8a3b      	ldrh	r3, [r7, #16]
 800b0b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b0be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	4413      	add	r3, r2
 800b0d0:	881b      	ldrh	r3, [r3, #0]
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b0d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0dc:	81fb      	strh	r3, [r7, #14]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	441a      	add	r2, r3
 800b0e8:	89fb      	ldrh	r3, [r7, #14]
 800b0ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	8013      	strh	r3, [r2, #0]
 800b0fe:	e14d      	b.n	800b39c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	785b      	ldrb	r3, [r3, #1]
 800b104:	2b00      	cmp	r3, #0
 800b106:	f040 80a5 	bne.w	800b254 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	4413      	add	r3, r2
 800b114:	881b      	ldrh	r3, [r3, #0]
 800b116:	843b      	strh	r3, [r7, #32]
 800b118:	8c3b      	ldrh	r3, [r7, #32]
 800b11a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d01b      	beq.n	800b15a <USB_DeactivateEndpoint+0x18a>
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	b29b      	uxth	r3, r3
 800b130:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b138:	83fb      	strh	r3, [r7, #30]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	441a      	add	r2, r3
 800b144:	8bfb      	ldrh	r3, [r7, #30]
 800b146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b14a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b14e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b156:	b29b      	uxth	r3, r3
 800b158:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4413      	add	r3, r2
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	83bb      	strh	r3, [r7, #28]
 800b168:	8bbb      	ldrh	r3, [r7, #28]
 800b16a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d01b      	beq.n	800b1aa <USB_DeactivateEndpoint+0x1da>
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	881b      	ldrh	r3, [r3, #0]
 800b17e:	b29b      	uxth	r3, r3
 800b180:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b188:	837b      	strh	r3, [r7, #26]
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	441a      	add	r2, r3
 800b194:	8b7b      	ldrh	r3, [r7, #26]
 800b196:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b19a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b19e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	4413      	add	r3, r2
 800b1b4:	881b      	ldrh	r3, [r3, #0]
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1c0:	833b      	strh	r3, [r7, #24]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	441a      	add	r2, r3
 800b1cc:	8b3b      	ldrh	r3, [r7, #24]
 800b1ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	881b      	ldrh	r3, [r3, #0]
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b1f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1f8:	82fb      	strh	r3, [r7, #22]
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	441a      	add	r2, r3
 800b204:	8afb      	ldrh	r3, [r7, #22]
 800b206:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b20a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b20e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b216:	b29b      	uxth	r3, r3
 800b218:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	881b      	ldrh	r3, [r3, #0]
 800b226:	b29b      	uxth	r3, r3
 800b228:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b22c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b230:	82bb      	strh	r3, [r7, #20]
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	441a      	add	r2, r3
 800b23c:	8abb      	ldrh	r3, [r7, #20]
 800b23e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b242:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b246:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b24a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b24e:	b29b      	uxth	r3, r3
 800b250:	8013      	strh	r3, [r2, #0]
 800b252:	e0a3      	b.n	800b39c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4413      	add	r3, r2
 800b25e:	881b      	ldrh	r3, [r3, #0]
 800b260:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b262:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b264:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d01b      	beq.n	800b2a4 <USB_DeactivateEndpoint+0x2d4>
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	881b      	ldrh	r3, [r3, #0]
 800b278:	b29b      	uxth	r3, r3
 800b27a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b27e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b282:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	441a      	add	r2, r3
 800b28e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b290:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b294:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b298:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b29c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	881b      	ldrh	r3, [r3, #0]
 800b2b0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800b2b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b2b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d01b      	beq.n	800b2f4 <USB_DeactivateEndpoint+0x324>
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	4413      	add	r3, r2
 800b2c6:	881b      	ldrh	r3, [r3, #0]
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	441a      	add	r2, r3
 800b2de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b2e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4413      	add	r3, r2
 800b2fe:	881b      	ldrh	r3, [r3, #0]
 800b300:	b29b      	uxth	r3, r3
 800b302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b30a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	441a      	add	r2, r3
 800b316:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b31c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b320:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b328:	b29b      	uxth	r3, r3
 800b32a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4413      	add	r3, r2
 800b336:	881b      	ldrh	r3, [r3, #0]
 800b338:	b29b      	uxth	r3, r3
 800b33a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b33e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b342:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	441a      	add	r2, r3
 800b34e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b350:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b354:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b35c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b360:	b29b      	uxth	r3, r3
 800b362:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	4413      	add	r3, r2
 800b36e:	881b      	ldrh	r3, [r3, #0]
 800b370:	b29b      	uxth	r3, r3
 800b372:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b37a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	441a      	add	r2, r3
 800b386:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b388:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b38c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b390:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b398:	b29b      	uxth	r3, r3
 800b39a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b39c:	2300      	movs	r3, #0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3734      	adds	r7, #52	@ 0x34
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr

0800b3aa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b0c2      	sub	sp, #264	@ 0x108
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3b8:	6018      	str	r0, [r3, #0]
 800b3ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3c2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b3c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	785b      	ldrb	r3, [r3, #1]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	f040 86b7 	bne.w	800c144 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b3d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	699a      	ldr	r2, [r3, #24]
 800b3e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d908      	bls.n	800b404 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b3f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b402:	e007      	b.n	800b414 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	7b1b      	ldrb	r3, [r3, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d13a      	bne.n	800b49a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	6959      	ldr	r1, [r3, #20]
 800b430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	88da      	ldrh	r2, [r3, #6]
 800b43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b440:	b29b      	uxth	r3, r3
 800b442:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b446:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b44a:	6800      	ldr	r0, [r0, #0]
 800b44c:	f001 fc98 	bl	800cd80 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	613b      	str	r3, [r7, #16]
 800b45c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b460:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	461a      	mov	r2, r3
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	4413      	add	r3, r2
 800b472:	613b      	str	r3, [r7, #16]
 800b474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	00da      	lsls	r2, r3, #3
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	4413      	add	r3, r2
 800b486:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b48a:	60fb      	str	r3, [r7, #12]
 800b48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b490:	b29a      	uxth	r2, r3
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	801a      	strh	r2, [r3, #0]
 800b496:	f000 be1f 	b.w	800c0d8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b49a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b49e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	78db      	ldrb	r3, [r3, #3]
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	f040 8462 	bne.w	800bd70 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b4ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	6a1a      	ldr	r2, [r3, #32]
 800b4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	f240 83df 	bls.w	800bc88 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b4ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	009b      	lsls	r3, r3, #2
 800b4e2:	4413      	add	r3, r2
 800b4e4:	881b      	ldrh	r3, [r3, #0]
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4f0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b4f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	441a      	add	r2, r3
 800b50e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b51a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b51e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b522:	b29b      	uxth	r3, r3
 800b524:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b52a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	6a1a      	ldr	r2, [r3, #32]
 800b532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b536:	1ad2      	subs	r2, r2, r3
 800b538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b53c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b548:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4413      	add	r3, r2
 800b55e:	881b      	ldrh	r3, [r3, #0]
 800b560:	b29b      	uxth	r3, r3
 800b562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b566:	2b00      	cmp	r3, #0
 800b568:	f000 81c7 	beq.w	800b8fa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b56c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b570:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	633b      	str	r3, [r7, #48]	@ 0x30
 800b578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b57c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	785b      	ldrb	r3, [r3, #1]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d177      	bne.n	800b678 <USB_EPStartXfer+0x2ce>
 800b588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b58c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b598:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5a8:	4413      	add	r3, r2
 800b5aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	00da      	lsls	r2, r3, #3
 800b5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5bc:	4413      	add	r3, r2
 800b5be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b5c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c6:	881b      	ldrh	r3, [r3, #0]
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5ce:	b29a      	uxth	r2, r3
 800b5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d2:	801a      	strh	r2, [r3, #0]
 800b5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5da:	d921      	bls.n	800b620 <USB_EPStartXfer+0x276>
 800b5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5e0:	095b      	lsrs	r3, r3, #5
 800b5e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5ea:	f003 031f 	and.w	r3, r3, #31
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d104      	bne.n	800b5fc <USB_EPStartXfer+0x252>
 800b5f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fe:	881b      	ldrh	r3, [r3, #0]
 800b600:	b29a      	uxth	r2, r3
 800b602:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b606:	b29b      	uxth	r3, r3
 800b608:	029b      	lsls	r3, r3, #10
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	4313      	orrs	r3, r2
 800b60e:	b29b      	uxth	r3, r3
 800b610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b618:	b29a      	uxth	r2, r3
 800b61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61c:	801a      	strh	r2, [r3, #0]
 800b61e:	e050      	b.n	800b6c2 <USB_EPStartXfer+0x318>
 800b620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b624:	2b00      	cmp	r3, #0
 800b626:	d10a      	bne.n	800b63e <USB_EPStartXfer+0x294>
 800b628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62a:	881b      	ldrh	r3, [r3, #0]
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b636:	b29a      	uxth	r2, r3
 800b638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63a:	801a      	strh	r2, [r3, #0]
 800b63c:	e041      	b.n	800b6c2 <USB_EPStartXfer+0x318>
 800b63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b642:	085b      	lsrs	r3, r3, #1
 800b644:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b64c:	f003 0301 	and.w	r3, r3, #1
 800b650:	2b00      	cmp	r3, #0
 800b652:	d004      	beq.n	800b65e <USB_EPStartXfer+0x2b4>
 800b654:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b658:	3301      	adds	r3, #1
 800b65a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b660:	881b      	ldrh	r3, [r3, #0]
 800b662:	b29a      	uxth	r2, r3
 800b664:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b668:	b29b      	uxth	r3, r3
 800b66a:	029b      	lsls	r3, r3, #10
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	4313      	orrs	r3, r2
 800b670:	b29a      	uxth	r2, r3
 800b672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b674:	801a      	strh	r2, [r3, #0]
 800b676:	e024      	b.n	800b6c2 <USB_EPStartXfer+0x318>
 800b678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b67c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	785b      	ldrb	r3, [r3, #1]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d11c      	bne.n	800b6c2 <USB_EPStartXfer+0x318>
 800b688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b68c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b696:	b29b      	uxth	r3, r3
 800b698:	461a      	mov	r2, r3
 800b69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b69c:	4413      	add	r3, r2
 800b69e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	00da      	lsls	r2, r3, #3
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b0:	4413      	add	r3, r2
 800b6b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b6b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b6c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	895b      	ldrh	r3, [r3, #10]
 800b6ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	6959      	ldr	r1, [r3, #20]
 800b6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b6e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b6ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b6f0:	6800      	ldr	r0, [r0, #0]
 800b6f2:	f001 fb45 	bl	800cd80 <USB_WritePMA>
            ep->xfer_buff += len;
 800b6f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	695a      	ldr	r2, [r3, #20]
 800b702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b706:	441a      	add	r2, r3
 800b708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b70c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	6a1a      	ldr	r2, [r3, #32]
 800b720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	691b      	ldr	r3, [r3, #16]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d90f      	bls.n	800b750 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6a1a      	ldr	r2, [r3, #32]
 800b73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b740:	1ad2      	subs	r2, r2, r3
 800b742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	621a      	str	r2, [r3, #32]
 800b74e:	e00e      	b.n	800b76e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	6a1b      	ldr	r3, [r3, #32]
 800b75c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2200      	movs	r2, #0
 800b76c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b76e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	785b      	ldrb	r3, [r3, #1]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d177      	bne.n	800b86e <USB_EPStartXfer+0x4c4>
 800b77e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b782:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	61bb      	str	r3, [r7, #24]
 800b78a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b78e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b798:	b29b      	uxth	r3, r3
 800b79a:	461a      	mov	r2, r3
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	4413      	add	r3, r2
 800b7a0:	61bb      	str	r3, [r7, #24]
 800b7a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	00da      	lsls	r2, r3, #3
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b7b8:	617b      	str	r3, [r7, #20]
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	881b      	ldrh	r3, [r3, #0]
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	801a      	strh	r2, [r3, #0]
 800b7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800b7d0:	d921      	bls.n	800b816 <USB_EPStartXfer+0x46c>
 800b7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7d6:	095b      	lsrs	r3, r3, #5
 800b7d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7e0:	f003 031f 	and.w	r3, r3, #31
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d104      	bne.n	800b7f2 <USB_EPStartXfer+0x448>
 800b7e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	881b      	ldrh	r3, [r3, #0]
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	029b      	lsls	r3, r3, #10
 800b800:	b29b      	uxth	r3, r3
 800b802:	4313      	orrs	r3, r2
 800b804:	b29b      	uxth	r3, r3
 800b806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b80a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b80e:	b29a      	uxth	r2, r3
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	801a      	strh	r2, [r3, #0]
 800b814:	e056      	b.n	800b8c4 <USB_EPStartXfer+0x51a>
 800b816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10a      	bne.n	800b834 <USB_EPStartXfer+0x48a>
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	881b      	ldrh	r3, [r3, #0]
 800b822:	b29b      	uxth	r3, r3
 800b824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	801a      	strh	r2, [r3, #0]
 800b832:	e047      	b.n	800b8c4 <USB_EPStartXfer+0x51a>
 800b834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b838:	085b      	lsrs	r3, r3, #1
 800b83a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b842:	f003 0301 	and.w	r3, r3, #1
 800b846:	2b00      	cmp	r3, #0
 800b848:	d004      	beq.n	800b854 <USB_EPStartXfer+0x4aa>
 800b84a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b84e:	3301      	adds	r3, #1
 800b850:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	881b      	ldrh	r3, [r3, #0]
 800b858:	b29a      	uxth	r2, r3
 800b85a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b85e:	b29b      	uxth	r3, r3
 800b860:	029b      	lsls	r3, r3, #10
 800b862:	b29b      	uxth	r3, r3
 800b864:	4313      	orrs	r3, r2
 800b866:	b29a      	uxth	r2, r3
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	801a      	strh	r2, [r3, #0]
 800b86c:	e02a      	b.n	800b8c4 <USB_EPStartXfer+0x51a>
 800b86e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	785b      	ldrb	r3, [r3, #1]
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d122      	bne.n	800b8c4 <USB_EPStartXfer+0x51a>
 800b87e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b882:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	623b      	str	r3, [r7, #32]
 800b88a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b88e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b898:	b29b      	uxth	r3, r3
 800b89a:	461a      	mov	r2, r3
 800b89c:	6a3b      	ldr	r3, [r7, #32]
 800b89e:	4413      	add	r3, r2
 800b8a0:	623b      	str	r3, [r7, #32]
 800b8a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	00da      	lsls	r2, r3, #3
 800b8b0:	6a3b      	ldr	r3, [r7, #32]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b8b8:	61fb      	str	r3, [r7, #28]
 800b8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b8c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	891b      	ldrh	r3, [r3, #8]
 800b8d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6959      	ldr	r1, [r3, #20]
 800b8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b8ea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b8ee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b8f2:	6800      	ldr	r0, [r0, #0]
 800b8f4:	f001 fa44 	bl	800cd80 <USB_WritePMA>
 800b8f8:	e3ee      	b.n	800c0d8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b8fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	785b      	ldrb	r3, [r3, #1]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d177      	bne.n	800b9fa <USB_EPStartXfer+0x650>
 800b90a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b90e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b91a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b924:	b29b      	uxth	r3, r3
 800b926:	461a      	mov	r2, r3
 800b928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b92a:	4413      	add	r3, r2
 800b92c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b92e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	00da      	lsls	r2, r3, #3
 800b93c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b93e:	4413      	add	r3, r2
 800b940:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b944:	647b      	str	r3, [r7, #68]	@ 0x44
 800b946:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b948:	881b      	ldrh	r3, [r3, #0]
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b950:	b29a      	uxth	r2, r3
 800b952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b954:	801a      	strh	r2, [r3, #0]
 800b956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b95a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b95c:	d921      	bls.n	800b9a2 <USB_EPStartXfer+0x5f8>
 800b95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b962:	095b      	lsrs	r3, r3, #5
 800b964:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b96c:	f003 031f 	and.w	r3, r3, #31
 800b970:	2b00      	cmp	r3, #0
 800b972:	d104      	bne.n	800b97e <USB_EPStartXfer+0x5d4>
 800b974:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b978:	3b01      	subs	r3, #1
 800b97a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b97e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b980:	881b      	ldrh	r3, [r3, #0]
 800b982:	b29a      	uxth	r2, r3
 800b984:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b988:	b29b      	uxth	r3, r3
 800b98a:	029b      	lsls	r3, r3, #10
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	4313      	orrs	r3, r2
 800b990:	b29b      	uxth	r3, r3
 800b992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b99a:	b29a      	uxth	r2, r3
 800b99c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b99e:	801a      	strh	r2, [r3, #0]
 800b9a0:	e056      	b.n	800ba50 <USB_EPStartXfer+0x6a6>
 800b9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10a      	bne.n	800b9c0 <USB_EPStartXfer+0x616>
 800b9aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9ac:	881b      	ldrh	r3, [r3, #0]
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9b8:	b29a      	uxth	r2, r3
 800b9ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9bc:	801a      	strh	r2, [r3, #0]
 800b9be:	e047      	b.n	800ba50 <USB_EPStartXfer+0x6a6>
 800b9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9c4:	085b      	lsrs	r3, r3, #1
 800b9c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9ce:	f003 0301 	and.w	r3, r3, #1
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d004      	beq.n	800b9e0 <USB_EPStartXfer+0x636>
 800b9d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b9da:	3301      	adds	r3, #1
 800b9dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b9e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9e2:	881b      	ldrh	r3, [r3, #0]
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	029b      	lsls	r3, r3, #10
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9f6:	801a      	strh	r2, [r3, #0]
 800b9f8:	e02a      	b.n	800ba50 <USB_EPStartXfer+0x6a6>
 800b9fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	785b      	ldrb	r3, [r3, #1]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d122      	bne.n	800ba50 <USB_EPStartXfer+0x6a6>
 800ba0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	653b      	str	r3, [r7, #80]	@ 0x50
 800ba16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	461a      	mov	r2, r3
 800ba28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba2a:	4413      	add	r3, r2
 800ba2c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ba2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	00da      	lsls	r2, r3, #3
 800ba3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba3e:	4413      	add	r3, r2
 800ba40:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ba44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba4e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ba50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	891b      	ldrh	r3, [r3, #8]
 800ba5c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6959      	ldr	r1, [r3, #20]
 800ba6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ba76:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ba7a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ba7e:	6800      	ldr	r0, [r0, #0]
 800ba80:	f001 f97e 	bl	800cd80 <USB_WritePMA>
            ep->xfer_buff += len;
 800ba84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	695a      	ldr	r2, [r3, #20]
 800ba90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba94:	441a      	add	r2, r3
 800ba96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800baa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	6a1a      	ldr	r2, [r3, #32]
 800baae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	429a      	cmp	r2, r3
 800babc:	d90f      	bls.n	800bade <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800babe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	6a1a      	ldr	r2, [r3, #32]
 800baca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bace:	1ad2      	subs	r2, r2, r3
 800bad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	621a      	str	r2, [r3, #32]
 800badc:	e00e      	b.n	800bafc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800bade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6a1b      	ldr	r3, [r3, #32]
 800baea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800baee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2200      	movs	r2, #0
 800bafa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bafc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	785b      	ldrb	r3, [r3, #1]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d177      	bne.n	800bc08 <USB_EPStartXfer+0x85e>
 800bb18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	461a      	mov	r2, r3
 800bb36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb38:	4413      	add	r3, r2
 800bb3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	00da      	lsls	r2, r3, #3
 800bb4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb4c:	4413      	add	r3, r2
 800bb4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb52:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb56:	881b      	ldrh	r3, [r3, #0]
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb62:	801a      	strh	r2, [r3, #0]
 800bb64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb68:	2b3e      	cmp	r3, #62	@ 0x3e
 800bb6a:	d921      	bls.n	800bbb0 <USB_EPStartXfer+0x806>
 800bb6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb70:	095b      	lsrs	r3, r3, #5
 800bb72:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bb76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb7a:	f003 031f 	and.w	r3, r3, #31
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d104      	bne.n	800bb8c <USB_EPStartXfer+0x7e2>
 800bb82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb86:	3b01      	subs	r3, #1
 800bb88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bb8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb8e:	881b      	ldrh	r3, [r3, #0]
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	029b      	lsls	r3, r3, #10
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbac:	801a      	strh	r2, [r3, #0]
 800bbae:	e050      	b.n	800bc52 <USB_EPStartXfer+0x8a8>
 800bbb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10a      	bne.n	800bbce <USB_EPStartXfer+0x824>
 800bbb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbba:	881b      	ldrh	r3, [r3, #0]
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbca:	801a      	strh	r2, [r3, #0]
 800bbcc:	e041      	b.n	800bc52 <USB_EPStartXfer+0x8a8>
 800bbce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbd2:	085b      	lsrs	r3, r3, #1
 800bbd4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bbd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbdc:	f003 0301 	and.w	r3, r3, #1
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d004      	beq.n	800bbee <USB_EPStartXfer+0x844>
 800bbe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbe8:	3301      	adds	r3, #1
 800bbea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bbee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbf0:	881b      	ldrh	r3, [r3, #0]
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	029b      	lsls	r3, r3, #10
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc04:	801a      	strh	r2, [r3, #0]
 800bc06:	e024      	b.n	800bc52 <USB_EPStartXfer+0x8a8>
 800bc08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	785b      	ldrb	r3, [r3, #1]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d11c      	bne.n	800bc52 <USB_EPStartXfer+0x8a8>
 800bc18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	461a      	mov	r2, r3
 800bc2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc2c:	4413      	add	r3, r2
 800bc2e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	00da      	lsls	r2, r3, #3
 800bc3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc40:	4413      	add	r3, r2
 800bc42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bc46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bc52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	895b      	ldrh	r3, [r3, #10]
 800bc5e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	6959      	ldr	r1, [r3, #20]
 800bc6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bc78:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bc7c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bc80:	6800      	ldr	r0, [r0, #0]
 800bc82:	f001 f87d 	bl	800cd80 <USB_WritePMA>
 800bc86:	e227      	b.n	800c0d8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bc88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	6a1b      	ldr	r3, [r3, #32]
 800bc94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bc98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	4413      	add	r3, r2
 800bcb2:	881b      	ldrh	r3, [r3, #0]
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800bcba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcbe:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800bcc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	441a      	add	r2, r3
 800bcdc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800bce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bcf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	461a      	mov	r2, r3
 800bd12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd14:	4413      	add	r3, r2
 800bd16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	00da      	lsls	r2, r3, #3
 800bd26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd28:	4413      	add	r3, r2
 800bd2a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bd2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bd3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	891b      	ldrh	r3, [r3, #8]
 800bd46:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6959      	ldr	r1, [r3, #20]
 800bd56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bd60:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bd64:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bd68:	6800      	ldr	r0, [r0, #0]
 800bd6a:	f001 f809 	bl	800cd80 <USB_WritePMA>
 800bd6e:	e1b3      	b.n	800c0d8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bd70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	6a1a      	ldr	r2, [r3, #32]
 800bd7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd80:	1ad2      	subs	r2, r2, r3
 800bd82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bd8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	4413      	add	r3, r2
 800bda8:	881b      	ldrh	r3, [r3, #0]
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f000 80c6 	beq.w	800bf42 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bdb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	673b      	str	r3, [r7, #112]	@ 0x70
 800bdc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	785b      	ldrb	r3, [r3, #1]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d177      	bne.n	800bec2 <USB_EPStartXfer+0xb18>
 800bdd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bdde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bde2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	461a      	mov	r2, r3
 800bdf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdf2:	4413      	add	r3, r2
 800bdf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bdf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	00da      	lsls	r2, r3, #3
 800be04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be06:	4413      	add	r3, r2
 800be08:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be0c:	667b      	str	r3, [r7, #100]	@ 0x64
 800be0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be10:	881b      	ldrh	r3, [r3, #0]
 800be12:	b29b      	uxth	r3, r3
 800be14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be18:	b29a      	uxth	r2, r3
 800be1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be1c:	801a      	strh	r2, [r3, #0]
 800be1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be22:	2b3e      	cmp	r3, #62	@ 0x3e
 800be24:	d921      	bls.n	800be6a <USB_EPStartXfer+0xac0>
 800be26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be2a:	095b      	lsrs	r3, r3, #5
 800be2c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800be30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be34:	f003 031f 	and.w	r3, r3, #31
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d104      	bne.n	800be46 <USB_EPStartXfer+0xa9c>
 800be3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800be40:	3b01      	subs	r3, #1
 800be42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800be46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be48:	881b      	ldrh	r3, [r3, #0]
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800be50:	b29b      	uxth	r3, r3
 800be52:	029b      	lsls	r3, r3, #10
 800be54:	b29b      	uxth	r3, r3
 800be56:	4313      	orrs	r3, r2
 800be58:	b29b      	uxth	r3, r3
 800be5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be62:	b29a      	uxth	r2, r3
 800be64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be66:	801a      	strh	r2, [r3, #0]
 800be68:	e050      	b.n	800bf0c <USB_EPStartXfer+0xb62>
 800be6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10a      	bne.n	800be88 <USB_EPStartXfer+0xade>
 800be72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be74:	881b      	ldrh	r3, [r3, #0]
 800be76:	b29b      	uxth	r3, r3
 800be78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be80:	b29a      	uxth	r2, r3
 800be82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be84:	801a      	strh	r2, [r3, #0]
 800be86:	e041      	b.n	800bf0c <USB_EPStartXfer+0xb62>
 800be88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be8c:	085b      	lsrs	r3, r3, #1
 800be8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800be92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be96:	f003 0301 	and.w	r3, r3, #1
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d004      	beq.n	800bea8 <USB_EPStartXfer+0xafe>
 800be9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bea2:	3301      	adds	r3, #1
 800bea4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bea8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800beaa:	881b      	ldrh	r3, [r3, #0]
 800beac:	b29a      	uxth	r2, r3
 800beae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	029b      	lsls	r3, r3, #10
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	4313      	orrs	r3, r2
 800beba:	b29a      	uxth	r2, r3
 800bebc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bebe:	801a      	strh	r2, [r3, #0]
 800bec0:	e024      	b.n	800bf0c <USB_EPStartXfer+0xb62>
 800bec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	785b      	ldrb	r3, [r3, #1]
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d11c      	bne.n	800bf0c <USB_EPStartXfer+0xb62>
 800bed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bed6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	461a      	mov	r2, r3
 800bee4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bee6:	4413      	add	r3, r2
 800bee8:	673b      	str	r3, [r7, #112]	@ 0x70
 800beea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800beee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	00da      	lsls	r2, r3, #3
 800bef8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800befa:	4413      	add	r3, r2
 800befc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bf00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bf02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bf0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	895b      	ldrh	r3, [r3, #10]
 800bf18:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	6959      	ldr	r1, [r3, #20]
 800bf28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bf32:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bf36:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bf3a:	6800      	ldr	r0, [r0, #0]
 800bf3c:	f000 ff20 	bl	800cd80 <USB_WritePMA>
 800bf40:	e0ca      	b.n	800c0d8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bf42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	785b      	ldrb	r3, [r3, #1]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d177      	bne.n	800c042 <USB_EPStartXfer+0xc98>
 800bf52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bf5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	461a      	mov	r2, r3
 800bf70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bf72:	4413      	add	r3, r2
 800bf74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bf76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	00da      	lsls	r2, r3, #3
 800bf84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bf86:	4413      	add	r3, r2
 800bf88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bf8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bf8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf90:	881b      	ldrh	r3, [r3, #0]
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf98:	b29a      	uxth	r2, r3
 800bf9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf9c:	801a      	strh	r2, [r3, #0]
 800bf9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfa2:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfa4:	d921      	bls.n	800bfea <USB_EPStartXfer+0xc40>
 800bfa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfaa:	095b      	lsrs	r3, r3, #5
 800bfac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bfb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb4:	f003 031f 	and.w	r3, r3, #31
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d104      	bne.n	800bfc6 <USB_EPStartXfer+0xc1c>
 800bfbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bfc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bfc8:	881b      	ldrh	r3, [r3, #0]
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	029b      	lsls	r3, r3, #10
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bfe6:	801a      	strh	r2, [r3, #0]
 800bfe8:	e05c      	b.n	800c0a4 <USB_EPStartXfer+0xcfa>
 800bfea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d10a      	bne.n	800c008 <USB_EPStartXfer+0xc5e>
 800bff2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c000:	b29a      	uxth	r2, r3
 800c002:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c004:	801a      	strh	r2, [r3, #0]
 800c006:	e04d      	b.n	800c0a4 <USB_EPStartXfer+0xcfa>
 800c008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c00c:	085b      	lsrs	r3, r3, #1
 800c00e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c016:	f003 0301 	and.w	r3, r3, #1
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d004      	beq.n	800c028 <USB_EPStartXfer+0xc7e>
 800c01e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c022:	3301      	adds	r3, #1
 800c024:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c028:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c02a:	881b      	ldrh	r3, [r3, #0]
 800c02c:	b29a      	uxth	r2, r3
 800c02e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c032:	b29b      	uxth	r3, r3
 800c034:	029b      	lsls	r3, r3, #10
 800c036:	b29b      	uxth	r3, r3
 800c038:	4313      	orrs	r3, r2
 800c03a:	b29a      	uxth	r2, r3
 800c03c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c03e:	801a      	strh	r2, [r3, #0]
 800c040:	e030      	b.n	800c0a4 <USB_EPStartXfer+0xcfa>
 800c042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	785b      	ldrb	r3, [r3, #1]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d128      	bne.n	800c0a4 <USB_EPStartXfer+0xcfa>
 800c052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c064:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c06e:	b29b      	uxth	r3, r3
 800c070:	461a      	mov	r2, r3
 800c072:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c076:	4413      	add	r3, r2
 800c078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c07c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	00da      	lsls	r2, r3, #3
 800c08a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c08e:	4413      	add	r3, r2
 800c090:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c094:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c0a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c0a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	891b      	ldrh	r3, [r3, #8]
 800c0b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c0b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	6959      	ldr	r1, [r3, #20]
 800c0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c0ca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c0ce:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c0d2:	6800      	ldr	r0, [r0, #0]
 800c0d4:	f000 fe54 	bl	800cd80 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c0d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	881b      	ldrh	r3, [r3, #0]
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0fe:	817b      	strh	r3, [r7, #10]
 800c100:	897b      	ldrh	r3, [r7, #10]
 800c102:	f083 0310 	eor.w	r3, r3, #16
 800c106:	817b      	strh	r3, [r7, #10]
 800c108:	897b      	ldrh	r3, [r7, #10]
 800c10a:	f083 0320 	eor.w	r3, r3, #32
 800c10e:	817b      	strh	r3, [r7, #10]
 800c110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c11e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	441a      	add	r2, r3
 800c12a:	897b      	ldrh	r3, [r7, #10]
 800c12c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c130:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	8013      	strh	r3, [r2, #0]
 800c140:	f000 bcde 	b.w	800cb00 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	7b1b      	ldrb	r3, [r3, #12]
 800c150:	2b00      	cmp	r3, #0
 800c152:	f040 80bb 	bne.w	800c2cc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c15a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	699a      	ldr	r2, [r3, #24]
 800c162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	691b      	ldr	r3, [r3, #16]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d917      	bls.n	800c1a2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800c182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	699a      	ldr	r2, [r3, #24]
 800c18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c192:	1ad2      	subs	r2, r2, r3
 800c194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	619a      	str	r2, [r3, #24]
 800c1a0:	e00e      	b.n	800c1c0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c1a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	699b      	ldr	r3, [r3, #24]
 800c1ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800c1b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c1c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c1ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	461a      	mov	r2, r3
 800c1e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c1e4:	4413      	add	r3, r2
 800c1e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c1ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	00da      	lsls	r2, r3, #3
 800c1f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c1fc:	4413      	add	r3, r2
 800c1fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c202:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c20a:	881b      	ldrh	r3, [r3, #0]
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c212:	b29a      	uxth	r2, r3
 800c214:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c218:	801a      	strh	r2, [r3, #0]
 800c21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c21e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c220:	d924      	bls.n	800c26c <USB_EPStartXfer+0xec2>
 800c222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c226:	095b      	lsrs	r3, r3, #5
 800c228:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c230:	f003 031f 	and.w	r3, r3, #31
 800c234:	2b00      	cmp	r3, #0
 800c236:	d104      	bne.n	800c242 <USB_EPStartXfer+0xe98>
 800c238:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c23c:	3b01      	subs	r3, #1
 800c23e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c242:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c246:	881b      	ldrh	r3, [r3, #0]
 800c248:	b29a      	uxth	r2, r3
 800c24a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c24e:	b29b      	uxth	r3, r3
 800c250:	029b      	lsls	r3, r3, #10
 800c252:	b29b      	uxth	r3, r3
 800c254:	4313      	orrs	r3, r2
 800c256:	b29b      	uxth	r3, r3
 800c258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c25c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c260:	b29a      	uxth	r2, r3
 800c262:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c266:	801a      	strh	r2, [r3, #0]
 800c268:	f000 bc10 	b.w	800ca8c <USB_EPStartXfer+0x16e2>
 800c26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10c      	bne.n	800c28e <USB_EPStartXfer+0xee4>
 800c274:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c278:	881b      	ldrh	r3, [r3, #0]
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c284:	b29a      	uxth	r2, r3
 800c286:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c28a:	801a      	strh	r2, [r3, #0]
 800c28c:	e3fe      	b.n	800ca8c <USB_EPStartXfer+0x16e2>
 800c28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c292:	085b      	lsrs	r3, r3, #1
 800c294:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c29c:	f003 0301 	and.w	r3, r3, #1
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d004      	beq.n	800c2ae <USB_EPStartXfer+0xf04>
 800c2a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c2ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	029b      	lsls	r3, r3, #10
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	b29a      	uxth	r2, r3
 800c2c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c2c8:	801a      	strh	r2, [r3, #0]
 800c2ca:	e3df      	b.n	800ca8c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c2cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	78db      	ldrb	r3, [r3, #3]
 800c2d8:	2b02      	cmp	r3, #2
 800c2da:	f040 8218 	bne.w	800c70e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c2de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	785b      	ldrb	r3, [r3, #1]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f040 809d 	bne.w	800c42a <USB_EPStartXfer+0x1080>
 800c2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c2fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	461a      	mov	r2, r3
 800c310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c314:	4413      	add	r3, r2
 800c316:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c31a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c31e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	00da      	lsls	r2, r3, #3
 800c328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c32c:	4413      	add	r3, r2
 800c32e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c332:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c33a:	881b      	ldrh	r3, [r3, #0]
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c342:	b29a      	uxth	r2, r3
 800c344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c348:	801a      	strh	r2, [r3, #0]
 800c34a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c34e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	2b3e      	cmp	r3, #62	@ 0x3e
 800c358:	d92b      	bls.n	800c3b2 <USB_EPStartXfer+0x1008>
 800c35a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c35e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	095b      	lsrs	r3, r3, #5
 800c368:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c36c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	691b      	ldr	r3, [r3, #16]
 800c378:	f003 031f 	and.w	r3, r3, #31
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d104      	bne.n	800c38a <USB_EPStartXfer+0xfe0>
 800c380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c384:	3b01      	subs	r3, #1
 800c386:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c38a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c38e:	881b      	ldrh	r3, [r3, #0]
 800c390:	b29a      	uxth	r2, r3
 800c392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c396:	b29b      	uxth	r3, r3
 800c398:	029b      	lsls	r3, r3, #10
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	4313      	orrs	r3, r2
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3a8:	b29a      	uxth	r2, r3
 800c3aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c3ae:	801a      	strh	r2, [r3, #0]
 800c3b0:	e070      	b.n	800c494 <USB_EPStartXfer+0x10ea>
 800c3b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	691b      	ldr	r3, [r3, #16]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10c      	bne.n	800c3dc <USB_EPStartXfer+0x1032>
 800c3c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c3c6:	881b      	ldrh	r3, [r3, #0]
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3d2:	b29a      	uxth	r2, r3
 800c3d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c3d8:	801a      	strh	r2, [r3, #0]
 800c3da:	e05b      	b.n	800c494 <USB_EPStartXfer+0x10ea>
 800c3dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	691b      	ldr	r3, [r3, #16]
 800c3e8:	085b      	lsrs	r3, r3, #1
 800c3ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c3ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	691b      	ldr	r3, [r3, #16]
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d004      	beq.n	800c40c <USB_EPStartXfer+0x1062>
 800c402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c406:	3301      	adds	r3, #1
 800c408:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c40c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c410:	881b      	ldrh	r3, [r3, #0]
 800c412:	b29a      	uxth	r2, r3
 800c414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c418:	b29b      	uxth	r3, r3
 800c41a:	029b      	lsls	r3, r3, #10
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	4313      	orrs	r3, r2
 800c420:	b29a      	uxth	r2, r3
 800c422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c426:	801a      	strh	r2, [r3, #0]
 800c428:	e034      	b.n	800c494 <USB_EPStartXfer+0x10ea>
 800c42a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c42e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	785b      	ldrb	r3, [r3, #1]
 800c436:	2b01      	cmp	r3, #1
 800c438:	d12c      	bne.n	800c494 <USB_EPStartXfer+0x10ea>
 800c43a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c43e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c44c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c456:	b29b      	uxth	r3, r3
 800c458:	461a      	mov	r2, r3
 800c45a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c45e:	4413      	add	r3, r2
 800c460:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	00da      	lsls	r2, r3, #3
 800c472:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c476:	4413      	add	r3, r2
 800c478:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c47c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	691b      	ldr	r3, [r3, #16]
 800c48c:	b29a      	uxth	r2, r3
 800c48e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c492:	801a      	strh	r2, [r3, #0]
 800c494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c498:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c4a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	785b      	ldrb	r3, [r3, #1]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	f040 809d 	bne.w	800c5ee <USB_EPStartXfer+0x1244>
 800c4b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c4c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c4d8:	4413      	add	r3, r2
 800c4da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c4de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	00da      	lsls	r2, r3, #3
 800c4ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c4f0:	4413      	add	r3, r2
 800c4f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c4f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c4fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c4fe:	881b      	ldrh	r3, [r3, #0]
 800c500:	b29b      	uxth	r3, r3
 800c502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c506:	b29a      	uxth	r2, r3
 800c508:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c50c:	801a      	strh	r2, [r3, #0]
 800c50e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	691b      	ldr	r3, [r3, #16]
 800c51a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c51c:	d92b      	bls.n	800c576 <USB_EPStartXfer+0x11cc>
 800c51e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	095b      	lsrs	r3, r3, #5
 800c52c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	f003 031f 	and.w	r3, r3, #31
 800c540:	2b00      	cmp	r3, #0
 800c542:	d104      	bne.n	800c54e <USB_EPStartXfer+0x11a4>
 800c544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c548:	3b01      	subs	r3, #1
 800c54a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c54e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c552:	881b      	ldrh	r3, [r3, #0]
 800c554:	b29a      	uxth	r2, r3
 800c556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	029b      	lsls	r3, r3, #10
 800c55e:	b29b      	uxth	r3, r3
 800c560:	4313      	orrs	r3, r2
 800c562:	b29b      	uxth	r3, r3
 800c564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c56c:	b29a      	uxth	r2, r3
 800c56e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c572:	801a      	strh	r2, [r3, #0]
 800c574:	e069      	b.n	800c64a <USB_EPStartXfer+0x12a0>
 800c576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c57a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d10c      	bne.n	800c5a0 <USB_EPStartXfer+0x11f6>
 800c586:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c58a:	881b      	ldrh	r3, [r3, #0]
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c596:	b29a      	uxth	r2, r3
 800c598:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c59c:	801a      	strh	r2, [r3, #0]
 800c59e:	e054      	b.n	800c64a <USB_EPStartXfer+0x12a0>
 800c5a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	691b      	ldr	r3, [r3, #16]
 800c5ac:	085b      	lsrs	r3, r3, #1
 800c5ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c5b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	691b      	ldr	r3, [r3, #16]
 800c5be:	f003 0301 	and.w	r3, r3, #1
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d004      	beq.n	800c5d0 <USB_EPStartXfer+0x1226>
 800c5c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c5d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c5d4:	881b      	ldrh	r3, [r3, #0]
 800c5d6:	b29a      	uxth	r2, r3
 800c5d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	029b      	lsls	r3, r3, #10
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c5ea:	801a      	strh	r2, [r3, #0]
 800c5ec:	e02d      	b.n	800c64a <USB_EPStartXfer+0x12a0>
 800c5ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	785b      	ldrb	r3, [r3, #1]
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d125      	bne.n	800c64a <USB_EPStartXfer+0x12a0>
 800c5fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	461a      	mov	r2, r3
 800c610:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c614:	4413      	add	r3, r2
 800c616:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c61a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c61e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	00da      	lsls	r2, r3, #3
 800c628:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c62c:	4413      	add	r3, r2
 800c62e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c632:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c63a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	b29a      	uxth	r2, r3
 800c644:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c648:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c64a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c64e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	69db      	ldr	r3, [r3, #28]
 800c656:	2b00      	cmp	r3, #0
 800c658:	f000 8218 	beq.w	800ca8c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c65c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c66a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	4413      	add	r3, r2
 800c676:	881b      	ldrh	r3, [r3, #0]
 800c678:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c67c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c684:	2b00      	cmp	r3, #0
 800c686:	d005      	beq.n	800c694 <USB_EPStartXfer+0x12ea>
 800c688:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c68c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c690:	2b00      	cmp	r3, #0
 800c692:	d10d      	bne.n	800c6b0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c694:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f040 81f5 	bne.w	800ca8c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c6a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c6a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f040 81ee 	bne.w	800ca8c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c6b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	4413      	add	r3, r2
 800c6ca:	881b      	ldrh	r3, [r3, #0]
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6d6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c6da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	441a      	add	r2, r3
 800c6f4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c6f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c700:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c704:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c708:	b29b      	uxth	r3, r3
 800c70a:	8013      	strh	r3, [r2, #0]
 800c70c:	e1be      	b.n	800ca8c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c70e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	78db      	ldrb	r3, [r3, #3]
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	f040 81b4 	bne.w	800ca88 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	699a      	ldr	r2, [r3, #24]
 800c72c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	691b      	ldr	r3, [r3, #16]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d917      	bls.n	800c76c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c73c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800c74c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	699a      	ldr	r2, [r3, #24]
 800c758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c75c:	1ad2      	subs	r2, r2, r3
 800c75e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	619a      	str	r2, [r3, #24]
 800c76a:	e00e      	b.n	800c78a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c76c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	699b      	ldr	r3, [r3, #24]
 800c778:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800c77c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2200      	movs	r2, #0
 800c788:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c78a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c78e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	785b      	ldrb	r3, [r3, #1]
 800c796:	2b00      	cmp	r3, #0
 800c798:	f040 8085 	bne.w	800c8a6 <USB_EPStartXfer+0x14fc>
 800c79c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c7aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c7c0:	4413      	add	r3, r2
 800c7c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c7c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	00da      	lsls	r2, r3, #3
 800c7d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c7d8:	4413      	add	r3, r2
 800c7da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c7de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c7e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c7f4:	801a      	strh	r2, [r3, #0]
 800c7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7fa:	2b3e      	cmp	r3, #62	@ 0x3e
 800c7fc:	d923      	bls.n	800c846 <USB_EPStartXfer+0x149c>
 800c7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c802:	095b      	lsrs	r3, r3, #5
 800c804:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c80c:	f003 031f 	and.w	r3, r3, #31
 800c810:	2b00      	cmp	r3, #0
 800c812:	d104      	bne.n	800c81e <USB_EPStartXfer+0x1474>
 800c814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c818:	3b01      	subs	r3, #1
 800c81a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c81e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c822:	881b      	ldrh	r3, [r3, #0]
 800c824:	b29a      	uxth	r2, r3
 800c826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	029b      	lsls	r3, r3, #10
 800c82e:	b29b      	uxth	r3, r3
 800c830:	4313      	orrs	r3, r2
 800c832:	b29b      	uxth	r3, r3
 800c834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c83c:	b29a      	uxth	r2, r3
 800c83e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c842:	801a      	strh	r2, [r3, #0]
 800c844:	e060      	b.n	800c908 <USB_EPStartXfer+0x155e>
 800c846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10c      	bne.n	800c868 <USB_EPStartXfer+0x14be>
 800c84e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c852:	881b      	ldrh	r3, [r3, #0]
 800c854:	b29b      	uxth	r3, r3
 800c856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c85a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c85e:	b29a      	uxth	r2, r3
 800c860:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c864:	801a      	strh	r2, [r3, #0]
 800c866:	e04f      	b.n	800c908 <USB_EPStartXfer+0x155e>
 800c868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c86c:	085b      	lsrs	r3, r3, #1
 800c86e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c876:	f003 0301 	and.w	r3, r3, #1
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d004      	beq.n	800c888 <USB_EPStartXfer+0x14de>
 800c87e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c882:	3301      	adds	r3, #1
 800c884:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c888:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c88c:	881b      	ldrh	r3, [r3, #0]
 800c88e:	b29a      	uxth	r2, r3
 800c890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c894:	b29b      	uxth	r3, r3
 800c896:	029b      	lsls	r3, r3, #10
 800c898:	b29b      	uxth	r3, r3
 800c89a:	4313      	orrs	r3, r2
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c8a2:	801a      	strh	r2, [r3, #0]
 800c8a4:	e030      	b.n	800c908 <USB_EPStartXfer+0x155e>
 800c8a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	785b      	ldrb	r3, [r3, #1]
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d128      	bne.n	800c908 <USB_EPStartXfer+0x155e>
 800c8b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c8c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c8da:	4413      	add	r3, r2
 800c8dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c8e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	00da      	lsls	r2, r3, #3
 800c8ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c8f2:	4413      	add	r3, r2
 800c8f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c8f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c8fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c900:	b29a      	uxth	r2, r3
 800c902:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c906:	801a      	strh	r2, [r3, #0]
 800c908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c90c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c91a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	785b      	ldrb	r3, [r3, #1]
 800c922:	2b00      	cmp	r3, #0
 800c924:	f040 8085 	bne.w	800ca32 <USB_EPStartXfer+0x1688>
 800c928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c92c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c93a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c944:	b29b      	uxth	r3, r3
 800c946:	461a      	mov	r2, r3
 800c948:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c94c:	4413      	add	r3, r2
 800c94e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	00da      	lsls	r2, r3, #3
 800c960:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c964:	4413      	add	r3, r2
 800c966:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c96a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c96e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c972:	881b      	ldrh	r3, [r3, #0]
 800c974:	b29b      	uxth	r3, r3
 800c976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c980:	801a      	strh	r2, [r3, #0]
 800c982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c986:	2b3e      	cmp	r3, #62	@ 0x3e
 800c988:	d923      	bls.n	800c9d2 <USB_EPStartXfer+0x1628>
 800c98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c98e:	095b      	lsrs	r3, r3, #5
 800c990:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c998:	f003 031f 	and.w	r3, r3, #31
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d104      	bne.n	800c9aa <USB_EPStartXfer+0x1600>
 800c9a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c9aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c9ae:	881b      	ldrh	r3, [r3, #0]
 800c9b0:	b29a      	uxth	r2, r3
 800c9b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	029b      	lsls	r3, r3, #10
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9c8:	b29a      	uxth	r2, r3
 800c9ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c9ce:	801a      	strh	r2, [r3, #0]
 800c9d0:	e05c      	b.n	800ca8c <USB_EPStartXfer+0x16e2>
 800c9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d10c      	bne.n	800c9f4 <USB_EPStartXfer+0x164a>
 800c9da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c9de:	881b      	ldrh	r3, [r3, #0]
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9ea:	b29a      	uxth	r2, r3
 800c9ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c9f0:	801a      	strh	r2, [r3, #0]
 800c9f2:	e04b      	b.n	800ca8c <USB_EPStartXfer+0x16e2>
 800c9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9f8:	085b      	lsrs	r3, r3, #1
 800c9fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c9fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca02:	f003 0301 	and.w	r3, r3, #1
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d004      	beq.n	800ca14 <USB_EPStartXfer+0x166a>
 800ca0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ca0e:	3301      	adds	r3, #1
 800ca10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ca14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	b29a      	uxth	r2, r3
 800ca1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	029b      	lsls	r3, r3, #10
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	4313      	orrs	r3, r2
 800ca28:	b29a      	uxth	r2, r3
 800ca2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ca2e:	801a      	strh	r2, [r3, #0]
 800ca30:	e02c      	b.n	800ca8c <USB_EPStartXfer+0x16e2>
 800ca32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	785b      	ldrb	r3, [r3, #1]
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d124      	bne.n	800ca8c <USB_EPStartXfer+0x16e2>
 800ca42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	461a      	mov	r2, r3
 800ca54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca58:	4413      	add	r3, r2
 800ca5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ca5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	00da      	lsls	r2, r3, #3
 800ca6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca70:	4413      	add	r3, r2
 800ca72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ca7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ca84:	801a      	strh	r2, [r3, #0]
 800ca86:	e001      	b.n	800ca8c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e03a      	b.n	800cb02 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ca8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	4413      	add	r3, r2
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800caae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cab2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cab6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800caba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cabe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cac2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cac6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800caca:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cad2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cadc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	441a      	add	r2, r3
 800cae8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800caec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800caf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800caf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800caf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	785b      	ldrb	r3, [r3, #1]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d020      	beq.n	800cb60 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	4413      	add	r3, r2
 800cb28:	881b      	ldrh	r3, [r3, #0]
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb34:	81bb      	strh	r3, [r7, #12]
 800cb36:	89bb      	ldrh	r3, [r7, #12]
 800cb38:	f083 0310 	eor.w	r3, r3, #16
 800cb3c:	81bb      	strh	r3, [r7, #12]
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	441a      	add	r2, r3
 800cb48:	89bb      	ldrh	r3, [r7, #12]
 800cb4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	8013      	strh	r3, [r2, #0]
 800cb5e:	e01f      	b.n	800cba0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	4413      	add	r3, r2
 800cb6a:	881b      	ldrh	r3, [r3, #0]
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb76:	81fb      	strh	r3, [r7, #14]
 800cb78:	89fb      	ldrh	r3, [r7, #14]
 800cb7a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cb7e:	81fb      	strh	r3, [r7, #14]
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	441a      	add	r2, r3
 800cb8a:	89fb      	ldrh	r3, [r7, #14]
 800cb8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3714      	adds	r7, #20
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr

0800cbae <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cbae:	b480      	push	{r7}
 800cbb0:	b087      	sub	sp, #28
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	7b1b      	ldrb	r3, [r3, #12]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f040 809d 	bne.w	800ccfc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	785b      	ldrb	r3, [r3, #1]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d04c      	beq.n	800cc64 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	4413      	add	r3, r2
 800cbd4:	881b      	ldrh	r3, [r3, #0]
 800cbd6:	823b      	strh	r3, [r7, #16]
 800cbd8:	8a3b      	ldrh	r3, [r7, #16]
 800cbda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d01b      	beq.n	800cc1a <USB_EPClearStall+0x6c>
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	4413      	add	r3, r2
 800cbec:	881b      	ldrh	r3, [r3, #0]
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbf8:	81fb      	strh	r3, [r7, #14]
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	441a      	add	r2, r3
 800cc04:	89fb      	ldrh	r3, [r7, #14]
 800cc06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	78db      	ldrb	r3, [r3, #3]
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d06c      	beq.n	800ccfc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	4413      	add	r3, r2
 800cc2c:	881b      	ldrh	r3, [r3, #0]
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc38:	81bb      	strh	r3, [r7, #12]
 800cc3a:	89bb      	ldrh	r3, [r7, #12]
 800cc3c:	f083 0320 	eor.w	r3, r3, #32
 800cc40:	81bb      	strh	r3, [r7, #12]
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	441a      	add	r2, r3
 800cc4c:	89bb      	ldrh	r3, [r7, #12]
 800cc4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	8013      	strh	r3, [r2, #0]
 800cc62:	e04b      	b.n	800ccfc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4413      	add	r3, r2
 800cc6e:	881b      	ldrh	r3, [r3, #0]
 800cc70:	82fb      	strh	r3, [r7, #22]
 800cc72:	8afb      	ldrh	r3, [r7, #22]
 800cc74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d01b      	beq.n	800ccb4 <USB_EPClearStall+0x106>
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4413      	add	r3, r2
 800cc86:	881b      	ldrh	r3, [r3, #0]
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc92:	82bb      	strh	r3, [r7, #20]
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	441a      	add	r2, r3
 800cc9e:	8abb      	ldrh	r3, [r7, #20]
 800cca0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cca4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cca8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ccac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	4413      	add	r3, r2
 800ccbe:	881b      	ldrh	r3, [r3, #0]
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ccc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ccca:	827b      	strh	r3, [r7, #18]
 800cccc:	8a7b      	ldrh	r3, [r7, #18]
 800ccce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ccd2:	827b      	strh	r3, [r7, #18]
 800ccd4:	8a7b      	ldrh	r3, [r7, #18]
 800ccd6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ccda:	827b      	strh	r3, [r7, #18]
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	441a      	add	r2, r3
 800cce6:	8a7b      	ldrh	r3, [r7, #18]
 800cce8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ccf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ccfc:	2300      	movs	r3, #0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	371c      	adds	r7, #28
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr

0800cd0a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cd0a:	b480      	push	{r7}
 800cd0c:	b083      	sub	sp, #12
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
 800cd12:	460b      	mov	r3, r1
 800cd14:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cd16:	78fb      	ldrb	r3, [r7, #3]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d103      	bne.n	800cd24 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2280      	movs	r2, #128	@ 0x80
 800cd20:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800cd24:	2300      	movs	r3, #0
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	370c      	adds	r7, #12
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr

0800cd32 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cd32:	b480      	push	{r7}
 800cd34:	b083      	sub	sp, #12
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cd52:	2300      	movs	r3, #0
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b085      	sub	sp, #20
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cd72:	68fb      	ldr	r3, [r7, #12]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3714      	adds	r7, #20
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b08b      	sub	sp, #44	@ 0x2c
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	460b      	mov	r3, r1
 800cd90:	80fb      	strh	r3, [r7, #6]
 800cd92:	4613      	mov	r3, r2
 800cd94:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cd96:	88bb      	ldrh	r3, [r7, #4]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	085b      	lsrs	r3, r3, #1
 800cd9c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cda6:	88fa      	ldrh	r2, [r7, #6]
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	4413      	add	r3, r2
 800cdac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cdb0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdb6:	e01c      	b.n	800cdf2 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	b21b      	sxth	r3, r3
 800cdc6:	021b      	lsls	r3, r3, #8
 800cdc8:	b21a      	sxth	r2, r3
 800cdca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	b21b      	sxth	r3, r3
 800cdd2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800cdd4:	6a3b      	ldr	r3, [r7, #32]
 800cdd6:	8a7a      	ldrh	r2, [r7, #18]
 800cdd8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cdda:	6a3b      	ldr	r3, [r7, #32]
 800cddc:	3302      	adds	r3, #2
 800cdde:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	3301      	adds	r3, #1
 800cde4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	3301      	adds	r3, #1
 800cdea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdee:	3b01      	subs	r3, #1
 800cdf0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1df      	bne.n	800cdb8 <USB_WritePMA+0x38>
  }
}
 800cdf8:	bf00      	nop
 800cdfa:	bf00      	nop
 800cdfc:	372c      	adds	r7, #44	@ 0x2c
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr

0800ce06 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ce06:	b480      	push	{r7}
 800ce08:	b08b      	sub	sp, #44	@ 0x2c
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	60f8      	str	r0, [r7, #12]
 800ce0e:	60b9      	str	r1, [r7, #8]
 800ce10:	4611      	mov	r1, r2
 800ce12:	461a      	mov	r2, r3
 800ce14:	460b      	mov	r3, r1
 800ce16:	80fb      	strh	r3, [r7, #6]
 800ce18:	4613      	mov	r3, r2
 800ce1a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ce1c:	88bb      	ldrh	r3, [r7, #4]
 800ce1e:	085b      	lsrs	r3, r3, #1
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ce2c:	88fa      	ldrh	r2, [r7, #6]
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	4413      	add	r3, r2
 800ce32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ce36:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ce38:	69bb      	ldr	r3, [r7, #24]
 800ce3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce3c:	e018      	b.n	800ce70 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ce3e:	6a3b      	ldr	r3, [r7, #32]
 800ce40:	881b      	ldrh	r3, [r3, #0]
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ce46:	6a3b      	ldr	r3, [r7, #32]
 800ce48:	3302      	adds	r3, #2
 800ce4a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	b2da      	uxtb	r2, r3
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	3301      	adds	r3, #1
 800ce58:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	0a1b      	lsrs	r3, r3, #8
 800ce5e:	b2da      	uxtb	r2, r3
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	3301      	adds	r3, #1
 800ce68:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce6c:	3b01      	subs	r3, #1
 800ce6e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d1e3      	bne.n	800ce3e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ce76:	88bb      	ldrh	r3, [r7, #4]
 800ce78:	f003 0301 	and.w	r3, r3, #1
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d007      	beq.n	800ce92 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ce82:	6a3b      	ldr	r3, [r7, #32]
 800ce84:	881b      	ldrh	r3, [r3, #0]
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	b2da      	uxtb	r2, r3
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	701a      	strb	r2, [r3, #0]
  }
}
 800ce92:	bf00      	nop
 800ce94:	372c      	adds	r7, #44	@ 0x2c
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr
	...

0800cea0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	460b      	mov	r3, r1
 800ceaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ceac:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ceb0:	f006 fefa 	bl	8013ca8 <USBD_static_malloc>
 800ceb4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d109      	bne.n	800ced0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	32b0      	adds	r2, #176	@ 0xb0
 800cec6:	2100      	movs	r1, #0
 800cec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cecc:	2302      	movs	r3, #2
 800cece:	e0d4      	b.n	800d07a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ced0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ced4:	2100      	movs	r1, #0
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f007 fbec 	bl	80146b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	32b0      	adds	r2, #176	@ 0xb0
 800cee6:	68f9      	ldr	r1, [r7, #12]
 800cee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	32b0      	adds	r2, #176	@ 0xb0
 800cef6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	7c1b      	ldrb	r3, [r3, #16]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d138      	bne.n	800cf7a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cf08:	4b5e      	ldr	r3, [pc, #376]	@ (800d084 <USBD_CDC_Init+0x1e4>)
 800cf0a:	7819      	ldrb	r1, [r3, #0]
 800cf0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cf10:	2202      	movs	r2, #2
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f006 fd6f 	bl	80139f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cf18:	4b5a      	ldr	r3, [pc, #360]	@ (800d084 <USBD_CDC_Init+0x1e4>)
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	f003 020f 	and.w	r2, r3, #15
 800cf20:	6879      	ldr	r1, [r7, #4]
 800cf22:	4613      	mov	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	4413      	add	r3, r2
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	440b      	add	r3, r1
 800cf2c:	3324      	adds	r3, #36	@ 0x24
 800cf2e:	2201      	movs	r2, #1
 800cf30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cf32:	4b55      	ldr	r3, [pc, #340]	@ (800d088 <USBD_CDC_Init+0x1e8>)
 800cf34:	7819      	ldrb	r1, [r3, #0]
 800cf36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cf3a:	2202      	movs	r2, #2
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f006 fd5a 	bl	80139f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cf42:	4b51      	ldr	r3, [pc, #324]	@ (800d088 <USBD_CDC_Init+0x1e8>)
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	f003 020f 	and.w	r2, r3, #15
 800cf4a:	6879      	ldr	r1, [r7, #4]
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	4413      	add	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	440b      	add	r3, r1
 800cf56:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cf5e:	4b4b      	ldr	r3, [pc, #300]	@ (800d08c <USBD_CDC_Init+0x1ec>)
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	f003 020f 	and.w	r2, r3, #15
 800cf66:	6879      	ldr	r1, [r7, #4]
 800cf68:	4613      	mov	r3, r2
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	4413      	add	r3, r2
 800cf6e:	009b      	lsls	r3, r3, #2
 800cf70:	440b      	add	r3, r1
 800cf72:	3326      	adds	r3, #38	@ 0x26
 800cf74:	2210      	movs	r2, #16
 800cf76:	801a      	strh	r2, [r3, #0]
 800cf78:	e035      	b.n	800cfe6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cf7a:	4b42      	ldr	r3, [pc, #264]	@ (800d084 <USBD_CDC_Init+0x1e4>)
 800cf7c:	7819      	ldrb	r1, [r3, #0]
 800cf7e:	2340      	movs	r3, #64	@ 0x40
 800cf80:	2202      	movs	r2, #2
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f006 fd37 	bl	80139f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cf88:	4b3e      	ldr	r3, [pc, #248]	@ (800d084 <USBD_CDC_Init+0x1e4>)
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	f003 020f 	and.w	r2, r3, #15
 800cf90:	6879      	ldr	r1, [r7, #4]
 800cf92:	4613      	mov	r3, r2
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	4413      	add	r3, r2
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	440b      	add	r3, r1
 800cf9c:	3324      	adds	r3, #36	@ 0x24
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cfa2:	4b39      	ldr	r3, [pc, #228]	@ (800d088 <USBD_CDC_Init+0x1e8>)
 800cfa4:	7819      	ldrb	r1, [r3, #0]
 800cfa6:	2340      	movs	r3, #64	@ 0x40
 800cfa8:	2202      	movs	r2, #2
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f006 fd23 	bl	80139f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cfb0:	4b35      	ldr	r3, [pc, #212]	@ (800d088 <USBD_CDC_Init+0x1e8>)
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	f003 020f 	and.w	r2, r3, #15
 800cfb8:	6879      	ldr	r1, [r7, #4]
 800cfba:	4613      	mov	r3, r2
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	4413      	add	r3, r2
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	440b      	add	r3, r1
 800cfc4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cfc8:	2201      	movs	r2, #1
 800cfca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cfcc:	4b2f      	ldr	r3, [pc, #188]	@ (800d08c <USBD_CDC_Init+0x1ec>)
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	f003 020f 	and.w	r2, r3, #15
 800cfd4:	6879      	ldr	r1, [r7, #4]
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	4413      	add	r3, r2
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	440b      	add	r3, r1
 800cfe0:	3326      	adds	r3, #38	@ 0x26
 800cfe2:	2210      	movs	r2, #16
 800cfe4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cfe6:	4b29      	ldr	r3, [pc, #164]	@ (800d08c <USBD_CDC_Init+0x1ec>)
 800cfe8:	7819      	ldrb	r1, [r3, #0]
 800cfea:	2308      	movs	r3, #8
 800cfec:	2203      	movs	r2, #3
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f006 fd01 	bl	80139f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cff4:	4b25      	ldr	r3, [pc, #148]	@ (800d08c <USBD_CDC_Init+0x1ec>)
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	f003 020f 	and.w	r2, r3, #15
 800cffc:	6879      	ldr	r1, [r7, #4]
 800cffe:	4613      	mov	r3, r2
 800d000:	009b      	lsls	r3, r3, #2
 800d002:	4413      	add	r3, r2
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	440b      	add	r3, r1
 800d008:	3324      	adds	r3, #36	@ 0x24
 800d00a:	2201      	movs	r2, #1
 800d00c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2200      	movs	r2, #0
 800d012:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	33b0      	adds	r3, #176	@ 0xb0
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	4413      	add	r3, r2
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2200      	movs	r2, #0
 800d02e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2200      	movs	r2, #0
 800d036:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d040:	2b00      	cmp	r3, #0
 800d042:	d101      	bne.n	800d048 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d044:	2302      	movs	r3, #2
 800d046:	e018      	b.n	800d07a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	7c1b      	ldrb	r3, [r3, #16]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d10a      	bne.n	800d066 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d050:	4b0d      	ldr	r3, [pc, #52]	@ (800d088 <USBD_CDC_Init+0x1e8>)
 800d052:	7819      	ldrb	r1, [r3, #0]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d05a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f006 fdb8 	bl	8013bd4 <USBD_LL_PrepareReceive>
 800d064:	e008      	b.n	800d078 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d066:	4b08      	ldr	r3, [pc, #32]	@ (800d088 <USBD_CDC_Init+0x1e8>)
 800d068:	7819      	ldrb	r1, [r3, #0]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d070:	2340      	movs	r3, #64	@ 0x40
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f006 fdae 	bl	8013bd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	2000009b 	.word	0x2000009b
 800d088:	2000009c 	.word	0x2000009c
 800d08c:	2000009d 	.word	0x2000009d

0800d090 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	460b      	mov	r3, r1
 800d09a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d09c:	4b3a      	ldr	r3, [pc, #232]	@ (800d188 <USBD_CDC_DeInit+0xf8>)
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f006 fccd 	bl	8013a42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d0a8:	4b37      	ldr	r3, [pc, #220]	@ (800d188 <USBD_CDC_DeInit+0xf8>)
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	f003 020f 	and.w	r2, r3, #15
 800d0b0:	6879      	ldr	r1, [r7, #4]
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4413      	add	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	440b      	add	r3, r1
 800d0bc:	3324      	adds	r3, #36	@ 0x24
 800d0be:	2200      	movs	r2, #0
 800d0c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d0c2:	4b32      	ldr	r3, [pc, #200]	@ (800d18c <USBD_CDC_DeInit+0xfc>)
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f006 fcba 	bl	8013a42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d0ce:	4b2f      	ldr	r3, [pc, #188]	@ (800d18c <USBD_CDC_DeInit+0xfc>)
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	f003 020f 	and.w	r2, r3, #15
 800d0d6:	6879      	ldr	r1, [r7, #4]
 800d0d8:	4613      	mov	r3, r2
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	4413      	add	r3, r2
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	440b      	add	r3, r1
 800d0e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d0ea:	4b29      	ldr	r3, [pc, #164]	@ (800d190 <USBD_CDC_DeInit+0x100>)
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f006 fca6 	bl	8013a42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d0f6:	4b26      	ldr	r3, [pc, #152]	@ (800d190 <USBD_CDC_DeInit+0x100>)
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	f003 020f 	and.w	r2, r3, #15
 800d0fe:	6879      	ldr	r1, [r7, #4]
 800d100:	4613      	mov	r3, r2
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	4413      	add	r3, r2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	440b      	add	r3, r1
 800d10a:	3324      	adds	r3, #36	@ 0x24
 800d10c:	2200      	movs	r2, #0
 800d10e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d110:	4b1f      	ldr	r3, [pc, #124]	@ (800d190 <USBD_CDC_DeInit+0x100>)
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	f003 020f 	and.w	r2, r3, #15
 800d118:	6879      	ldr	r1, [r7, #4]
 800d11a:	4613      	mov	r3, r2
 800d11c:	009b      	lsls	r3, r3, #2
 800d11e:	4413      	add	r3, r2
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	440b      	add	r3, r1
 800d124:	3326      	adds	r3, #38	@ 0x26
 800d126:	2200      	movs	r2, #0
 800d128:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	32b0      	adds	r2, #176	@ 0xb0
 800d134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d01f      	beq.n	800d17c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	33b0      	adds	r3, #176	@ 0xb0
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	4413      	add	r3, r2
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	32b0      	adds	r2, #176	@ 0xb0
 800d15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d15e:	4618      	mov	r0, r3
 800d160:	f006 fdb0 	bl	8013cc4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	32b0      	adds	r2, #176	@ 0xb0
 800d16e:	2100      	movs	r1, #0
 800d170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d17c:	2300      	movs	r3, #0
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	2000009b 	.word	0x2000009b
 800d18c:	2000009c 	.word	0x2000009c
 800d190:	2000009d 	.word	0x2000009d

0800d194 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	32b0      	adds	r2, #176	@ 0xb0
 800d1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d101      	bne.n	800d1c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d1c0:	2303      	movs	r3, #3
 800d1c2:	e0bf      	b.n	800d344 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d050      	beq.n	800d272 <USBD_CDC_Setup+0xde>
 800d1d0:	2b20      	cmp	r3, #32
 800d1d2:	f040 80af 	bne.w	800d334 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	88db      	ldrh	r3, [r3, #6]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d03a      	beq.n	800d254 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	b25b      	sxtb	r3, r3
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	da1b      	bge.n	800d220 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	33b0      	adds	r3, #176	@ 0xb0
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4413      	add	r3, r2
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	689b      	ldr	r3, [r3, #8]
 800d1fa:	683a      	ldr	r2, [r7, #0]
 800d1fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d1fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d200:	683a      	ldr	r2, [r7, #0]
 800d202:	88d2      	ldrh	r2, [r2, #6]
 800d204:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	88db      	ldrh	r3, [r3, #6]
 800d20a:	2b07      	cmp	r3, #7
 800d20c:	bf28      	it	cs
 800d20e:	2307      	movcs	r3, #7
 800d210:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	89fa      	ldrh	r2, [r7, #14]
 800d216:	4619      	mov	r1, r3
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f001 fd2b 	bl	800ec74 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d21e:	e090      	b.n	800d342 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	785a      	ldrb	r2, [r3, #1]
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	88db      	ldrh	r3, [r3, #6]
 800d22e:	2b3f      	cmp	r3, #63	@ 0x3f
 800d230:	d803      	bhi.n	800d23a <USBD_CDC_Setup+0xa6>
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	88db      	ldrh	r3, [r3, #6]
 800d236:	b2da      	uxtb	r2, r3
 800d238:	e000      	b.n	800d23c <USBD_CDC_Setup+0xa8>
 800d23a:	2240      	movs	r2, #64	@ 0x40
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d242:	6939      	ldr	r1, [r7, #16]
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d24a:	461a      	mov	r2, r3
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f001 fd3d 	bl	800eccc <USBD_CtlPrepareRx>
      break;
 800d252:	e076      	b.n	800d342 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	33b0      	adds	r3, #176	@ 0xb0
 800d25e:	009b      	lsls	r3, r3, #2
 800d260:	4413      	add	r3, r2
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	683a      	ldr	r2, [r7, #0]
 800d268:	7850      	ldrb	r0, [r2, #1]
 800d26a:	2200      	movs	r2, #0
 800d26c:	6839      	ldr	r1, [r7, #0]
 800d26e:	4798      	blx	r3
      break;
 800d270:	e067      	b.n	800d342 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	785b      	ldrb	r3, [r3, #1]
 800d276:	2b0b      	cmp	r3, #11
 800d278:	d851      	bhi.n	800d31e <USBD_CDC_Setup+0x18a>
 800d27a:	a201      	add	r2, pc, #4	@ (adr r2, 800d280 <USBD_CDC_Setup+0xec>)
 800d27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d280:	0800d2b1 	.word	0x0800d2b1
 800d284:	0800d32d 	.word	0x0800d32d
 800d288:	0800d31f 	.word	0x0800d31f
 800d28c:	0800d31f 	.word	0x0800d31f
 800d290:	0800d31f 	.word	0x0800d31f
 800d294:	0800d31f 	.word	0x0800d31f
 800d298:	0800d31f 	.word	0x0800d31f
 800d29c:	0800d31f 	.word	0x0800d31f
 800d2a0:	0800d31f 	.word	0x0800d31f
 800d2a4:	0800d31f 	.word	0x0800d31f
 800d2a8:	0800d2db 	.word	0x0800d2db
 800d2ac:	0800d305 	.word	0x0800d305
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	2b03      	cmp	r3, #3
 800d2ba:	d107      	bne.n	800d2cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d2bc:	f107 030a 	add.w	r3, r7, #10
 800d2c0:	2202      	movs	r2, #2
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f001 fcd5 	bl	800ec74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2ca:	e032      	b.n	800d332 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d2cc:	6839      	ldr	r1, [r7, #0]
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f001 fc53 	bl	800eb7a <USBD_CtlError>
            ret = USBD_FAIL;
 800d2d4:	2303      	movs	r3, #3
 800d2d6:	75fb      	strb	r3, [r7, #23]
          break;
 800d2d8:	e02b      	b.n	800d332 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	2b03      	cmp	r3, #3
 800d2e4:	d107      	bne.n	800d2f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d2e6:	f107 030d 	add.w	r3, r7, #13
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f001 fcc0 	bl	800ec74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2f4:	e01d      	b.n	800d332 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d2f6:	6839      	ldr	r1, [r7, #0]
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f001 fc3e 	bl	800eb7a <USBD_CtlError>
            ret = USBD_FAIL;
 800d2fe:	2303      	movs	r3, #3
 800d300:	75fb      	strb	r3, [r7, #23]
          break;
 800d302:	e016      	b.n	800d332 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	2b03      	cmp	r3, #3
 800d30e:	d00f      	beq.n	800d330 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d310:	6839      	ldr	r1, [r7, #0]
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f001 fc31 	bl	800eb7a <USBD_CtlError>
            ret = USBD_FAIL;
 800d318:	2303      	movs	r3, #3
 800d31a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d31c:	e008      	b.n	800d330 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d31e:	6839      	ldr	r1, [r7, #0]
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f001 fc2a 	bl	800eb7a <USBD_CtlError>
          ret = USBD_FAIL;
 800d326:	2303      	movs	r3, #3
 800d328:	75fb      	strb	r3, [r7, #23]
          break;
 800d32a:	e002      	b.n	800d332 <USBD_CDC_Setup+0x19e>
          break;
 800d32c:	bf00      	nop
 800d32e:	e008      	b.n	800d342 <USBD_CDC_Setup+0x1ae>
          break;
 800d330:	bf00      	nop
      }
      break;
 800d332:	e006      	b.n	800d342 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d334:	6839      	ldr	r1, [r7, #0]
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f001 fc1f 	bl	800eb7a <USBD_CtlError>
      ret = USBD_FAIL;
 800d33c:	2303      	movs	r3, #3
 800d33e:	75fb      	strb	r3, [r7, #23]
      break;
 800d340:	bf00      	nop
  }

  return (uint8_t)ret;
 800d342:	7dfb      	ldrb	r3, [r7, #23]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3718      	adds	r7, #24
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	460b      	mov	r3, r1
 800d356:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d35e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	32b0      	adds	r2, #176	@ 0xb0
 800d36a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d101      	bne.n	800d376 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d372:	2303      	movs	r3, #3
 800d374:	e065      	b.n	800d442 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	32b0      	adds	r2, #176	@ 0xb0
 800d380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d384:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d386:	78fb      	ldrb	r3, [r7, #3]
 800d388:	f003 020f 	and.w	r2, r3, #15
 800d38c:	6879      	ldr	r1, [r7, #4]
 800d38e:	4613      	mov	r3, r2
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	4413      	add	r3, r2
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	440b      	add	r3, r1
 800d398:	3318      	adds	r3, #24
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d02f      	beq.n	800d400 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d3a0:	78fb      	ldrb	r3, [r7, #3]
 800d3a2:	f003 020f 	and.w	r2, r3, #15
 800d3a6:	6879      	ldr	r1, [r7, #4]
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	4413      	add	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	440b      	add	r3, r1
 800d3b2:	3318      	adds	r3, #24
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	78fb      	ldrb	r3, [r7, #3]
 800d3b8:	f003 010f 	and.w	r1, r3, #15
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	460b      	mov	r3, r1
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	440b      	add	r3, r1
 800d3c4:	00db      	lsls	r3, r3, #3
 800d3c6:	4403      	add	r3, r0
 800d3c8:	3320      	adds	r3, #32
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	fbb2 f1f3 	udiv	r1, r2, r3
 800d3d0:	fb01 f303 	mul.w	r3, r1, r3
 800d3d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d112      	bne.n	800d400 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d3da:	78fb      	ldrb	r3, [r7, #3]
 800d3dc:	f003 020f 	and.w	r2, r3, #15
 800d3e0:	6879      	ldr	r1, [r7, #4]
 800d3e2:	4613      	mov	r3, r2
 800d3e4:	009b      	lsls	r3, r3, #2
 800d3e6:	4413      	add	r3, r2
 800d3e8:	009b      	lsls	r3, r3, #2
 800d3ea:	440b      	add	r3, r1
 800d3ec:	3318      	adds	r3, #24
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d3f2:	78f9      	ldrb	r1, [r7, #3]
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f006 fbca 	bl	8013b92 <USBD_LL_Transmit>
 800d3fe:	e01f      	b.n	800d440 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	2200      	movs	r2, #0
 800d404:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	33b0      	adds	r3, #176	@ 0xb0
 800d412:	009b      	lsls	r3, r3, #2
 800d414:	4413      	add	r3, r2
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d010      	beq.n	800d440 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	33b0      	adds	r3, #176	@ 0xb0
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	4413      	add	r3, r2
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	691b      	ldr	r3, [r3, #16]
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d436:	68ba      	ldr	r2, [r7, #8]
 800d438:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d43c:	78fa      	ldrb	r2, [r7, #3]
 800d43e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b084      	sub	sp, #16
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	460b      	mov	r3, r1
 800d454:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	32b0      	adds	r2, #176	@ 0xb0
 800d460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d464:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	32b0      	adds	r2, #176	@ 0xb0
 800d470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d101      	bne.n	800d47c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d478:	2303      	movs	r3, #3
 800d47a:	e01a      	b.n	800d4b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d47c:	78fb      	ldrb	r3, [r7, #3]
 800d47e:	4619      	mov	r1, r3
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f006 fbc8 	bl	8013c16 <USBD_LL_GetRxDataSize>
 800d486:	4602      	mov	r2, r0
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	33b0      	adds	r3, #176	@ 0xb0
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	4413      	add	r3, r2
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	68fa      	ldr	r2, [r7, #12]
 800d4a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d4a6:	68fa      	ldr	r2, [r7, #12]
 800d4a8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d4ac:	4611      	mov	r1, r2
 800d4ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d4b0:	2300      	movs	r3, #0
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b084      	sub	sp, #16
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	32b0      	adds	r2, #176	@ 0xb0
 800d4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d101      	bne.n	800d4dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d4d8:	2303      	movs	r3, #3
 800d4da:	e024      	b.n	800d526 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	33b0      	adds	r3, #176	@ 0xb0
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	4413      	add	r3, r2
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d019      	beq.n	800d524 <USBD_CDC_EP0_RxReady+0x6a>
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d4f6:	2bff      	cmp	r3, #255	@ 0xff
 800d4f8:	d014      	beq.n	800d524 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	33b0      	adds	r3, #176	@ 0xb0
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	4413      	add	r3, r2
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	689b      	ldr	r3, [r3, #8]
 800d50c:	68fa      	ldr	r2, [r7, #12]
 800d50e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d512:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d51a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	22ff      	movs	r2, #255	@ 0xff
 800d520:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d524:	2300      	movs	r3, #0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3710      	adds	r7, #16
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
	...

0800d530 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b086      	sub	sp, #24
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d538:	2182      	movs	r1, #130	@ 0x82
 800d53a:	4818      	ldr	r0, [pc, #96]	@ (800d59c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d53c:	f000 fcbd 	bl	800deba <USBD_GetEpDesc>
 800d540:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d542:	2101      	movs	r1, #1
 800d544:	4815      	ldr	r0, [pc, #84]	@ (800d59c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d546:	f000 fcb8 	bl	800deba <USBD_GetEpDesc>
 800d54a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d54c:	2181      	movs	r1, #129	@ 0x81
 800d54e:	4813      	ldr	r0, [pc, #76]	@ (800d59c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d550:	f000 fcb3 	bl	800deba <USBD_GetEpDesc>
 800d554:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d002      	beq.n	800d562 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	2210      	movs	r2, #16
 800d560:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d006      	beq.n	800d576 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	2200      	movs	r2, #0
 800d56c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d570:	711a      	strb	r2, [r3, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d006      	beq.n	800d58a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2200      	movs	r2, #0
 800d580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d584:	711a      	strb	r2, [r3, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2243      	movs	r2, #67	@ 0x43
 800d58e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d590:	4b02      	ldr	r3, [pc, #8]	@ (800d59c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d592:	4618      	mov	r0, r3
 800d594:	3718      	adds	r7, #24
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	20000058 	.word	0x20000058

0800d5a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b086      	sub	sp, #24
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d5a8:	2182      	movs	r1, #130	@ 0x82
 800d5aa:	4818      	ldr	r0, [pc, #96]	@ (800d60c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d5ac:	f000 fc85 	bl	800deba <USBD_GetEpDesc>
 800d5b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d5b2:	2101      	movs	r1, #1
 800d5b4:	4815      	ldr	r0, [pc, #84]	@ (800d60c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d5b6:	f000 fc80 	bl	800deba <USBD_GetEpDesc>
 800d5ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d5bc:	2181      	movs	r1, #129	@ 0x81
 800d5be:	4813      	ldr	r0, [pc, #76]	@ (800d60c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d5c0:	f000 fc7b 	bl	800deba <USBD_GetEpDesc>
 800d5c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d002      	beq.n	800d5d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	2210      	movs	r2, #16
 800d5d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d006      	beq.n	800d5e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	711a      	strb	r2, [r3, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f042 0202 	orr.w	r2, r2, #2
 800d5e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d006      	beq.n	800d5fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	711a      	strb	r2, [r3, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f042 0202 	orr.w	r2, r2, #2
 800d5f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2243      	movs	r2, #67	@ 0x43
 800d5fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d600:	4b02      	ldr	r3, [pc, #8]	@ (800d60c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d602:	4618      	mov	r0, r3
 800d604:	3718      	adds	r7, #24
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	20000058 	.word	0x20000058

0800d610 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b086      	sub	sp, #24
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d618:	2182      	movs	r1, #130	@ 0x82
 800d61a:	4818      	ldr	r0, [pc, #96]	@ (800d67c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d61c:	f000 fc4d 	bl	800deba <USBD_GetEpDesc>
 800d620:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d622:	2101      	movs	r1, #1
 800d624:	4815      	ldr	r0, [pc, #84]	@ (800d67c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d626:	f000 fc48 	bl	800deba <USBD_GetEpDesc>
 800d62a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d62c:	2181      	movs	r1, #129	@ 0x81
 800d62e:	4813      	ldr	r0, [pc, #76]	@ (800d67c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d630:	f000 fc43 	bl	800deba <USBD_GetEpDesc>
 800d634:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d002      	beq.n	800d642 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	2210      	movs	r2, #16
 800d640:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d006      	beq.n	800d656 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	2200      	movs	r2, #0
 800d64c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d650:	711a      	strb	r2, [r3, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d006      	beq.n	800d66a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2200      	movs	r2, #0
 800d660:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d664:	711a      	strb	r2, [r3, #4]
 800d666:	2200      	movs	r2, #0
 800d668:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2243      	movs	r2, #67	@ 0x43
 800d66e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d670:	4b02      	ldr	r3, [pc, #8]	@ (800d67c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d672:	4618      	mov	r0, r3
 800d674:	3718      	adds	r7, #24
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	20000058 	.word	0x20000058

0800d680 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	220a      	movs	r2, #10
 800d68c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d68e:	4b03      	ldr	r3, [pc, #12]	@ (800d69c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d690:	4618      	mov	r0, r3
 800d692:	370c      	adds	r7, #12
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr
 800d69c:	20000014 	.word	0x20000014

0800d6a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d101      	bne.n	800d6b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d6b0:	2303      	movs	r3, #3
 800d6b2:	e009      	b.n	800d6c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	33b0      	adds	r3, #176	@ 0xb0
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	4413      	add	r3, r2
 800d6c2:	683a      	ldr	r2, [r7, #0]
 800d6c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d6c6:	2300      	movs	r3, #0
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr

0800d6d4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b087      	sub	sp, #28
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	32b0      	adds	r2, #176	@ 0xb0
 800d6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6ee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d101      	bne.n	800d6fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	e008      	b.n	800d70c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	68ba      	ldr	r2, [r7, #8]
 800d6fe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d70a:	2300      	movs	r3, #0
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	371c      	adds	r7, #28
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr

0800d718 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d718:	b480      	push	{r7}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	32b0      	adds	r2, #176	@ 0xb0
 800d72c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d730:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d101      	bne.n	800d73c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d738:	2303      	movs	r3, #3
 800d73a:	e004      	b.n	800d746 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	683a      	ldr	r2, [r7, #0]
 800d740:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3714      	adds	r7, #20
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr
	...

0800d754 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	32b0      	adds	r2, #176	@ 0xb0
 800d766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d76a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d76c:	2301      	movs	r3, #1
 800d76e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d101      	bne.n	800d77a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d776:	2303      	movs	r3, #3
 800d778:	e025      	b.n	800d7c6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d780:	2b00      	cmp	r3, #0
 800d782:	d11f      	bne.n	800d7c4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	2201      	movs	r2, #1
 800d788:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d78c:	4b10      	ldr	r3, [pc, #64]	@ (800d7d0 <USBD_CDC_TransmitPacket+0x7c>)
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	f003 020f 	and.w	r2, r3, #15
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	4613      	mov	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	4413      	add	r3, r2
 800d7a2:	009b      	lsls	r3, r3, #2
 800d7a4:	4403      	add	r3, r0
 800d7a6:	3318      	adds	r3, #24
 800d7a8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d7aa:	4b09      	ldr	r3, [pc, #36]	@ (800d7d0 <USBD_CDC_TransmitPacket+0x7c>)
 800d7ac:	7819      	ldrb	r1, [r3, #0]
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f006 f9e9 	bl	8013b92 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	2000009b 	.word	0x2000009b

0800d7d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	32b0      	adds	r2, #176	@ 0xb0
 800d7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	32b0      	adds	r2, #176	@ 0xb0
 800d7f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d101      	bne.n	800d802 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d7fe:	2303      	movs	r3, #3
 800d800:	e018      	b.n	800d834 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	7c1b      	ldrb	r3, [r3, #16]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d10a      	bne.n	800d820 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d80a:	4b0c      	ldr	r3, [pc, #48]	@ (800d83c <USBD_CDC_ReceivePacket+0x68>)
 800d80c:	7819      	ldrb	r1, [r3, #0]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d814:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f006 f9db 	bl	8013bd4 <USBD_LL_PrepareReceive>
 800d81e:	e008      	b.n	800d832 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d820:	4b06      	ldr	r3, [pc, #24]	@ (800d83c <USBD_CDC_ReceivePacket+0x68>)
 800d822:	7819      	ldrb	r1, [r3, #0]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d82a:	2340      	movs	r3, #64	@ 0x40
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f006 f9d1 	bl	8013bd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	3710      	adds	r7, #16
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	2000009c 	.word	0x2000009c

0800d840 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	4613      	mov	r3, r2
 800d84c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d101      	bne.n	800d858 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d854:	2303      	movs	r3, #3
 800d856:	e01f      	b.n	800d898 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2200      	movs	r2, #0
 800d85c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2200      	movs	r2, #0
 800d864:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2200      	movs	r2, #0
 800d86c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d003      	beq.n	800d87e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	68ba      	ldr	r2, [r7, #8]
 800d87a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2201      	movs	r2, #1
 800d882:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	79fa      	ldrb	r2, [r7, #7]
 800d88a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d88c:	68f8      	ldr	r0, [r7, #12]
 800d88e:	f006 f835 	bl	80138fc <USBD_LL_Init>
 800d892:	4603      	mov	r3, r0
 800d894:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d896:	7dfb      	ldrb	r3, [r7, #23]
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3718      	adds	r7, #24
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d101      	bne.n	800d8b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d8b4:	2303      	movs	r3, #3
 800d8b6:	e025      	b.n	800d904 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	683a      	ldr	r2, [r7, #0]
 800d8bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	32ae      	adds	r2, #174	@ 0xae
 800d8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d00f      	beq.n	800d8f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	32ae      	adds	r2, #174	@ 0xae
 800d8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8e4:	f107 020e 	add.w	r2, r7, #14
 800d8e8:	4610      	mov	r0, r2
 800d8ea:	4798      	blx	r3
 800d8ec:	4602      	mov	r2, r0
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d8fa:	1c5a      	adds	r2, r3, #1
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3710      	adds	r7, #16
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f006 f853 	bl	80139c0 <USBD_LL_Start>
 800d91a:	4603      	mov	r3, r0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d92c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d92e:	4618      	mov	r0, r3
 800d930:	370c      	adds	r7, #12
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr

0800d93a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b084      	sub	sp, #16
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
 800d942:	460b      	mov	r3, r1
 800d944:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d946:	2300      	movs	r3, #0
 800d948:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d950:	2b00      	cmp	r3, #0
 800d952:	d009      	beq.n	800d968 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	78fa      	ldrb	r2, [r7, #3]
 800d95e:	4611      	mov	r1, r2
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	4798      	blx	r3
 800d964:	4603      	mov	r3, r0
 800d966:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d968:	7bfb      	ldrb	r3, [r7, #15]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d972:	b580      	push	{r7, lr}
 800d974:	b084      	sub	sp, #16
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
 800d97a:	460b      	mov	r3, r1
 800d97c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d97e:	2300      	movs	r3, #0
 800d980:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	78fa      	ldrb	r2, [r7, #3]
 800d98c:	4611      	mov	r1, r2
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	4798      	blx	r3
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d001      	beq.n	800d99c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d998:	2303      	movs	r3, #3
 800d99a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}

0800d9a6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d9a6:	b580      	push	{r7, lr}
 800d9a8:	b084      	sub	sp, #16
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
 800d9ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d9b6:	6839      	ldr	r1, [r7, #0]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f001 f8a4 	bl	800eb06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d9da:	f003 031f 	and.w	r3, r3, #31
 800d9de:	2b02      	cmp	r3, #2
 800d9e0:	d01a      	beq.n	800da18 <USBD_LL_SetupStage+0x72>
 800d9e2:	2b02      	cmp	r3, #2
 800d9e4:	d822      	bhi.n	800da2c <USBD_LL_SetupStage+0x86>
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d002      	beq.n	800d9f0 <USBD_LL_SetupStage+0x4a>
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d00a      	beq.n	800da04 <USBD_LL_SetupStage+0x5e>
 800d9ee:	e01d      	b.n	800da2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 fad1 	bl	800dfa0 <USBD_StdDevReq>
 800d9fe:	4603      	mov	r3, r0
 800da00:	73fb      	strb	r3, [r7, #15]
      break;
 800da02:	e020      	b.n	800da46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800da0a:	4619      	mov	r1, r3
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 fb39 	bl	800e084 <USBD_StdItfReq>
 800da12:	4603      	mov	r3, r0
 800da14:	73fb      	strb	r3, [r7, #15]
      break;
 800da16:	e016      	b.n	800da46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800da1e:	4619      	mov	r1, r3
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 fb9b 	bl	800e15c <USBD_StdEPReq>
 800da26:	4603      	mov	r3, r0
 800da28:	73fb      	strb	r3, [r7, #15]
      break;
 800da2a:	e00c      	b.n	800da46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800da32:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800da36:	b2db      	uxtb	r3, r3
 800da38:	4619      	mov	r1, r3
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f006 f820 	bl	8013a80 <USBD_LL_StallEP>
 800da40:	4603      	mov	r3, r0
 800da42:	73fb      	strb	r3, [r7, #15]
      break;
 800da44:	bf00      	nop
  }

  return ret;
 800da46:	7bfb      	ldrb	r3, [r7, #15]
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3710      	adds	r7, #16
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	460b      	mov	r3, r1
 800da5a:	607a      	str	r2, [r7, #4]
 800da5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800da5e:	2300      	movs	r3, #0
 800da60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800da62:	7afb      	ldrb	r3, [r7, #11]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d16e      	bne.n	800db46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800da6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800da76:	2b03      	cmp	r3, #3
 800da78:	f040 8098 	bne.w	800dbac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	689a      	ldr	r2, [r3, #8]
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	429a      	cmp	r2, r3
 800da86:	d913      	bls.n	800dab0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	689a      	ldr	r2, [r3, #8]
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	68db      	ldr	r3, [r3, #12]
 800da90:	1ad2      	subs	r2, r2, r3
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	68da      	ldr	r2, [r3, #12]
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	689b      	ldr	r3, [r3, #8]
 800da9e:	4293      	cmp	r3, r2
 800daa0:	bf28      	it	cs
 800daa2:	4613      	movcs	r3, r2
 800daa4:	461a      	mov	r2, r3
 800daa6:	6879      	ldr	r1, [r7, #4]
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f001 f92c 	bl	800ed06 <USBD_CtlContinueRx>
 800daae:	e07d      	b.n	800dbac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dab6:	f003 031f 	and.w	r3, r3, #31
 800daba:	2b02      	cmp	r3, #2
 800dabc:	d014      	beq.n	800dae8 <USBD_LL_DataOutStage+0x98>
 800dabe:	2b02      	cmp	r3, #2
 800dac0:	d81d      	bhi.n	800dafe <USBD_LL_DataOutStage+0xae>
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d002      	beq.n	800dacc <USBD_LL_DataOutStage+0x7c>
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d003      	beq.n	800dad2 <USBD_LL_DataOutStage+0x82>
 800daca:	e018      	b.n	800dafe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dacc:	2300      	movs	r3, #0
 800dace:	75bb      	strb	r3, [r7, #22]
            break;
 800dad0:	e018      	b.n	800db04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	4619      	mov	r1, r3
 800dadc:	68f8      	ldr	r0, [r7, #12]
 800dade:	f000 f9d2 	bl	800de86 <USBD_CoreFindIF>
 800dae2:	4603      	mov	r3, r0
 800dae4:	75bb      	strb	r3, [r7, #22]
            break;
 800dae6:	e00d      	b.n	800db04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	4619      	mov	r1, r3
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	f000 f9d4 	bl	800dea0 <USBD_CoreFindEP>
 800daf8:	4603      	mov	r3, r0
 800dafa:	75bb      	strb	r3, [r7, #22]
            break;
 800dafc:	e002      	b.n	800db04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dafe:	2300      	movs	r3, #0
 800db00:	75bb      	strb	r3, [r7, #22]
            break;
 800db02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800db04:	7dbb      	ldrb	r3, [r7, #22]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d119      	bne.n	800db3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db10:	b2db      	uxtb	r3, r3
 800db12:	2b03      	cmp	r3, #3
 800db14:	d113      	bne.n	800db3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800db16:	7dba      	ldrb	r2, [r7, #22]
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	32ae      	adds	r2, #174	@ 0xae
 800db1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db20:	691b      	ldr	r3, [r3, #16]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d00b      	beq.n	800db3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800db26:	7dba      	ldrb	r2, [r7, #22]
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800db2e:	7dba      	ldrb	r2, [r7, #22]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	32ae      	adds	r2, #174	@ 0xae
 800db34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db38:	691b      	ldr	r3, [r3, #16]
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800db3e:	68f8      	ldr	r0, [r7, #12]
 800db40:	f001 f8f2 	bl	800ed28 <USBD_CtlSendStatus>
 800db44:	e032      	b.n	800dbac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800db46:	7afb      	ldrb	r3, [r7, #11]
 800db48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	4619      	mov	r1, r3
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f000 f9a5 	bl	800dea0 <USBD_CoreFindEP>
 800db56:	4603      	mov	r3, r0
 800db58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db5a:	7dbb      	ldrb	r3, [r7, #22]
 800db5c:	2bff      	cmp	r3, #255	@ 0xff
 800db5e:	d025      	beq.n	800dbac <USBD_LL_DataOutStage+0x15c>
 800db60:	7dbb      	ldrb	r3, [r7, #22]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d122      	bne.n	800dbac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	2b03      	cmp	r3, #3
 800db70:	d117      	bne.n	800dba2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800db72:	7dba      	ldrb	r2, [r7, #22]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	32ae      	adds	r2, #174	@ 0xae
 800db78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db7c:	699b      	ldr	r3, [r3, #24]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00f      	beq.n	800dba2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800db82:	7dba      	ldrb	r2, [r7, #22]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800db8a:	7dba      	ldrb	r2, [r7, #22]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	32ae      	adds	r2, #174	@ 0xae
 800db90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db94:	699b      	ldr	r3, [r3, #24]
 800db96:	7afa      	ldrb	r2, [r7, #11]
 800db98:	4611      	mov	r1, r2
 800db9a:	68f8      	ldr	r0, [r7, #12]
 800db9c:	4798      	blx	r3
 800db9e:	4603      	mov	r3, r0
 800dba0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dba2:	7dfb      	ldrb	r3, [r7, #23]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d001      	beq.n	800dbac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dba8:	7dfb      	ldrb	r3, [r7, #23]
 800dbaa:	e000      	b.n	800dbae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3718      	adds	r7, #24
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b086      	sub	sp, #24
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	60f8      	str	r0, [r7, #12]
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	607a      	str	r2, [r7, #4]
 800dbc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dbc4:	7afb      	ldrb	r3, [r7, #11]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d16f      	bne.n	800dcaa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3314      	adds	r3, #20
 800dbce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dbd6:	2b02      	cmp	r3, #2
 800dbd8:	d15a      	bne.n	800dc90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	689a      	ldr	r2, [r3, #8]
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d914      	bls.n	800dc10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	689a      	ldr	r2, [r3, #8]
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	1ad2      	subs	r2, r2, r3
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	6879      	ldr	r1, [r7, #4]
 800dbfc:	68f8      	ldr	r0, [r7, #12]
 800dbfe:	f001 f854 	bl	800ecaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc02:	2300      	movs	r3, #0
 800dc04:	2200      	movs	r2, #0
 800dc06:	2100      	movs	r1, #0
 800dc08:	68f8      	ldr	r0, [r7, #12]
 800dc0a:	f005 ffe3 	bl	8013bd4 <USBD_LL_PrepareReceive>
 800dc0e:	e03f      	b.n	800dc90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	68da      	ldr	r2, [r3, #12]
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	689b      	ldr	r3, [r3, #8]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d11c      	bne.n	800dc56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	685a      	ldr	r2, [r3, #4]
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d316      	bcc.n	800dc56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	685a      	ldr	r2, [r3, #4]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d20f      	bcs.n	800dc56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dc36:	2200      	movs	r2, #0
 800dc38:	2100      	movs	r1, #0
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	f001 f835 	bl	800ecaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2200      	movs	r2, #0
 800dc44:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc48:	2300      	movs	r3, #0
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f005 ffc0 	bl	8013bd4 <USBD_LL_PrepareReceive>
 800dc54:	e01c      	b.n	800dc90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	2b03      	cmp	r3, #3
 800dc60:	d10f      	bne.n	800dc82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d009      	beq.n	800dc82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc7c:	68db      	ldr	r3, [r3, #12]
 800dc7e:	68f8      	ldr	r0, [r7, #12]
 800dc80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc82:	2180      	movs	r1, #128	@ 0x80
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f005 fefb 	bl	8013a80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	f001 f85f 	bl	800ed4e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d03a      	beq.n	800dd10 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f7ff fe42 	bl	800d924 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2200      	movs	r2, #0
 800dca4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800dca8:	e032      	b.n	800dd10 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dcaa:	7afb      	ldrb	r3, [r7, #11]
 800dcac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f000 f8f3 	bl	800dea0 <USBD_CoreFindEP>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dcbe:	7dfb      	ldrb	r3, [r7, #23]
 800dcc0:	2bff      	cmp	r3, #255	@ 0xff
 800dcc2:	d025      	beq.n	800dd10 <USBD_LL_DataInStage+0x15a>
 800dcc4:	7dfb      	ldrb	r3, [r7, #23]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d122      	bne.n	800dd10 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	2b03      	cmp	r3, #3
 800dcd4:	d11c      	bne.n	800dd10 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800dcd6:	7dfa      	ldrb	r2, [r7, #23]
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	32ae      	adds	r2, #174	@ 0xae
 800dcdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dce0:	695b      	ldr	r3, [r3, #20]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d014      	beq.n	800dd10 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800dce6:	7dfa      	ldrb	r2, [r7, #23]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800dcee:	7dfa      	ldrb	r2, [r7, #23]
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	32ae      	adds	r2, #174	@ 0xae
 800dcf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcf8:	695b      	ldr	r3, [r3, #20]
 800dcfa:	7afa      	ldrb	r2, [r7, #11]
 800dcfc:	4611      	mov	r1, r2
 800dcfe:	68f8      	ldr	r0, [r7, #12]
 800dd00:	4798      	blx	r3
 800dd02:	4603      	mov	r3, r0
 800dd04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dd06:	7dbb      	ldrb	r3, [r7, #22]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d001      	beq.n	800dd10 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dd0c:	7dbb      	ldrb	r3, [r7, #22]
 800dd0e:	e000      	b.n	800dd12 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dd10:	2300      	movs	r3, #0
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3718      	adds	r7, #24
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b084      	sub	sp, #16
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd22:	2300      	movs	r3, #0
 800dd24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2201      	movs	r2, #1
 800dd2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2200      	movs	r2, #0
 800dd32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2200      	movs	r2, #0
 800dd48:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d014      	beq.n	800dd80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00e      	beq.n	800dd80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	687a      	ldr	r2, [r7, #4]
 800dd6c:	6852      	ldr	r2, [r2, #4]
 800dd6e:	b2d2      	uxtb	r2, r2
 800dd70:	4611      	mov	r1, r2
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	4798      	blx	r3
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d001      	beq.n	800dd80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dd7c:	2303      	movs	r3, #3
 800dd7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd80:	2340      	movs	r3, #64	@ 0x40
 800dd82:	2200      	movs	r2, #0
 800dd84:	2100      	movs	r1, #0
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f005 fe35 	bl	80139f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2240      	movs	r2, #64	@ 0x40
 800dd98:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd9c:	2340      	movs	r3, #64	@ 0x40
 800dd9e:	2200      	movs	r2, #0
 800dda0:	2180      	movs	r1, #128	@ 0x80
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f005 fe27 	bl	80139f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2201      	movs	r2, #1
 800ddac:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2240      	movs	r2, #64	@ 0x40
 800ddb2:	621a      	str	r2, [r3, #32]

  return ret;
 800ddb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3710      	adds	r7, #16
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}

0800ddbe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ddbe:	b480      	push	{r7}
 800ddc0:	b083      	sub	sp, #12
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	78fa      	ldrb	r2, [r7, #3]
 800ddce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ddd0:	2300      	movs	r3, #0
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	370c      	adds	r7, #12
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr

0800ddde <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ddde:	b480      	push	{r7}
 800dde0:	b083      	sub	sp, #12
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	2b04      	cmp	r3, #4
 800ddf0:	d006      	beq.n	800de00 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ddf8:	b2da      	uxtb	r2, r3
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2204      	movs	r2, #4
 800de04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800de08:	2300      	movs	r3, #0
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	370c      	adds	r7, #12
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr

0800de16 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800de16:	b480      	push	{r7}
 800de18:	b083      	sub	sp, #12
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de24:	b2db      	uxtb	r3, r3
 800de26:	2b04      	cmp	r3, #4
 800de28:	d106      	bne.n	800de38 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800de30:	b2da      	uxtb	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	370c      	adds	r7, #12
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr

0800de46 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800de46:	b580      	push	{r7, lr}
 800de48:	b082      	sub	sp, #8
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de54:	b2db      	uxtb	r3, r3
 800de56:	2b03      	cmp	r3, #3
 800de58:	d110      	bne.n	800de7c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de60:	2b00      	cmp	r3, #0
 800de62:	d00b      	beq.n	800de7c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de6a:	69db      	ldr	r3, [r3, #28]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d005      	beq.n	800de7c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de76:	69db      	ldr	r3, [r3, #28]
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800de7c:	2300      	movs	r3, #0
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3708      	adds	r7, #8
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}

0800de86 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800de86:	b480      	push	{r7}
 800de88:	b083      	sub	sp, #12
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
 800de8e:	460b      	mov	r3, r1
 800de90:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800de92:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800de94:	4618      	mov	r0, r3
 800de96:	370c      	adds	r7, #12
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr

0800dea0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b083      	sub	sp, #12
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	460b      	mov	r3, r1
 800deaa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800deac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800deae:	4618      	mov	r0, r3
 800deb0:	370c      	adds	r7, #12
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr

0800deba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800deba:	b580      	push	{r7, lr}
 800debc:	b086      	sub	sp, #24
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
 800dec2:	460b      	mov	r3, r1
 800dec4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dece:	2300      	movs	r3, #0
 800ded0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	885b      	ldrh	r3, [r3, #2]
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	7812      	ldrb	r2, [r2, #0]
 800dedc:	4293      	cmp	r3, r2
 800dede:	d91f      	bls.n	800df20 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dee6:	e013      	b.n	800df10 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dee8:	f107 030a 	add.w	r3, r7, #10
 800deec:	4619      	mov	r1, r3
 800deee:	6978      	ldr	r0, [r7, #20]
 800def0:	f000 f81b 	bl	800df2a <USBD_GetNextDesc>
 800def4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	785b      	ldrb	r3, [r3, #1]
 800defa:	2b05      	cmp	r3, #5
 800defc:	d108      	bne.n	800df10 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	789b      	ldrb	r3, [r3, #2]
 800df06:	78fa      	ldrb	r2, [r7, #3]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d008      	beq.n	800df1e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800df0c:	2300      	movs	r3, #0
 800df0e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	885b      	ldrh	r3, [r3, #2]
 800df14:	b29a      	uxth	r2, r3
 800df16:	897b      	ldrh	r3, [r7, #10]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d8e5      	bhi.n	800dee8 <USBD_GetEpDesc+0x2e>
 800df1c:	e000      	b.n	800df20 <USBD_GetEpDesc+0x66>
          break;
 800df1e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800df20:	693b      	ldr	r3, [r7, #16]
}
 800df22:	4618      	mov	r0, r3
 800df24:	3718      	adds	r7, #24
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}

0800df2a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800df2a:	b480      	push	{r7}
 800df2c:	b085      	sub	sp, #20
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
 800df32:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	881b      	ldrh	r3, [r3, #0]
 800df3c:	68fa      	ldr	r2, [r7, #12]
 800df3e:	7812      	ldrb	r2, [r2, #0]
 800df40:	4413      	add	r3, r2
 800df42:	b29a      	uxth	r2, r3
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	461a      	mov	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	4413      	add	r3, r2
 800df52:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800df54:	68fb      	ldr	r3, [r7, #12]
}
 800df56:	4618      	mov	r0, r3
 800df58:	3714      	adds	r7, #20
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr

0800df62 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800df62:	b480      	push	{r7}
 800df64:	b087      	sub	sp, #28
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	3301      	adds	r3, #1
 800df78:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800df80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800df84:	021b      	lsls	r3, r3, #8
 800df86:	b21a      	sxth	r2, r3
 800df88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800df8c:	4313      	orrs	r3, r2
 800df8e:	b21b      	sxth	r3, r3
 800df90:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800df92:	89fb      	ldrh	r3, [r7, #14]
}
 800df94:	4618      	mov	r0, r3
 800df96:	371c      	adds	r7, #28
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dfb6:	2b40      	cmp	r3, #64	@ 0x40
 800dfb8:	d005      	beq.n	800dfc6 <USBD_StdDevReq+0x26>
 800dfba:	2b40      	cmp	r3, #64	@ 0x40
 800dfbc:	d857      	bhi.n	800e06e <USBD_StdDevReq+0xce>
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d00f      	beq.n	800dfe2 <USBD_StdDevReq+0x42>
 800dfc2:	2b20      	cmp	r3, #32
 800dfc4:	d153      	bne.n	800e06e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	32ae      	adds	r2, #174	@ 0xae
 800dfd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	6839      	ldr	r1, [r7, #0]
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	4798      	blx	r3
 800dfdc:	4603      	mov	r3, r0
 800dfde:	73fb      	strb	r3, [r7, #15]
      break;
 800dfe0:	e04a      	b.n	800e078 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	785b      	ldrb	r3, [r3, #1]
 800dfe6:	2b09      	cmp	r3, #9
 800dfe8:	d83b      	bhi.n	800e062 <USBD_StdDevReq+0xc2>
 800dfea:	a201      	add	r2, pc, #4	@ (adr r2, 800dff0 <USBD_StdDevReq+0x50>)
 800dfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dff0:	0800e045 	.word	0x0800e045
 800dff4:	0800e059 	.word	0x0800e059
 800dff8:	0800e063 	.word	0x0800e063
 800dffc:	0800e04f 	.word	0x0800e04f
 800e000:	0800e063 	.word	0x0800e063
 800e004:	0800e023 	.word	0x0800e023
 800e008:	0800e019 	.word	0x0800e019
 800e00c:	0800e063 	.word	0x0800e063
 800e010:	0800e03b 	.word	0x0800e03b
 800e014:	0800e02d 	.word	0x0800e02d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e018:	6839      	ldr	r1, [r7, #0]
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f000 fa3c 	bl	800e498 <USBD_GetDescriptor>
          break;
 800e020:	e024      	b.n	800e06c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e022:	6839      	ldr	r1, [r7, #0]
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 fbcb 	bl	800e7c0 <USBD_SetAddress>
          break;
 800e02a:	e01f      	b.n	800e06c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e02c:	6839      	ldr	r1, [r7, #0]
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f000 fc0a 	bl	800e848 <USBD_SetConfig>
 800e034:	4603      	mov	r3, r0
 800e036:	73fb      	strb	r3, [r7, #15]
          break;
 800e038:	e018      	b.n	800e06c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e03a:	6839      	ldr	r1, [r7, #0]
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f000 fcad 	bl	800e99c <USBD_GetConfig>
          break;
 800e042:	e013      	b.n	800e06c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e044:	6839      	ldr	r1, [r7, #0]
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f000 fcde 	bl	800ea08 <USBD_GetStatus>
          break;
 800e04c:	e00e      	b.n	800e06c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e04e:	6839      	ldr	r1, [r7, #0]
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 fd0d 	bl	800ea70 <USBD_SetFeature>
          break;
 800e056:	e009      	b.n	800e06c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e058:	6839      	ldr	r1, [r7, #0]
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 fd31 	bl	800eac2 <USBD_ClrFeature>
          break;
 800e060:	e004      	b.n	800e06c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e062:	6839      	ldr	r1, [r7, #0]
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f000 fd88 	bl	800eb7a <USBD_CtlError>
          break;
 800e06a:	bf00      	nop
      }
      break;
 800e06c:	e004      	b.n	800e078 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e06e:	6839      	ldr	r1, [r7, #0]
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 fd82 	bl	800eb7a <USBD_CtlError>
      break;
 800e076:	bf00      	nop
  }

  return ret;
 800e078:	7bfb      	ldrb	r3, [r7, #15]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop

0800e084 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e08e:	2300      	movs	r3, #0
 800e090:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e09a:	2b40      	cmp	r3, #64	@ 0x40
 800e09c:	d005      	beq.n	800e0aa <USBD_StdItfReq+0x26>
 800e09e:	2b40      	cmp	r3, #64	@ 0x40
 800e0a0:	d852      	bhi.n	800e148 <USBD_StdItfReq+0xc4>
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d001      	beq.n	800e0aa <USBD_StdItfReq+0x26>
 800e0a6:	2b20      	cmp	r3, #32
 800e0a8:	d14e      	bne.n	800e148 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	3b01      	subs	r3, #1
 800e0b4:	2b02      	cmp	r3, #2
 800e0b6:	d840      	bhi.n	800e13a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	889b      	ldrh	r3, [r3, #4]
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d836      	bhi.n	800e130 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	889b      	ldrh	r3, [r3, #4]
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f7ff fedb 	bl	800de86 <USBD_CoreFindIF>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e0d4:	7bbb      	ldrb	r3, [r7, #14]
 800e0d6:	2bff      	cmp	r3, #255	@ 0xff
 800e0d8:	d01d      	beq.n	800e116 <USBD_StdItfReq+0x92>
 800e0da:	7bbb      	ldrb	r3, [r7, #14]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d11a      	bne.n	800e116 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e0e0:	7bba      	ldrb	r2, [r7, #14]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	32ae      	adds	r2, #174	@ 0xae
 800e0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ea:	689b      	ldr	r3, [r3, #8]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00f      	beq.n	800e110 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e0f0:	7bba      	ldrb	r2, [r7, #14]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e0f8:	7bba      	ldrb	r2, [r7, #14]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	32ae      	adds	r2, #174	@ 0xae
 800e0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e102:	689b      	ldr	r3, [r3, #8]
 800e104:	6839      	ldr	r1, [r7, #0]
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	4798      	blx	r3
 800e10a:	4603      	mov	r3, r0
 800e10c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e10e:	e004      	b.n	800e11a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e110:	2303      	movs	r3, #3
 800e112:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e114:	e001      	b.n	800e11a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e116:	2303      	movs	r3, #3
 800e118:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	88db      	ldrh	r3, [r3, #6]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d110      	bne.n	800e144 <USBD_StdItfReq+0xc0>
 800e122:	7bfb      	ldrb	r3, [r7, #15]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d10d      	bne.n	800e144 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 fdfd 	bl	800ed28 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e12e:	e009      	b.n	800e144 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fd21 	bl	800eb7a <USBD_CtlError>
          break;
 800e138:	e004      	b.n	800e144 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e13a:	6839      	ldr	r1, [r7, #0]
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 fd1c 	bl	800eb7a <USBD_CtlError>
          break;
 800e142:	e000      	b.n	800e146 <USBD_StdItfReq+0xc2>
          break;
 800e144:	bf00      	nop
      }
      break;
 800e146:	e004      	b.n	800e152 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e148:	6839      	ldr	r1, [r7, #0]
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 fd15 	bl	800eb7a <USBD_CtlError>
      break;
 800e150:	bf00      	nop
  }

  return ret;
 800e152:	7bfb      	ldrb	r3, [r7, #15]
}
 800e154:	4618      	mov	r0, r3
 800e156:	3710      	adds	r7, #16
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e166:	2300      	movs	r3, #0
 800e168:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	889b      	ldrh	r3, [r3, #4]
 800e16e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e178:	2b40      	cmp	r3, #64	@ 0x40
 800e17a:	d007      	beq.n	800e18c <USBD_StdEPReq+0x30>
 800e17c:	2b40      	cmp	r3, #64	@ 0x40
 800e17e:	f200 817f 	bhi.w	800e480 <USBD_StdEPReq+0x324>
 800e182:	2b00      	cmp	r3, #0
 800e184:	d02a      	beq.n	800e1dc <USBD_StdEPReq+0x80>
 800e186:	2b20      	cmp	r3, #32
 800e188:	f040 817a 	bne.w	800e480 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e18c:	7bbb      	ldrb	r3, [r7, #14]
 800e18e:	4619      	mov	r1, r3
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f7ff fe85 	bl	800dea0 <USBD_CoreFindEP>
 800e196:	4603      	mov	r3, r0
 800e198:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e19a:	7b7b      	ldrb	r3, [r7, #13]
 800e19c:	2bff      	cmp	r3, #255	@ 0xff
 800e19e:	f000 8174 	beq.w	800e48a <USBD_StdEPReq+0x32e>
 800e1a2:	7b7b      	ldrb	r3, [r7, #13]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	f040 8170 	bne.w	800e48a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e1aa:	7b7a      	ldrb	r2, [r7, #13]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e1b2:	7b7a      	ldrb	r2, [r7, #13]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	32ae      	adds	r2, #174	@ 0xae
 800e1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1bc:	689b      	ldr	r3, [r3, #8]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	f000 8163 	beq.w	800e48a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e1c4:	7b7a      	ldrb	r2, [r7, #13]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	32ae      	adds	r2, #174	@ 0xae
 800e1ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1ce:	689b      	ldr	r3, [r3, #8]
 800e1d0:	6839      	ldr	r1, [r7, #0]
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	4798      	blx	r3
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e1da:	e156      	b.n	800e48a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	785b      	ldrb	r3, [r3, #1]
 800e1e0:	2b03      	cmp	r3, #3
 800e1e2:	d008      	beq.n	800e1f6 <USBD_StdEPReq+0x9a>
 800e1e4:	2b03      	cmp	r3, #3
 800e1e6:	f300 8145 	bgt.w	800e474 <USBD_StdEPReq+0x318>
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	f000 809b 	beq.w	800e326 <USBD_StdEPReq+0x1ca>
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d03c      	beq.n	800e26e <USBD_StdEPReq+0x112>
 800e1f4:	e13e      	b.n	800e474 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	2b02      	cmp	r3, #2
 800e200:	d002      	beq.n	800e208 <USBD_StdEPReq+0xac>
 800e202:	2b03      	cmp	r3, #3
 800e204:	d016      	beq.n	800e234 <USBD_StdEPReq+0xd8>
 800e206:	e02c      	b.n	800e262 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e208:	7bbb      	ldrb	r3, [r7, #14]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d00d      	beq.n	800e22a <USBD_StdEPReq+0xce>
 800e20e:	7bbb      	ldrb	r3, [r7, #14]
 800e210:	2b80      	cmp	r3, #128	@ 0x80
 800e212:	d00a      	beq.n	800e22a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e214:	7bbb      	ldrb	r3, [r7, #14]
 800e216:	4619      	mov	r1, r3
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f005 fc31 	bl	8013a80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e21e:	2180      	movs	r1, #128	@ 0x80
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f005 fc2d 	bl	8013a80 <USBD_LL_StallEP>
 800e226:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e228:	e020      	b.n	800e26c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e22a:	6839      	ldr	r1, [r7, #0]
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 fca4 	bl	800eb7a <USBD_CtlError>
              break;
 800e232:	e01b      	b.n	800e26c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	885b      	ldrh	r3, [r3, #2]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d10e      	bne.n	800e25a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e23c:	7bbb      	ldrb	r3, [r7, #14]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d00b      	beq.n	800e25a <USBD_StdEPReq+0xfe>
 800e242:	7bbb      	ldrb	r3, [r7, #14]
 800e244:	2b80      	cmp	r3, #128	@ 0x80
 800e246:	d008      	beq.n	800e25a <USBD_StdEPReq+0xfe>
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	88db      	ldrh	r3, [r3, #6]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d104      	bne.n	800e25a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e250:	7bbb      	ldrb	r3, [r7, #14]
 800e252:	4619      	mov	r1, r3
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f005 fc13 	bl	8013a80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f000 fd64 	bl	800ed28 <USBD_CtlSendStatus>

              break;
 800e260:	e004      	b.n	800e26c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e262:	6839      	ldr	r1, [r7, #0]
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f000 fc88 	bl	800eb7a <USBD_CtlError>
              break;
 800e26a:	bf00      	nop
          }
          break;
 800e26c:	e107      	b.n	800e47e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e274:	b2db      	uxtb	r3, r3
 800e276:	2b02      	cmp	r3, #2
 800e278:	d002      	beq.n	800e280 <USBD_StdEPReq+0x124>
 800e27a:	2b03      	cmp	r3, #3
 800e27c:	d016      	beq.n	800e2ac <USBD_StdEPReq+0x150>
 800e27e:	e04b      	b.n	800e318 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e280:	7bbb      	ldrb	r3, [r7, #14]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d00d      	beq.n	800e2a2 <USBD_StdEPReq+0x146>
 800e286:	7bbb      	ldrb	r3, [r7, #14]
 800e288:	2b80      	cmp	r3, #128	@ 0x80
 800e28a:	d00a      	beq.n	800e2a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e28c:	7bbb      	ldrb	r3, [r7, #14]
 800e28e:	4619      	mov	r1, r3
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f005 fbf5 	bl	8013a80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e296:	2180      	movs	r1, #128	@ 0x80
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f005 fbf1 	bl	8013a80 <USBD_LL_StallEP>
 800e29e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e2a0:	e040      	b.n	800e324 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e2a2:	6839      	ldr	r1, [r7, #0]
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 fc68 	bl	800eb7a <USBD_CtlError>
              break;
 800e2aa:	e03b      	b.n	800e324 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	885b      	ldrh	r3, [r3, #2]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d136      	bne.n	800e322 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e2b4:	7bbb      	ldrb	r3, [r7, #14]
 800e2b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d004      	beq.n	800e2c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e2be:	7bbb      	ldrb	r3, [r7, #14]
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f005 fbfb 	bl	8013abe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 fd2d 	bl	800ed28 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e2ce:	7bbb      	ldrb	r3, [r7, #14]
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f7ff fde4 	bl	800dea0 <USBD_CoreFindEP>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e2dc:	7b7b      	ldrb	r3, [r7, #13]
 800e2de:	2bff      	cmp	r3, #255	@ 0xff
 800e2e0:	d01f      	beq.n	800e322 <USBD_StdEPReq+0x1c6>
 800e2e2:	7b7b      	ldrb	r3, [r7, #13]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d11c      	bne.n	800e322 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e2e8:	7b7a      	ldrb	r2, [r7, #13]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e2f0:	7b7a      	ldrb	r2, [r7, #13]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	32ae      	adds	r2, #174	@ 0xae
 800e2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d010      	beq.n	800e322 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e300:	7b7a      	ldrb	r2, [r7, #13]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	32ae      	adds	r2, #174	@ 0xae
 800e306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e30a:	689b      	ldr	r3, [r3, #8]
 800e30c:	6839      	ldr	r1, [r7, #0]
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	4798      	blx	r3
 800e312:	4603      	mov	r3, r0
 800e314:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e316:	e004      	b.n	800e322 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e318:	6839      	ldr	r1, [r7, #0]
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f000 fc2d 	bl	800eb7a <USBD_CtlError>
              break;
 800e320:	e000      	b.n	800e324 <USBD_StdEPReq+0x1c8>
              break;
 800e322:	bf00      	nop
          }
          break;
 800e324:	e0ab      	b.n	800e47e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e32c:	b2db      	uxtb	r3, r3
 800e32e:	2b02      	cmp	r3, #2
 800e330:	d002      	beq.n	800e338 <USBD_StdEPReq+0x1dc>
 800e332:	2b03      	cmp	r3, #3
 800e334:	d032      	beq.n	800e39c <USBD_StdEPReq+0x240>
 800e336:	e097      	b.n	800e468 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e338:	7bbb      	ldrb	r3, [r7, #14]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d007      	beq.n	800e34e <USBD_StdEPReq+0x1f2>
 800e33e:	7bbb      	ldrb	r3, [r7, #14]
 800e340:	2b80      	cmp	r3, #128	@ 0x80
 800e342:	d004      	beq.n	800e34e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e344:	6839      	ldr	r1, [r7, #0]
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 fc17 	bl	800eb7a <USBD_CtlError>
                break;
 800e34c:	e091      	b.n	800e472 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e34e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e352:	2b00      	cmp	r3, #0
 800e354:	da0b      	bge.n	800e36e <USBD_StdEPReq+0x212>
 800e356:	7bbb      	ldrb	r3, [r7, #14]
 800e358:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e35c:	4613      	mov	r3, r2
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	4413      	add	r3, r2
 800e362:	009b      	lsls	r3, r3, #2
 800e364:	3310      	adds	r3, #16
 800e366:	687a      	ldr	r2, [r7, #4]
 800e368:	4413      	add	r3, r2
 800e36a:	3304      	adds	r3, #4
 800e36c:	e00b      	b.n	800e386 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e36e:	7bbb      	ldrb	r3, [r7, #14]
 800e370:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e374:	4613      	mov	r3, r2
 800e376:	009b      	lsls	r3, r3, #2
 800e378:	4413      	add	r3, r2
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	4413      	add	r3, r2
 800e384:	3304      	adds	r3, #4
 800e386:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	2200      	movs	r2, #0
 800e38c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	2202      	movs	r2, #2
 800e392:	4619      	mov	r1, r3
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 fc6d 	bl	800ec74 <USBD_CtlSendData>
              break;
 800e39a:	e06a      	b.n	800e472 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e39c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	da11      	bge.n	800e3c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e3a4:	7bbb      	ldrb	r3, [r7, #14]
 800e3a6:	f003 020f 	and.w	r2, r3, #15
 800e3aa:	6879      	ldr	r1, [r7, #4]
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4413      	add	r3, r2
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	440b      	add	r3, r1
 800e3b6:	3324      	adds	r3, #36	@ 0x24
 800e3b8:	881b      	ldrh	r3, [r3, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d117      	bne.n	800e3ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e3be:	6839      	ldr	r1, [r7, #0]
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f000 fbda 	bl	800eb7a <USBD_CtlError>
                  break;
 800e3c6:	e054      	b.n	800e472 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e3c8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ca:	f003 020f 	and.w	r2, r3, #15
 800e3ce:	6879      	ldr	r1, [r7, #4]
 800e3d0:	4613      	mov	r3, r2
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	4413      	add	r3, r2
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	440b      	add	r3, r1
 800e3da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e3de:	881b      	ldrh	r3, [r3, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d104      	bne.n	800e3ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e3e4:	6839      	ldr	r1, [r7, #0]
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f000 fbc7 	bl	800eb7a <USBD_CtlError>
                  break;
 800e3ec:	e041      	b.n	800e472 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	da0b      	bge.n	800e40e <USBD_StdEPReq+0x2b2>
 800e3f6:	7bbb      	ldrb	r3, [r7, #14]
 800e3f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	009b      	lsls	r3, r3, #2
 800e400:	4413      	add	r3, r2
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	3310      	adds	r3, #16
 800e406:	687a      	ldr	r2, [r7, #4]
 800e408:	4413      	add	r3, r2
 800e40a:	3304      	adds	r3, #4
 800e40c:	e00b      	b.n	800e426 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e40e:	7bbb      	ldrb	r3, [r7, #14]
 800e410:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e414:	4613      	mov	r3, r2
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	4413      	add	r3, r2
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	4413      	add	r3, r2
 800e424:	3304      	adds	r3, #4
 800e426:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e428:	7bbb      	ldrb	r3, [r7, #14]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d002      	beq.n	800e434 <USBD_StdEPReq+0x2d8>
 800e42e:	7bbb      	ldrb	r3, [r7, #14]
 800e430:	2b80      	cmp	r3, #128	@ 0x80
 800e432:	d103      	bne.n	800e43c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	2200      	movs	r2, #0
 800e438:	601a      	str	r2, [r3, #0]
 800e43a:	e00e      	b.n	800e45a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e43c:	7bbb      	ldrb	r3, [r7, #14]
 800e43e:	4619      	mov	r1, r3
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f005 fb5b 	bl	8013afc <USBD_LL_IsStallEP>
 800e446:	4603      	mov	r3, r0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d003      	beq.n	800e454 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	2201      	movs	r2, #1
 800e450:	601a      	str	r2, [r3, #0]
 800e452:	e002      	b.n	800e45a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	2200      	movs	r2, #0
 800e458:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	2202      	movs	r2, #2
 800e45e:	4619      	mov	r1, r3
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 fc07 	bl	800ec74 <USBD_CtlSendData>
              break;
 800e466:	e004      	b.n	800e472 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e468:	6839      	ldr	r1, [r7, #0]
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 fb85 	bl	800eb7a <USBD_CtlError>
              break;
 800e470:	bf00      	nop
          }
          break;
 800e472:	e004      	b.n	800e47e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e474:	6839      	ldr	r1, [r7, #0]
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 fb7f 	bl	800eb7a <USBD_CtlError>
          break;
 800e47c:	bf00      	nop
      }
      break;
 800e47e:	e005      	b.n	800e48c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e480:	6839      	ldr	r1, [r7, #0]
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 fb79 	bl	800eb7a <USBD_CtlError>
      break;
 800e488:	e000      	b.n	800e48c <USBD_StdEPReq+0x330>
      break;
 800e48a:	bf00      	nop
  }

  return ret;
 800e48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3710      	adds	r7, #16
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
	...

0800e498 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	885b      	ldrh	r3, [r3, #2]
 800e4b2:	0a1b      	lsrs	r3, r3, #8
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	3b01      	subs	r3, #1
 800e4b8:	2b0e      	cmp	r3, #14
 800e4ba:	f200 8152 	bhi.w	800e762 <USBD_GetDescriptor+0x2ca>
 800e4be:	a201      	add	r2, pc, #4	@ (adr r2, 800e4c4 <USBD_GetDescriptor+0x2c>)
 800e4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4c4:	0800e535 	.word	0x0800e535
 800e4c8:	0800e54d 	.word	0x0800e54d
 800e4cc:	0800e58d 	.word	0x0800e58d
 800e4d0:	0800e763 	.word	0x0800e763
 800e4d4:	0800e763 	.word	0x0800e763
 800e4d8:	0800e703 	.word	0x0800e703
 800e4dc:	0800e72f 	.word	0x0800e72f
 800e4e0:	0800e763 	.word	0x0800e763
 800e4e4:	0800e763 	.word	0x0800e763
 800e4e8:	0800e763 	.word	0x0800e763
 800e4ec:	0800e763 	.word	0x0800e763
 800e4f0:	0800e763 	.word	0x0800e763
 800e4f4:	0800e763 	.word	0x0800e763
 800e4f8:	0800e763 	.word	0x0800e763
 800e4fc:	0800e501 	.word	0x0800e501
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e506:	69db      	ldr	r3, [r3, #28]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d00b      	beq.n	800e524 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e512:	69db      	ldr	r3, [r3, #28]
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	7c12      	ldrb	r2, [r2, #16]
 800e518:	f107 0108 	add.w	r1, r7, #8
 800e51c:	4610      	mov	r0, r2
 800e51e:	4798      	blx	r3
 800e520:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e522:	e126      	b.n	800e772 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e524:	6839      	ldr	r1, [r7, #0]
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f000 fb27 	bl	800eb7a <USBD_CtlError>
        err++;
 800e52c:	7afb      	ldrb	r3, [r7, #11]
 800e52e:	3301      	adds	r3, #1
 800e530:	72fb      	strb	r3, [r7, #11]
      break;
 800e532:	e11e      	b.n	800e772 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	7c12      	ldrb	r2, [r2, #16]
 800e540:	f107 0108 	add.w	r1, r7, #8
 800e544:	4610      	mov	r0, r2
 800e546:	4798      	blx	r3
 800e548:	60f8      	str	r0, [r7, #12]
      break;
 800e54a:	e112      	b.n	800e772 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	7c1b      	ldrb	r3, [r3, #16]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d10d      	bne.n	800e570 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e55c:	f107 0208 	add.w	r2, r7, #8
 800e560:	4610      	mov	r0, r2
 800e562:	4798      	blx	r3
 800e564:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	3301      	adds	r3, #1
 800e56a:	2202      	movs	r2, #2
 800e56c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e56e:	e100      	b.n	800e772 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e578:	f107 0208 	add.w	r2, r7, #8
 800e57c:	4610      	mov	r0, r2
 800e57e:	4798      	blx	r3
 800e580:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	3301      	adds	r3, #1
 800e586:	2202      	movs	r2, #2
 800e588:	701a      	strb	r2, [r3, #0]
      break;
 800e58a:	e0f2      	b.n	800e772 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	885b      	ldrh	r3, [r3, #2]
 800e590:	b2db      	uxtb	r3, r3
 800e592:	2b05      	cmp	r3, #5
 800e594:	f200 80ac 	bhi.w	800e6f0 <USBD_GetDescriptor+0x258>
 800e598:	a201      	add	r2, pc, #4	@ (adr r2, 800e5a0 <USBD_GetDescriptor+0x108>)
 800e59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e59e:	bf00      	nop
 800e5a0:	0800e5b9 	.word	0x0800e5b9
 800e5a4:	0800e5ed 	.word	0x0800e5ed
 800e5a8:	0800e621 	.word	0x0800e621
 800e5ac:	0800e655 	.word	0x0800e655
 800e5b0:	0800e689 	.word	0x0800e689
 800e5b4:	0800e6bd 	.word	0x0800e6bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d00b      	beq.n	800e5dc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5ca:	685b      	ldr	r3, [r3, #4]
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	7c12      	ldrb	r2, [r2, #16]
 800e5d0:	f107 0108 	add.w	r1, r7, #8
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	4798      	blx	r3
 800e5d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5da:	e091      	b.n	800e700 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5dc:	6839      	ldr	r1, [r7, #0]
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 facb 	bl	800eb7a <USBD_CtlError>
            err++;
 800e5e4:	7afb      	ldrb	r3, [r7, #11]
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	72fb      	strb	r3, [r7, #11]
          break;
 800e5ea:	e089      	b.n	800e700 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5f2:	689b      	ldr	r3, [r3, #8]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d00b      	beq.n	800e610 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5fe:	689b      	ldr	r3, [r3, #8]
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	7c12      	ldrb	r2, [r2, #16]
 800e604:	f107 0108 	add.w	r1, r7, #8
 800e608:	4610      	mov	r0, r2
 800e60a:	4798      	blx	r3
 800e60c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e60e:	e077      	b.n	800e700 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e610:	6839      	ldr	r1, [r7, #0]
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 fab1 	bl	800eb7a <USBD_CtlError>
            err++;
 800e618:	7afb      	ldrb	r3, [r7, #11]
 800e61a:	3301      	adds	r3, #1
 800e61c:	72fb      	strb	r3, [r7, #11]
          break;
 800e61e:	e06f      	b.n	800e700 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e626:	68db      	ldr	r3, [r3, #12]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d00b      	beq.n	800e644 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	7c12      	ldrb	r2, [r2, #16]
 800e638:	f107 0108 	add.w	r1, r7, #8
 800e63c:	4610      	mov	r0, r2
 800e63e:	4798      	blx	r3
 800e640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e642:	e05d      	b.n	800e700 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e644:	6839      	ldr	r1, [r7, #0]
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 fa97 	bl	800eb7a <USBD_CtlError>
            err++;
 800e64c:	7afb      	ldrb	r3, [r7, #11]
 800e64e:	3301      	adds	r3, #1
 800e650:	72fb      	strb	r3, [r7, #11]
          break;
 800e652:	e055      	b.n	800e700 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e65a:	691b      	ldr	r3, [r3, #16]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00b      	beq.n	800e678 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e666:	691b      	ldr	r3, [r3, #16]
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	7c12      	ldrb	r2, [r2, #16]
 800e66c:	f107 0108 	add.w	r1, r7, #8
 800e670:	4610      	mov	r0, r2
 800e672:	4798      	blx	r3
 800e674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e676:	e043      	b.n	800e700 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e678:	6839      	ldr	r1, [r7, #0]
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f000 fa7d 	bl	800eb7a <USBD_CtlError>
            err++;
 800e680:	7afb      	ldrb	r3, [r7, #11]
 800e682:	3301      	adds	r3, #1
 800e684:	72fb      	strb	r3, [r7, #11]
          break;
 800e686:	e03b      	b.n	800e700 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e68e:	695b      	ldr	r3, [r3, #20]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d00b      	beq.n	800e6ac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e69a:	695b      	ldr	r3, [r3, #20]
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	7c12      	ldrb	r2, [r2, #16]
 800e6a0:	f107 0108 	add.w	r1, r7, #8
 800e6a4:	4610      	mov	r0, r2
 800e6a6:	4798      	blx	r3
 800e6a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6aa:	e029      	b.n	800e700 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e6ac:	6839      	ldr	r1, [r7, #0]
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f000 fa63 	bl	800eb7a <USBD_CtlError>
            err++;
 800e6b4:	7afb      	ldrb	r3, [r7, #11]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	72fb      	strb	r3, [r7, #11]
          break;
 800e6ba:	e021      	b.n	800e700 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6c2:	699b      	ldr	r3, [r3, #24]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d00b      	beq.n	800e6e0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6ce:	699b      	ldr	r3, [r3, #24]
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	7c12      	ldrb	r2, [r2, #16]
 800e6d4:	f107 0108 	add.w	r1, r7, #8
 800e6d8:	4610      	mov	r0, r2
 800e6da:	4798      	blx	r3
 800e6dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6de:	e00f      	b.n	800e700 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e6e0:	6839      	ldr	r1, [r7, #0]
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 fa49 	bl	800eb7a <USBD_CtlError>
            err++;
 800e6e8:	7afb      	ldrb	r3, [r7, #11]
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	72fb      	strb	r3, [r7, #11]
          break;
 800e6ee:	e007      	b.n	800e700 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e6f0:	6839      	ldr	r1, [r7, #0]
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 fa41 	bl	800eb7a <USBD_CtlError>
          err++;
 800e6f8:	7afb      	ldrb	r3, [r7, #11]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e6fe:	bf00      	nop
      }
      break;
 800e700:	e037      	b.n	800e772 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	7c1b      	ldrb	r3, [r3, #16]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d109      	bne.n	800e71e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e712:	f107 0208 	add.w	r2, r7, #8
 800e716:	4610      	mov	r0, r2
 800e718:	4798      	blx	r3
 800e71a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e71c:	e029      	b.n	800e772 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e71e:	6839      	ldr	r1, [r7, #0]
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 fa2a 	bl	800eb7a <USBD_CtlError>
        err++;
 800e726:	7afb      	ldrb	r3, [r7, #11]
 800e728:	3301      	adds	r3, #1
 800e72a:	72fb      	strb	r3, [r7, #11]
      break;
 800e72c:	e021      	b.n	800e772 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	7c1b      	ldrb	r3, [r3, #16]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d10d      	bne.n	800e752 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e73c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e73e:	f107 0208 	add.w	r2, r7, #8
 800e742:	4610      	mov	r0, r2
 800e744:	4798      	blx	r3
 800e746:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	3301      	adds	r3, #1
 800e74c:	2207      	movs	r2, #7
 800e74e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e750:	e00f      	b.n	800e772 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e752:	6839      	ldr	r1, [r7, #0]
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f000 fa10 	bl	800eb7a <USBD_CtlError>
        err++;
 800e75a:	7afb      	ldrb	r3, [r7, #11]
 800e75c:	3301      	adds	r3, #1
 800e75e:	72fb      	strb	r3, [r7, #11]
      break;
 800e760:	e007      	b.n	800e772 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e762:	6839      	ldr	r1, [r7, #0]
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 fa08 	bl	800eb7a <USBD_CtlError>
      err++;
 800e76a:	7afb      	ldrb	r3, [r7, #11]
 800e76c:	3301      	adds	r3, #1
 800e76e:	72fb      	strb	r3, [r7, #11]
      break;
 800e770:	bf00      	nop
  }

  if (err != 0U)
 800e772:	7afb      	ldrb	r3, [r7, #11]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d11e      	bne.n	800e7b6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	88db      	ldrh	r3, [r3, #6]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d016      	beq.n	800e7ae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e780:	893b      	ldrh	r3, [r7, #8]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00e      	beq.n	800e7a4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	88da      	ldrh	r2, [r3, #6]
 800e78a:	893b      	ldrh	r3, [r7, #8]
 800e78c:	4293      	cmp	r3, r2
 800e78e:	bf28      	it	cs
 800e790:	4613      	movcs	r3, r2
 800e792:	b29b      	uxth	r3, r3
 800e794:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e796:	893b      	ldrh	r3, [r7, #8]
 800e798:	461a      	mov	r2, r3
 800e79a:	68f9      	ldr	r1, [r7, #12]
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 fa69 	bl	800ec74 <USBD_CtlSendData>
 800e7a2:	e009      	b.n	800e7b8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e7a4:	6839      	ldr	r1, [r7, #0]
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 f9e7 	bl	800eb7a <USBD_CtlError>
 800e7ac:	e004      	b.n	800e7b8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f000 faba 	bl	800ed28 <USBD_CtlSendStatus>
 800e7b4:	e000      	b.n	800e7b8 <USBD_GetDescriptor+0x320>
    return;
 800e7b6:	bf00      	nop
  }
}
 800e7b8:	3710      	adds	r7, #16
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop

0800e7c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	889b      	ldrh	r3, [r3, #4]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d131      	bne.n	800e836 <USBD_SetAddress+0x76>
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	88db      	ldrh	r3, [r3, #6]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d12d      	bne.n	800e836 <USBD_SetAddress+0x76>
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	885b      	ldrh	r3, [r3, #2]
 800e7de:	2b7f      	cmp	r3, #127	@ 0x7f
 800e7e0:	d829      	bhi.n	800e836 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	885b      	ldrh	r3, [r3, #2]
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	2b03      	cmp	r3, #3
 800e7f8:	d104      	bne.n	800e804 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e7fa:	6839      	ldr	r1, [r7, #0]
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f000 f9bc 	bl	800eb7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e802:	e01d      	b.n	800e840 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	7bfa      	ldrb	r2, [r7, #15]
 800e808:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e80c:	7bfb      	ldrb	r3, [r7, #15]
 800e80e:	4619      	mov	r1, r3
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f005 f99f 	bl	8013b54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f000 fa86 	bl	800ed28 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e81c:	7bfb      	ldrb	r3, [r7, #15]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d004      	beq.n	800e82c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2202      	movs	r2, #2
 800e826:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e82a:	e009      	b.n	800e840 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2201      	movs	r2, #1
 800e830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e834:	e004      	b.n	800e840 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e836:	6839      	ldr	r1, [r7, #0]
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 f99e 	bl	800eb7a <USBD_CtlError>
  }
}
 800e83e:	bf00      	nop
 800e840:	bf00      	nop
 800e842:	3710      	adds	r7, #16
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	885b      	ldrh	r3, [r3, #2]
 800e85a:	b2da      	uxtb	r2, r3
 800e85c:	4b4e      	ldr	r3, [pc, #312]	@ (800e998 <USBD_SetConfig+0x150>)
 800e85e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e860:	4b4d      	ldr	r3, [pc, #308]	@ (800e998 <USBD_SetConfig+0x150>)
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	2b01      	cmp	r3, #1
 800e866:	d905      	bls.n	800e874 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e868:	6839      	ldr	r1, [r7, #0]
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 f985 	bl	800eb7a <USBD_CtlError>
    return USBD_FAIL;
 800e870:	2303      	movs	r3, #3
 800e872:	e08c      	b.n	800e98e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	2b02      	cmp	r3, #2
 800e87e:	d002      	beq.n	800e886 <USBD_SetConfig+0x3e>
 800e880:	2b03      	cmp	r3, #3
 800e882:	d029      	beq.n	800e8d8 <USBD_SetConfig+0x90>
 800e884:	e075      	b.n	800e972 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e886:	4b44      	ldr	r3, [pc, #272]	@ (800e998 <USBD_SetConfig+0x150>)
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d020      	beq.n	800e8d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e88e:	4b42      	ldr	r3, [pc, #264]	@ (800e998 <USBD_SetConfig+0x150>)
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	461a      	mov	r2, r3
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e898:	4b3f      	ldr	r3, [pc, #252]	@ (800e998 <USBD_SetConfig+0x150>)
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	4619      	mov	r1, r3
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f7ff f84b 	bl	800d93a <USBD_SetClassConfig>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e8a8:	7bfb      	ldrb	r3, [r7, #15]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d008      	beq.n	800e8c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e8ae:	6839      	ldr	r1, [r7, #0]
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f000 f962 	bl	800eb7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2202      	movs	r2, #2
 800e8ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e8be:	e065      	b.n	800e98c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f000 fa31 	bl	800ed28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2203      	movs	r2, #3
 800e8ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e8ce:	e05d      	b.n	800e98c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 fa29 	bl	800ed28 <USBD_CtlSendStatus>
      break;
 800e8d6:	e059      	b.n	800e98c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e8d8:	4b2f      	ldr	r3, [pc, #188]	@ (800e998 <USBD_SetConfig+0x150>)
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d112      	bne.n	800e906 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2202      	movs	r2, #2
 800e8e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e8e8:	4b2b      	ldr	r3, [pc, #172]	@ (800e998 <USBD_SetConfig+0x150>)
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e8f2:	4b29      	ldr	r3, [pc, #164]	@ (800e998 <USBD_SetConfig+0x150>)
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f7ff f83a 	bl	800d972 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f000 fa12 	bl	800ed28 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e904:	e042      	b.n	800e98c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e906:	4b24      	ldr	r3, [pc, #144]	@ (800e998 <USBD_SetConfig+0x150>)
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	461a      	mov	r2, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	429a      	cmp	r2, r3
 800e912:	d02a      	beq.n	800e96a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	b2db      	uxtb	r3, r3
 800e91a:	4619      	mov	r1, r3
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f7ff f828 	bl	800d972 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e922:	4b1d      	ldr	r3, [pc, #116]	@ (800e998 <USBD_SetConfig+0x150>)
 800e924:	781b      	ldrb	r3, [r3, #0]
 800e926:	461a      	mov	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e92c:	4b1a      	ldr	r3, [pc, #104]	@ (800e998 <USBD_SetConfig+0x150>)
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	4619      	mov	r1, r3
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7ff f801 	bl	800d93a <USBD_SetClassConfig>
 800e938:	4603      	mov	r3, r0
 800e93a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e93c:	7bfb      	ldrb	r3, [r7, #15]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d00f      	beq.n	800e962 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e942:	6839      	ldr	r1, [r7, #0]
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 f918 	bl	800eb7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	4619      	mov	r1, r3
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f7ff f80d 	bl	800d972 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2202      	movs	r2, #2
 800e95c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e960:	e014      	b.n	800e98c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f000 f9e0 	bl	800ed28 <USBD_CtlSendStatus>
      break;
 800e968:	e010      	b.n	800e98c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 f9dc 	bl	800ed28 <USBD_CtlSendStatus>
      break;
 800e970:	e00c      	b.n	800e98c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e972:	6839      	ldr	r1, [r7, #0]
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 f900 	bl	800eb7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e97a:	4b07      	ldr	r3, [pc, #28]	@ (800e998 <USBD_SetConfig+0x150>)
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	4619      	mov	r1, r3
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f7fe fff6 	bl	800d972 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e986:	2303      	movs	r3, #3
 800e988:	73fb      	strb	r3, [r7, #15]
      break;
 800e98a:	bf00      	nop
  }

  return ret;
 800e98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3710      	adds	r7, #16
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	20000530 	.word	0x20000530

0800e99c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	88db      	ldrh	r3, [r3, #6]
 800e9aa:	2b01      	cmp	r3, #1
 800e9ac:	d004      	beq.n	800e9b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e9ae:	6839      	ldr	r1, [r7, #0]
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 f8e2 	bl	800eb7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e9b6:	e023      	b.n	800ea00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	2b02      	cmp	r3, #2
 800e9c2:	dc02      	bgt.n	800e9ca <USBD_GetConfig+0x2e>
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	dc03      	bgt.n	800e9d0 <USBD_GetConfig+0x34>
 800e9c8:	e015      	b.n	800e9f6 <USBD_GetConfig+0x5a>
 800e9ca:	2b03      	cmp	r3, #3
 800e9cc:	d00b      	beq.n	800e9e6 <USBD_GetConfig+0x4a>
 800e9ce:	e012      	b.n	800e9f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	3308      	adds	r3, #8
 800e9da:	2201      	movs	r2, #1
 800e9dc:	4619      	mov	r1, r3
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f000 f948 	bl	800ec74 <USBD_CtlSendData>
        break;
 800e9e4:	e00c      	b.n	800ea00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	3304      	adds	r3, #4
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 f940 	bl	800ec74 <USBD_CtlSendData>
        break;
 800e9f4:	e004      	b.n	800ea00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e9f6:	6839      	ldr	r1, [r7, #0]
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f000 f8be 	bl	800eb7a <USBD_CtlError>
        break;
 800e9fe:	bf00      	nop
}
 800ea00:	bf00      	nop
 800ea02:	3708      	adds	r7, #8
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	3b01      	subs	r3, #1
 800ea1c:	2b02      	cmp	r3, #2
 800ea1e:	d81e      	bhi.n	800ea5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	88db      	ldrh	r3, [r3, #6]
 800ea24:	2b02      	cmp	r3, #2
 800ea26:	d004      	beq.n	800ea32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ea28:	6839      	ldr	r1, [r7, #0]
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f000 f8a5 	bl	800eb7a <USBD_CtlError>
        break;
 800ea30:	e01a      	b.n	800ea68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2201      	movs	r2, #1
 800ea36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d005      	beq.n	800ea4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	f043 0202 	orr.w	r2, r3, #2
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	330c      	adds	r3, #12
 800ea52:	2202      	movs	r2, #2
 800ea54:	4619      	mov	r1, r3
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f000 f90c 	bl	800ec74 <USBD_CtlSendData>
      break;
 800ea5c:	e004      	b.n	800ea68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ea5e:	6839      	ldr	r1, [r7, #0]
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f000 f88a 	bl	800eb7a <USBD_CtlError>
      break;
 800ea66:	bf00      	nop
  }
}
 800ea68:	bf00      	nop
 800ea6a:	3708      	adds	r7, #8
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	885b      	ldrh	r3, [r3, #2]
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d107      	bne.n	800ea92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2201      	movs	r2, #1
 800ea86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f000 f94c 	bl	800ed28 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ea90:	e013      	b.n	800eaba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	885b      	ldrh	r3, [r3, #2]
 800ea96:	2b02      	cmp	r3, #2
 800ea98:	d10b      	bne.n	800eab2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	889b      	ldrh	r3, [r3, #4]
 800ea9e:	0a1b      	lsrs	r3, r3, #8
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	b2da      	uxtb	r2, r3
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 f93c 	bl	800ed28 <USBD_CtlSendStatus>
}
 800eab0:	e003      	b.n	800eaba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800eab2:	6839      	ldr	r1, [r7, #0]
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f000 f860 	bl	800eb7a <USBD_CtlError>
}
 800eaba:	bf00      	nop
 800eabc:	3708      	adds	r7, #8
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b082      	sub	sp, #8
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
 800eaca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ead2:	b2db      	uxtb	r3, r3
 800ead4:	3b01      	subs	r3, #1
 800ead6:	2b02      	cmp	r3, #2
 800ead8:	d80b      	bhi.n	800eaf2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	885b      	ldrh	r3, [r3, #2]
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d10c      	bne.n	800eafc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2200      	movs	r2, #0
 800eae6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 f91c 	bl	800ed28 <USBD_CtlSendStatus>
      }
      break;
 800eaf0:	e004      	b.n	800eafc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eaf2:	6839      	ldr	r1, [r7, #0]
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f000 f840 	bl	800eb7a <USBD_CtlError>
      break;
 800eafa:	e000      	b.n	800eafe <USBD_ClrFeature+0x3c>
      break;
 800eafc:	bf00      	nop
  }
}
 800eafe:	bf00      	nop
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b084      	sub	sp, #16
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
 800eb0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	781a      	ldrb	r2, [r3, #0]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	781a      	ldrb	r2, [r3, #0]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f7ff fa16 	bl	800df62 <SWAPBYTE>
 800eb36:	4603      	mov	r3, r0
 800eb38:	461a      	mov	r2, r3
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	3301      	adds	r3, #1
 800eb42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	3301      	adds	r3, #1
 800eb48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eb4a:	68f8      	ldr	r0, [r7, #12]
 800eb4c:	f7ff fa09 	bl	800df62 <SWAPBYTE>
 800eb50:	4603      	mov	r3, r0
 800eb52:	461a      	mov	r2, r3
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	3301      	adds	r3, #1
 800eb62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eb64:	68f8      	ldr	r0, [r7, #12]
 800eb66:	f7ff f9fc 	bl	800df62 <SWAPBYTE>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	80da      	strh	r2, [r3, #6]
}
 800eb72:	bf00      	nop
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}

0800eb7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b082      	sub	sp, #8
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
 800eb82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb84:	2180      	movs	r1, #128	@ 0x80
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f004 ff7a 	bl	8013a80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eb8c:	2100      	movs	r1, #0
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f004 ff76 	bl	8013a80 <USBD_LL_StallEP>
}
 800eb94:	bf00      	nop
 800eb96:	3708      	adds	r7, #8
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b086      	sub	sp, #24
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d042      	beq.n	800ec38 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ebb6:	6938      	ldr	r0, [r7, #16]
 800ebb8:	f000 f842 	bl	800ec40 <USBD_GetLen>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	005b      	lsls	r3, r3, #1
 800ebc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebc6:	d808      	bhi.n	800ebda <USBD_GetString+0x3e>
 800ebc8:	6938      	ldr	r0, [r7, #16]
 800ebca:	f000 f839 	bl	800ec40 <USBD_GetLen>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	005b      	lsls	r3, r3, #1
 800ebd6:	b29a      	uxth	r2, r3
 800ebd8:	e001      	b.n	800ebde <USBD_GetString+0x42>
 800ebda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ebe2:	7dfb      	ldrb	r3, [r7, #23]
 800ebe4:	68ba      	ldr	r2, [r7, #8]
 800ebe6:	4413      	add	r3, r2
 800ebe8:	687a      	ldr	r2, [r7, #4]
 800ebea:	7812      	ldrb	r2, [r2, #0]
 800ebec:	701a      	strb	r2, [r3, #0]
  idx++;
 800ebee:	7dfb      	ldrb	r3, [r7, #23]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ebf4:	7dfb      	ldrb	r3, [r7, #23]
 800ebf6:	68ba      	ldr	r2, [r7, #8]
 800ebf8:	4413      	add	r3, r2
 800ebfa:	2203      	movs	r2, #3
 800ebfc:	701a      	strb	r2, [r3, #0]
  idx++;
 800ebfe:	7dfb      	ldrb	r3, [r7, #23]
 800ec00:	3301      	adds	r3, #1
 800ec02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ec04:	e013      	b.n	800ec2e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ec06:	7dfb      	ldrb	r3, [r7, #23]
 800ec08:	68ba      	ldr	r2, [r7, #8]
 800ec0a:	4413      	add	r3, r2
 800ec0c:	693a      	ldr	r2, [r7, #16]
 800ec0e:	7812      	ldrb	r2, [r2, #0]
 800ec10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	3301      	adds	r3, #1
 800ec16:	613b      	str	r3, [r7, #16]
    idx++;
 800ec18:	7dfb      	ldrb	r3, [r7, #23]
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ec1e:	7dfb      	ldrb	r3, [r7, #23]
 800ec20:	68ba      	ldr	r2, [r7, #8]
 800ec22:	4413      	add	r3, r2
 800ec24:	2200      	movs	r2, #0
 800ec26:	701a      	strb	r2, [r3, #0]
    idx++;
 800ec28:	7dfb      	ldrb	r3, [r7, #23]
 800ec2a:	3301      	adds	r3, #1
 800ec2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d1e7      	bne.n	800ec06 <USBD_GetString+0x6a>
 800ec36:	e000      	b.n	800ec3a <USBD_GetString+0x9e>
    return;
 800ec38:	bf00      	nop
  }
}
 800ec3a:	3718      	adds	r7, #24
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b085      	sub	sp, #20
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ec50:	e005      	b.n	800ec5e <USBD_GetLen+0x1e>
  {
    len++;
 800ec52:	7bfb      	ldrb	r3, [r7, #15]
 800ec54:	3301      	adds	r3, #1
 800ec56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d1f5      	bne.n	800ec52 <USBD_GetLen+0x12>
  }

  return len;
 800ec66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3714      	adds	r7, #20
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2202      	movs	r2, #2
 800ec84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	68ba      	ldr	r2, [r7, #8]
 800ec98:	2100      	movs	r1, #0
 800ec9a:	68f8      	ldr	r0, [r7, #12]
 800ec9c:	f004 ff79 	bl	8013b92 <USBD_LL_Transmit>

  return USBD_OK;
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3710      	adds	r7, #16
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}

0800ecaa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ecaa:	b580      	push	{r7, lr}
 800ecac:	b084      	sub	sp, #16
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	60f8      	str	r0, [r7, #12]
 800ecb2:	60b9      	str	r1, [r7, #8]
 800ecb4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	68ba      	ldr	r2, [r7, #8]
 800ecba:	2100      	movs	r1, #0
 800ecbc:	68f8      	ldr	r0, [r7, #12]
 800ecbe:	f004 ff68 	bl	8013b92 <USBD_LL_Transmit>

  return USBD_OK;
 800ecc2:	2300      	movs	r3, #0
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3710      	adds	r7, #16
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2203      	movs	r2, #3
 800ecdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	687a      	ldr	r2, [r7, #4]
 800ecec:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	68ba      	ldr	r2, [r7, #8]
 800ecf4:	2100      	movs	r1, #0
 800ecf6:	68f8      	ldr	r0, [r7, #12]
 800ecf8:	f004 ff6c 	bl	8013bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ecfc:	2300      	movs	r3, #0
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3710      	adds	r7, #16
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ed06:	b580      	push	{r7, lr}
 800ed08:	b084      	sub	sp, #16
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	60f8      	str	r0, [r7, #12]
 800ed0e:	60b9      	str	r1, [r7, #8]
 800ed10:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	68ba      	ldr	r2, [r7, #8]
 800ed16:	2100      	movs	r1, #0
 800ed18:	68f8      	ldr	r0, [r7, #12]
 800ed1a:	f004 ff5b 	bl	8013bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed1e:	2300      	movs	r3, #0
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3710      	adds	r7, #16
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2204      	movs	r2, #4
 800ed34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ed38:	2300      	movs	r3, #0
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	2100      	movs	r1, #0
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f004 ff27 	bl	8013b92 <USBD_LL_Transmit>

  return USBD_OK;
 800ed44:	2300      	movs	r3, #0
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3708      	adds	r7, #8
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b082      	sub	sp, #8
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2205      	movs	r2, #5
 800ed5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed5e:	2300      	movs	r3, #0
 800ed60:	2200      	movs	r2, #0
 800ed62:	2100      	movs	r1, #0
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f004 ff35 	bl	8013bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed6a:	2300      	movs	r3, #0
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3708      	adds	r7, #8
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b088      	sub	sp, #32
 800ed78:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ed7e:	f107 0308 	add.w	r3, r7, #8
 800ed82:	2218      	movs	r2, #24
 800ed84:	2100      	movs	r1, #0
 800ed86:	4618      	mov	r0, r3
 800ed88:	f001 f9bc 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ed8c:	233f      	movs	r3, #63	@ 0x3f
 800ed8e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800ed90:	2381      	movs	r3, #129	@ 0x81
 800ed92:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ed94:	1dfb      	adds	r3, r7, #7
 800ed96:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ed9c:	f107 0308 	add.w	r3, r7, #8
 800eda0:	2100      	movs	r1, #0
 800eda2:	4618      	mov	r0, r3
 800eda4:	f001 fd66 	bl	8010874 <hci_send_req>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b00      	cmp	r3, #0
 800edac:	da01      	bge.n	800edb2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800edae:	23ff      	movs	r3, #255	@ 0xff
 800edb0:	e000      	b.n	800edb4 <aci_gap_set_non_discoverable+0x40>
  return status;
 800edb2:	79fb      	ldrb	r3, [r7, #7]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3720      	adds	r7, #32
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800edbc:	b5b0      	push	{r4, r5, r7, lr}
 800edbe:	b0ce      	sub	sp, #312	@ 0x138
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	4605      	mov	r5, r0
 800edc4:	460c      	mov	r4, r1
 800edc6:	4610      	mov	r0, r2
 800edc8:	4619      	mov	r1, r3
 800edca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800edce:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800edd2:	462a      	mov	r2, r5
 800edd4:	701a      	strb	r2, [r3, #0]
 800edd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800edda:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800edde:	4622      	mov	r2, r4
 800ede0:	801a      	strh	r2, [r3, #0]
 800ede2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ede6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800edea:	4602      	mov	r2, r0
 800edec:	801a      	strh	r2, [r3, #0]
 800edee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800edf2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800edf6:	460a      	mov	r2, r1
 800edf8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800edfa:	f107 0310 	add.w	r3, r7, #16
 800edfe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800ee02:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800ee06:	3308      	adds	r3, #8
 800ee08:	f107 0210 	add.w	r2, r7, #16
 800ee0c:	4413      	add	r3, r2
 800ee0e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800ee12:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800ee16:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800ee1a:	4413      	add	r3, r2
 800ee1c:	3309      	adds	r3, #9
 800ee1e:	f107 0210 	add.w	r2, r7, #16
 800ee22:	4413      	add	r3, r2
 800ee24:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ee28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ee2c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ee30:	2200      	movs	r2, #0
 800ee32:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ee34:	2300      	movs	r3, #0
 800ee36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800ee3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee3e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ee42:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800ee46:	7812      	ldrb	r2, [r2, #0]
 800ee48:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ee4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee4e:	3301      	adds	r3, #1
 800ee50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800ee54:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee58:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ee5c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800ee60:	8812      	ldrh	r2, [r2, #0]
 800ee62:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800ee66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee6a:	3302      	adds	r3, #2
 800ee6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800ee70:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee74:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ee78:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800ee7c:	8812      	ldrh	r2, [r2, #0]
 800ee7e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800ee82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee86:	3302      	adds	r3, #2
 800ee88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800ee8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee90:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ee94:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800ee98:	7812      	ldrb	r2, [r2, #0]
 800ee9a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ee9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eea0:	3301      	adds	r3, #1
 800eea2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800eea6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eeaa:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800eeae:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800eeb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800eeba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eebe:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800eec2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800eec4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eec8:	3301      	adds	r3, #1
 800eeca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800eece:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eed2:	3308      	adds	r3, #8
 800eed4:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800eed8:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800eedc:	4618      	mov	r0, r3
 800eede:	f001 f901 	bl	80100e4 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800eee2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800eee6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800eeea:	4413      	add	r3, r2
 800eeec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800eef0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800eef4:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800eef8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800eefa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eefe:	3301      	adds	r3, #1
 800ef00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800ef04:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ef08:	3301      	adds	r3, #1
 800ef0a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800ef0e:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800ef12:	4618      	mov	r0, r3
 800ef14:	f001 f8e6 	bl	80100e4 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800ef18:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800ef1c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ef20:	4413      	add	r3, r2
 800ef22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800ef26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ef2a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800ef2e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ef30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ef34:	3302      	adds	r3, #2
 800ef36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800ef3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ef3e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800ef42:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800ef44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ef48:	3302      	adds	r3, #2
 800ef4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ef4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ef52:	2218      	movs	r2, #24
 800ef54:	2100      	movs	r1, #0
 800ef56:	4618      	mov	r0, r3
 800ef58:	f001 f8d4 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ef5c:	233f      	movs	r3, #63	@ 0x3f
 800ef5e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800ef62:	2383      	movs	r3, #131	@ 0x83
 800ef64:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ef68:	f107 0310 	add.w	r3, r7, #16
 800ef6c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ef70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ef74:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ef78:	f107 030f 	add.w	r3, r7, #15
 800ef7c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ef80:	2301      	movs	r3, #1
 800ef82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ef86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ef8a:	2100      	movs	r1, #0
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f001 fc71 	bl	8010874 <hci_send_req>
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	da01      	bge.n	800ef9c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800ef98:	23ff      	movs	r3, #255	@ 0xff
 800ef9a:	e004      	b.n	800efa6 <aci_gap_set_discoverable+0x1ea>
  return status;
 800ef9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800efa0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800efa4:	781b      	ldrb	r3, [r3, #0]
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800efac:	46bd      	mov	sp, r7
 800efae:	bdb0      	pop	{r4, r5, r7, pc}

0800efb0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b0cc      	sub	sp, #304	@ 0x130
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	4602      	mov	r2, r0
 800efb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800efbc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800efc0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800efc2:	f107 0310 	add.w	r3, r7, #16
 800efc6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800efca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800efce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800efd2:	2200      	movs	r2, #0
 800efd4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800efd6:	2300      	movs	r3, #0
 800efd8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800efdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800efe0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800efe4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800efe8:	7812      	ldrb	r2, [r2, #0]
 800efea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800efec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eff0:	3301      	adds	r3, #1
 800eff2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eff6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800effa:	2218      	movs	r2, #24
 800effc:	2100      	movs	r1, #0
 800effe:	4618      	mov	r0, r3
 800f000:	f001 f880 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f004:	233f      	movs	r3, #63	@ 0x3f
 800f006:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800f00a:	2385      	movs	r3, #133	@ 0x85
 800f00c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f010:	f107 0310 	add.w	r3, r7, #16
 800f014:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f018:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f01c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f020:	f107 030f 	add.w	r3, r7, #15
 800f024:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f028:	2301      	movs	r3, #1
 800f02a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f02e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f032:	2100      	movs	r1, #0
 800f034:	4618      	mov	r0, r3
 800f036:	f001 fc1d 	bl	8010874 <hci_send_req>
 800f03a:	4603      	mov	r3, r0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	da01      	bge.n	800f044 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800f040:	23ff      	movs	r3, #255	@ 0xff
 800f042:	e004      	b.n	800f04e <aci_gap_set_io_capability+0x9e>
  return status;
 800f044:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f048:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f04c:	781b      	ldrb	r3, [r3, #0]
}
 800f04e:	4618      	mov	r0, r3
 800f050:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}

0800f058 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800f058:	b5b0      	push	{r4, r5, r7, lr}
 800f05a:	b0cc      	sub	sp, #304	@ 0x130
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	4605      	mov	r5, r0
 800f060:	460c      	mov	r4, r1
 800f062:	4610      	mov	r0, r2
 800f064:	4619      	mov	r1, r3
 800f066:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f06a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f06e:	462a      	mov	r2, r5
 800f070:	701a      	strb	r2, [r3, #0]
 800f072:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f076:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f07a:	4622      	mov	r2, r4
 800f07c:	701a      	strb	r2, [r3, #0]
 800f07e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f082:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800f086:	4602      	mov	r2, r0
 800f088:	701a      	strb	r2, [r3, #0]
 800f08a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f08e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f092:	460a      	mov	r2, r1
 800f094:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800f096:	f107 0310 	add.w	r3, r7, #16
 800f09a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f09e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f0a2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800f0b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f0b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f0b8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f0bc:	7812      	ldrb	r2, [r2, #0]
 800f0be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f0c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800f0ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f0ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f0d2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f0d6:	7812      	ldrb	r2, [r2, #0]
 800f0d8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f0da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f0de:	3301      	adds	r3, #1
 800f0e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800f0e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f0e8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f0ec:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800f0f0:	7812      	ldrb	r2, [r2, #0]
 800f0f2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f0f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800f0fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f102:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f106:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800f10a:	7812      	ldrb	r2, [r2, #0]
 800f10c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800f10e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f112:	3301      	adds	r3, #1
 800f114:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800f118:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f11c:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800f120:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800f122:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f126:	3301      	adds	r3, #1
 800f128:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800f12c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f130:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800f134:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800f136:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f13a:	3301      	adds	r3, #1
 800f13c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800f140:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f144:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800f148:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800f14a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f14e:	3301      	adds	r3, #1
 800f150:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800f154:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f158:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800f15c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800f160:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f164:	3304      	adds	r3, #4
 800f166:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800f16a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f16e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800f172:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800f174:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f178:	3301      	adds	r3, #1
 800f17a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f17e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f182:	2218      	movs	r2, #24
 800f184:	2100      	movs	r1, #0
 800f186:	4618      	mov	r0, r3
 800f188:	f000 ffbc 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f18c:	233f      	movs	r3, #63	@ 0x3f
 800f18e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800f192:	2386      	movs	r3, #134	@ 0x86
 800f194:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f198:	f107 0310 	add.w	r3, r7, #16
 800f19c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f1a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f1a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f1a8:	f107 030f 	add.w	r3, r7, #15
 800f1ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f1b0:	2301      	movs	r3, #1
 800f1b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f1b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f1ba:	2100      	movs	r1, #0
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f001 fb59 	bl	8010874 <hci_send_req>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	da01      	bge.n	800f1cc <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800f1c8:	23ff      	movs	r3, #255	@ 0xff
 800f1ca:	e004      	b.n	800f1d6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800f1cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f1d0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f1d4:	781b      	ldrb	r3, [r3, #0]
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bdb0      	pop	{r4, r5, r7, pc}

0800f1e0 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800f1e0:	b590      	push	{r4, r7, lr}
 800f1e2:	b0cd      	sub	sp, #308	@ 0x134
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	4608      	mov	r0, r1
 800f1ea:	4611      	mov	r1, r2
 800f1ec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f1f0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800f1f4:	6013      	str	r3, [r2, #0]
 800f1f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f1fa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f1fe:	4622      	mov	r2, r4
 800f200:	701a      	strb	r2, [r3, #0]
 800f202:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f206:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f20a:	4602      	mov	r2, r0
 800f20c:	701a      	strb	r2, [r3, #0]
 800f20e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f212:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800f216:	460a      	mov	r2, r1
 800f218:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800f21a:	f107 0310 	add.w	r3, r7, #16
 800f21e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f222:	f107 0308 	add.w	r3, r7, #8
 800f226:	2207      	movs	r2, #7
 800f228:	2100      	movs	r1, #0
 800f22a:	4618      	mov	r0, r3
 800f22c:	f000 ff6a 	bl	8010104 <Osal_MemSet>
  int index_input = 0;
 800f230:	2300      	movs	r3, #0
 800f232:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800f236:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f23a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f23e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f242:	7812      	ldrb	r2, [r2, #0]
 800f244:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f246:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f24a:	3301      	adds	r3, #1
 800f24c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800f250:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f254:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f258:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f25c:	7812      	ldrb	r2, [r2, #0]
 800f25e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f260:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f264:	3301      	adds	r3, #1
 800f266:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800f26a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f26e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f272:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800f276:	7812      	ldrb	r2, [r2, #0]
 800f278:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f27a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f27e:	3301      	adds	r3, #1
 800f280:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f284:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f288:	2218      	movs	r2, #24
 800f28a:	2100      	movs	r1, #0
 800f28c:	4618      	mov	r0, r3
 800f28e:	f000 ff39 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f292:	233f      	movs	r3, #63	@ 0x3f
 800f294:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800f298:	238a      	movs	r3, #138	@ 0x8a
 800f29a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f29e:	f107 0310 	add.w	r3, r7, #16
 800f2a2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f2a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f2aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800f2ae:	f107 0308 	add.w	r3, r7, #8
 800f2b2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800f2b6:	2307      	movs	r3, #7
 800f2b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f2bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f2c0:	2100      	movs	r1, #0
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f001 fad6 	bl	8010874 <hci_send_req>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	da01      	bge.n	800f2d2 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800f2ce:	23ff      	movs	r3, #255	@ 0xff
 800f2d0:	e02e      	b.n	800f330 <aci_gap_init+0x150>
  if ( resp.Status )
 800f2d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f2d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d005      	beq.n	800f2ec <aci_gap_init+0x10c>
    return resp.Status;
 800f2e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f2e4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	e021      	b.n	800f330 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800f2ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f2f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800f2f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f2f8:	b29a      	uxth	r2, r3
 800f2fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f2fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800f306:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f30a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800f30e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f312:	b29a      	uxth	r2, r3
 800f314:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800f318:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800f31a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f31e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800f322:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f326:	b29a      	uxth	r2, r3
 800f328:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800f32c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f32e:	2300      	movs	r3, #0
}
 800f330:	4618      	mov	r0, r3
 800f332:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800f336:	46bd      	mov	sp, r7
 800f338:	bd90      	pop	{r4, r7, pc}

0800f33a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b0cc      	sub	sp, #304	@ 0x130
 800f33e:	af00      	add	r7, sp, #0
 800f340:	4602      	mov	r2, r0
 800f342:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f346:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f34a:	6019      	str	r1, [r3, #0]
 800f34c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f350:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f354:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800f356:	f107 0310 	add.w	r3, r7, #16
 800f35a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f35e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f362:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f366:	2200      	movs	r2, #0
 800f368:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f36a:	2300      	movs	r3, #0
 800f36c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800f370:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f374:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f378:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f37c:	7812      	ldrb	r2, [r2, #0]
 800f37e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f380:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f384:	3301      	adds	r3, #1
 800f386:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800f38a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f38e:	1c58      	adds	r0, r3, #1
 800f390:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f394:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f398:	781a      	ldrb	r2, [r3, #0]
 800f39a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f39e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f3a2:	6819      	ldr	r1, [r3, #0]
 800f3a4:	f000 fe9e 	bl	80100e4 <Osal_MemCpy>
  index_input += AdvDataLen;
 800f3a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f3ac:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f3b6:	4413      	add	r3, r2
 800f3b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f3bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f3c0:	2218      	movs	r2, #24
 800f3c2:	2100      	movs	r1, #0
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f000 fe9d 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f3ca:	233f      	movs	r3, #63	@ 0x3f
 800f3cc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800f3d0:	238e      	movs	r3, #142	@ 0x8e
 800f3d2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f3d6:	f107 0310 	add.w	r3, r7, #16
 800f3da:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f3de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f3e2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f3e6:	f107 030f 	add.w	r3, r7, #15
 800f3ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f3f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f001 fa3a 	bl	8010874 <hci_send_req>
 800f400:	4603      	mov	r3, r0
 800f402:	2b00      	cmp	r3, #0
 800f404:	da01      	bge.n	800f40a <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800f406:	23ff      	movs	r3, #255	@ 0xff
 800f408:	e004      	b.n	800f414 <aci_gap_update_adv_data+0xda>
  return status;
 800f40a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f40e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f412:	781b      	ldrb	r3, [r3, #0]
}
 800f414:	4618      	mov	r0, r3
 800f416:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}

0800f41e <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800f41e:	b580      	push	{r7, lr}
 800f420:	b088      	sub	sp, #32
 800f422:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f424:	2300      	movs	r3, #0
 800f426:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f428:	f107 0308 	add.w	r3, r7, #8
 800f42c:	2218      	movs	r2, #24
 800f42e:	2100      	movs	r1, #0
 800f430:	4618      	mov	r0, r3
 800f432:	f000 fe67 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f436:	233f      	movs	r3, #63	@ 0x3f
 800f438:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800f43a:	2392      	movs	r3, #146	@ 0x92
 800f43c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f43e:	1dfb      	adds	r3, r7, #7
 800f440:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f442:	2301      	movs	r3, #1
 800f444:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f446:	f107 0308 	add.w	r3, r7, #8
 800f44a:	2100      	movs	r1, #0
 800f44c:	4618      	mov	r0, r3
 800f44e:	f001 fa11 	bl	8010874 <hci_send_req>
 800f452:	4603      	mov	r3, r0
 800f454:	2b00      	cmp	r3, #0
 800f456:	da01      	bge.n	800f45c <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800f458:	23ff      	movs	r3, #255	@ 0xff
 800f45a:	e000      	b.n	800f45e <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800f45c:	79fb      	ldrb	r3, [r7, #7]
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3720      	adds	r7, #32
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}

0800f466 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800f466:	b580      	push	{r7, lr}
 800f468:	b088      	sub	sp, #32
 800f46a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f46c:	2300      	movs	r3, #0
 800f46e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f470:	f107 0308 	add.w	r3, r7, #8
 800f474:	2218      	movs	r2, #24
 800f476:	2100      	movs	r1, #0
 800f478:	4618      	mov	r0, r3
 800f47a:	f000 fe43 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f47e:	233f      	movs	r3, #63	@ 0x3f
 800f480:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800f482:	f240 1301 	movw	r3, #257	@ 0x101
 800f486:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f488:	1dfb      	adds	r3, r7, #7
 800f48a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f48c:	2301      	movs	r3, #1
 800f48e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f490:	f107 0308 	add.w	r3, r7, #8
 800f494:	2100      	movs	r1, #0
 800f496:	4618      	mov	r0, r3
 800f498:	f001 f9ec 	bl	8010874 <hci_send_req>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	da01      	bge.n	800f4a6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800f4a2:	23ff      	movs	r3, #255	@ 0xff
 800f4a4:	e000      	b.n	800f4a8 <aci_gatt_init+0x42>
  return status;
 800f4a6:	79fb      	ldrb	r3, [r7, #7]
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3720      	adds	r7, #32
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}

0800f4b0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800f4b0:	b590      	push	{r4, r7, lr}
 800f4b2:	b0cf      	sub	sp, #316	@ 0x13c
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800f4bc:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800f4c0:	6001      	str	r1, [r0, #0]
 800f4c2:	4610      	mov	r0, r2
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f4ca:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f4ce:	4622      	mov	r2, r4
 800f4d0:	701a      	strb	r2, [r3, #0]
 800f4d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f4d6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800f4da:	4602      	mov	r2, r0
 800f4dc:	701a      	strb	r2, [r3, #0]
 800f4de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f4e2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f4e6:	460a      	mov	r2, r1
 800f4e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800f4ea:	f107 0310 	add.w	r3, r7, #16
 800f4ee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800f4f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f4f6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	d00a      	beq.n	800f516 <aci_gatt_add_service+0x66>
 800f500:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f504:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	2b02      	cmp	r3, #2
 800f50c:	d101      	bne.n	800f512 <aci_gatt_add_service+0x62>
 800f50e:	2311      	movs	r3, #17
 800f510:	e002      	b.n	800f518 <aci_gatt_add_service+0x68>
 800f512:	2301      	movs	r3, #1
 800f514:	e000      	b.n	800f518 <aci_gatt_add_service+0x68>
 800f516:	2303      	movs	r3, #3
 800f518:	f107 0210 	add.w	r2, r7, #16
 800f51c:	4413      	add	r3, r2
 800f51e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f522:	f107 030c 	add.w	r3, r7, #12
 800f526:	2203      	movs	r2, #3
 800f528:	2100      	movs	r1, #0
 800f52a:	4618      	mov	r0, r3
 800f52c:	f000 fdea 	bl	8010104 <Osal_MemSet>
  int index_input = 0;
 800f530:	2300      	movs	r3, #0
 800f532:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800f536:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f53a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f53e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800f542:	7812      	ldrb	r2, [r2, #0]
 800f544:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f546:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f54a:	3301      	adds	r3, #1
 800f54c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800f550:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f554:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d002      	beq.n	800f564 <aci_gatt_add_service+0xb4>
 800f55e:	2b02      	cmp	r3, #2
 800f560:	d004      	beq.n	800f56c <aci_gatt_add_service+0xbc>
 800f562:	e007      	b.n	800f574 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800f564:	2302      	movs	r3, #2
 800f566:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800f56a:	e005      	b.n	800f578 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800f56c:	2310      	movs	r3, #16
 800f56e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800f572:	e001      	b.n	800f578 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800f574:	2397      	movs	r3, #151	@ 0x97
 800f576:	e06c      	b.n	800f652 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800f578:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f57c:	1c58      	adds	r0, r3, #1
 800f57e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800f582:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f586:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f58a:	6819      	ldr	r1, [r3, #0]
 800f58c:	f000 fdaa 	bl	80100e4 <Osal_MemCpy>
    index_input += size;
 800f590:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800f594:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f598:	4413      	add	r3, r2
 800f59a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800f59e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f5a2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f5a6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800f5aa:	7812      	ldrb	r2, [r2, #0]
 800f5ac:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800f5ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800f5b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f5bc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f5c0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800f5c4:	7812      	ldrb	r2, [r2, #0]
 800f5c6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800f5c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f5d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f5d6:	2218      	movs	r2, #24
 800f5d8:	2100      	movs	r1, #0
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f000 fd92 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f5e0:	233f      	movs	r3, #63	@ 0x3f
 800f5e2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800f5e6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800f5ea:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f5ee:	f107 0310 	add.w	r3, r7, #16
 800f5f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f5f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f5fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800f5fe:	f107 030c 	add.w	r3, r7, #12
 800f602:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800f606:	2303      	movs	r3, #3
 800f608:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f60c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f610:	2100      	movs	r1, #0
 800f612:	4618      	mov	r0, r3
 800f614:	f001 f92e 	bl	8010874 <hci_send_req>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	da01      	bge.n	800f622 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800f61e:	23ff      	movs	r3, #255	@ 0xff
 800f620:	e017      	b.n	800f652 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800f622:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f626:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d005      	beq.n	800f63c <aci_gatt_add_service+0x18c>
    return resp.Status;
 800f630:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f634:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	e00a      	b.n	800f652 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800f63c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f640:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f644:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f648:	b29a      	uxth	r2, r3
 800f64a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800f64e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f650:	2300      	movs	r3, #0
}
 800f652:	4618      	mov	r0, r3
 800f654:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd90      	pop	{r4, r7, pc}

0800f65c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800f65c:	b590      	push	{r4, r7, lr}
 800f65e:	b0d1      	sub	sp, #324	@ 0x144
 800f660:	af00      	add	r7, sp, #0
 800f662:	4604      	mov	r4, r0
 800f664:	4608      	mov	r0, r1
 800f666:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800f66a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800f66e:	600a      	str	r2, [r1, #0]
 800f670:	4619      	mov	r1, r3
 800f672:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f676:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800f67a:	4622      	mov	r2, r4
 800f67c:	801a      	strh	r2, [r3, #0]
 800f67e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f682:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f686:	4602      	mov	r2, r0
 800f688:	701a      	strb	r2, [r3, #0]
 800f68a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f68e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800f692:	460a      	mov	r2, r1
 800f694:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800f696:	f107 0318 	add.w	r3, r7, #24
 800f69a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800f69e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f6a2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	d00a      	beq.n	800f6c2 <aci_gatt_add_char+0x66>
 800f6ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f6b0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	2b02      	cmp	r3, #2
 800f6b8:	d101      	bne.n	800f6be <aci_gatt_add_char+0x62>
 800f6ba:	2313      	movs	r3, #19
 800f6bc:	e002      	b.n	800f6c4 <aci_gatt_add_char+0x68>
 800f6be:	2303      	movs	r3, #3
 800f6c0:	e000      	b.n	800f6c4 <aci_gatt_add_char+0x68>
 800f6c2:	2305      	movs	r3, #5
 800f6c4:	f107 0218 	add.w	r2, r7, #24
 800f6c8:	4413      	add	r3, r2
 800f6ca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f6ce:	f107 0314 	add.w	r3, r7, #20
 800f6d2:	2203      	movs	r2, #3
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f000 fd14 	bl	8010104 <Osal_MemSet>
  int index_input = 0;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800f6e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800f6e6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f6ea:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800f6ee:	8812      	ldrh	r2, [r2, #0]
 800f6f0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f6f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f6f6:	3302      	adds	r3, #2
 800f6f8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800f6fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800f700:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f704:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800f708:	7812      	ldrb	r2, [r2, #0]
 800f70a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f70c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f710:	3301      	adds	r3, #1
 800f712:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800f716:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f71a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	2b01      	cmp	r3, #1
 800f722:	d002      	beq.n	800f72a <aci_gatt_add_char+0xce>
 800f724:	2b02      	cmp	r3, #2
 800f726:	d004      	beq.n	800f732 <aci_gatt_add_char+0xd6>
 800f728:	e007      	b.n	800f73a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800f72a:	2302      	movs	r3, #2
 800f72c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800f730:	e005      	b.n	800f73e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800f732:	2310      	movs	r3, #16
 800f734:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800f738:	e001      	b.n	800f73e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800f73a:	2397      	movs	r3, #151	@ 0x97
 800f73c:	e091      	b.n	800f862 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800f73e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800f742:	1cd8      	adds	r0, r3, #3
 800f744:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800f748:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f74c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f750:	6819      	ldr	r1, [r3, #0]
 800f752:	f000 fcc7 	bl	80100e4 <Osal_MemCpy>
    index_input += size;
 800f756:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800f75a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800f75e:	4413      	add	r3, r2
 800f760:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800f764:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f768:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f76c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800f770:	8812      	ldrh	r2, [r2, #0]
 800f772:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800f774:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f778:	3302      	adds	r3, #2
 800f77a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800f77e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f782:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800f786:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800f788:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f78c:	3301      	adds	r3, #1
 800f78e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800f792:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f796:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800f79a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800f79c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800f7a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f7aa:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800f7ae:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800f7b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800f7ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f7be:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800f7c2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800f7c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800f7ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f7d2:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800f7d6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800f7d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f7dc:	3301      	adds	r3, #1
 800f7de:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f7e2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f7e6:	2218      	movs	r2, #24
 800f7e8:	2100      	movs	r1, #0
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f000 fc8a 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f7f0:	233f      	movs	r3, #63	@ 0x3f
 800f7f2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800f7f6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800f7fa:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800f7fe:	f107 0318 	add.w	r3, r7, #24
 800f802:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800f806:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f80a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800f80e:	f107 0314 	add.w	r3, r7, #20
 800f812:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800f816:	2303      	movs	r3, #3
 800f818:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f81c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f820:	2100      	movs	r1, #0
 800f822:	4618      	mov	r0, r3
 800f824:	f001 f826 	bl	8010874 <hci_send_req>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	da01      	bge.n	800f832 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800f82e:	23ff      	movs	r3, #255	@ 0xff
 800f830:	e017      	b.n	800f862 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800f832:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f836:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d005      	beq.n	800f84c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800f840:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f844:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	e00a      	b.n	800f862 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800f84c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f850:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f854:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f858:	b29a      	uxth	r2, r3
 800f85a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800f85e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd90      	pop	{r4, r7, pc}

0800f86c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800f86c:	b5b0      	push	{r4, r5, r7, lr}
 800f86e:	b0cc      	sub	sp, #304	@ 0x130
 800f870:	af00      	add	r7, sp, #0
 800f872:	4605      	mov	r5, r0
 800f874:	460c      	mov	r4, r1
 800f876:	4610      	mov	r0, r2
 800f878:	4619      	mov	r1, r3
 800f87a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f87e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f882:	462a      	mov	r2, r5
 800f884:	801a      	strh	r2, [r3, #0]
 800f886:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f88a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f88e:	4622      	mov	r2, r4
 800f890:	801a      	strh	r2, [r3, #0]
 800f892:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f896:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800f89a:	4602      	mov	r2, r0
 800f89c:	701a      	strb	r2, [r3, #0]
 800f89e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f8a2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f8a6:	460a      	mov	r2, r1
 800f8a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800f8aa:	f107 0310 	add.w	r3, r7, #16
 800f8ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f8b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f8b6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800f8c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f8c8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f8cc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f8d0:	8812      	ldrh	r2, [r2, #0]
 800f8d2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f8d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f8d8:	3302      	adds	r3, #2
 800f8da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800f8de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f8e2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f8e6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800f8ea:	8812      	ldrh	r2, [r2, #0]
 800f8ec:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800f8ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f8f2:	3302      	adds	r3, #2
 800f8f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800f8f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f8fc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f900:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800f904:	7812      	ldrb	r2, [r2, #0]
 800f906:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800f908:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f90c:	3301      	adds	r3, #1
 800f90e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800f912:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f916:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f91a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800f91e:	7812      	ldrb	r2, [r2, #0]
 800f920:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800f922:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f926:	3301      	adds	r3, #1
 800f928:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800f92c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f930:	1d98      	adds	r0, r3, #6
 800f932:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f936:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	461a      	mov	r2, r3
 800f93e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800f942:	f000 fbcf 	bl	80100e4 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800f946:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f94a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f954:	4413      	add	r3, r2
 800f956:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f95a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f95e:	2218      	movs	r2, #24
 800f960:	2100      	movs	r1, #0
 800f962:	4618      	mov	r0, r3
 800f964:	f000 fbce 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f968:	233f      	movs	r3, #63	@ 0x3f
 800f96a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800f96e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800f972:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f976:	f107 0310 	add.w	r3, r7, #16
 800f97a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f97e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f982:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f986:	f107 030f 	add.w	r3, r7, #15
 800f98a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f98e:	2301      	movs	r3, #1
 800f990:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f994:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f998:	2100      	movs	r1, #0
 800f99a:	4618      	mov	r0, r3
 800f99c:	f000 ff6a 	bl	8010874 <hci_send_req>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	da01      	bge.n	800f9aa <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800f9a6:	23ff      	movs	r3, #255	@ 0xff
 800f9a8:	e004      	b.n	800f9b4 <aci_gatt_update_char_value+0x148>
  return status;
 800f9aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f9ae:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f9b2:	781b      	ldrb	r3, [r3, #0]
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bdb0      	pop	{r4, r5, r7, pc}

0800f9be <aci_gatt_exchange_config>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_exchange_config( uint16_t Connection_Handle )
{
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b0cc      	sub	sp, #304	@ 0x130
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f9ca:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f9ce:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 800f9d0:	f107 0310 	add.w	r3, r7, #16
 800f9d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f9d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f9dc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800f9ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f9ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f9f2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f9f6:	8812      	ldrh	r2, [r2, #0]
 800f9f8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f9fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f9fe:	3302      	adds	r3, #2
 800fa00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fa04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fa08:	2218      	movs	r2, #24
 800fa0a:	2100      	movs	r1, #0
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f000 fb79 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fa12:	233f      	movs	r3, #63	@ 0x3f
 800fa14:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x10b;
 800fa18:	f240 130b 	movw	r3, #267	@ 0x10b
 800fa1c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 800fa20:	230f      	movs	r3, #15
 800fa22:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 800fa26:	f107 0310 	add.w	r3, r7, #16
 800fa2a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fa2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa32:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fa36:	f107 030f 	add.w	r3, r7, #15
 800fa3a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fa3e:	2301      	movs	r3, #1
 800fa40:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fa44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fa48:	2100      	movs	r1, #0
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f000 ff12 	bl	8010874 <hci_send_req>
 800fa50:	4603      	mov	r3, r0
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	da01      	bge.n	800fa5a <aci_gatt_exchange_config+0x9c>
    return BLE_STATUS_TIMEOUT;
 800fa56:	23ff      	movs	r3, #255	@ 0xff
 800fa58:	e004      	b.n	800fa64 <aci_gatt_exchange_config+0xa6>
  return status;
 800fa5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa5e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fa62:	781b      	ldrb	r3, [r3, #0]
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}

0800fa6e <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800fa6e:	b580      	push	{r7, lr}
 800fa70:	b0cc      	sub	sp, #304	@ 0x130
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	4602      	mov	r2, r0
 800fa76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa7a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fa7e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800fa80:	f107 0310 	add.w	r3, r7, #16
 800fa84:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fa88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa8c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fa90:	2200      	movs	r2, #0
 800fa92:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fa94:	2300      	movs	r3, #0
 800fa96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800fa9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fa9e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800faa2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800faa6:	8812      	ldrh	r2, [r2, #0]
 800faa8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800faaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800faae:	3302      	adds	r3, #2
 800fab0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fab4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fab8:	2218      	movs	r2, #24
 800faba:	2100      	movs	r1, #0
 800fabc:	4618      	mov	r0, r3
 800fabe:	f000 fb21 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fac2:	233f      	movs	r3, #63	@ 0x3f
 800fac4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800fac8:	f240 1325 	movw	r3, #293	@ 0x125
 800facc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fad0:	f107 0310 	add.w	r3, r7, #16
 800fad4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fad8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fadc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fae0:	f107 030f 	add.w	r3, r7, #15
 800fae4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fae8:	2301      	movs	r3, #1
 800faea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800faee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800faf2:	2100      	movs	r1, #0
 800faf4:	4618      	mov	r0, r3
 800faf6:	f000 febd 	bl	8010874 <hci_send_req>
 800fafa:	4603      	mov	r3, r0
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	da01      	bge.n	800fb04 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800fb00:	23ff      	movs	r3, #255	@ 0xff
 800fb02:	e004      	b.n	800fb0e <aci_gatt_confirm_indication+0xa0>
  return status;
 800fb04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb08:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fb0c:	781b      	ldrb	r3, [r3, #0]
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b0cc      	sub	sp, #304	@ 0x130
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb22:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800fb26:	601a      	str	r2, [r3, #0]
 800fb28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb2c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fb30:	4602      	mov	r2, r0
 800fb32:	701a      	strb	r2, [r3, #0]
 800fb34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb38:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fb3c:	460a      	mov	r2, r1
 800fb3e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800fb40:	f107 0310 	add.w	r3, r7, #16
 800fb44:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fb48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb4c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fb50:	2200      	movs	r2, #0
 800fb52:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fb54:	2300      	movs	r3, #0
 800fb56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800fb5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb5e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fb62:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fb66:	7812      	ldrb	r2, [r2, #0]
 800fb68:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fb6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb6e:	3301      	adds	r3, #1
 800fb70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800fb74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fb7c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fb80:	7812      	ldrb	r2, [r2, #0]
 800fb82:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fb84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb88:	3301      	adds	r3, #1
 800fb8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800fb8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb92:	1c98      	adds	r0, r3, #2
 800fb94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb98:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fb9c:	781a      	ldrb	r2, [r3, #0]
 800fb9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fba2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800fba6:	6819      	ldr	r1, [r3, #0]
 800fba8:	f000 fa9c 	bl	80100e4 <Osal_MemCpy>
  index_input += Length;
 800fbac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fbb0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800fbba:	4413      	add	r3, r2
 800fbbc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fbc0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fbc4:	2218      	movs	r2, #24
 800fbc6:	2100      	movs	r1, #0
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f000 fa9b 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fbce:	233f      	movs	r3, #63	@ 0x3f
 800fbd0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800fbd4:	230c      	movs	r3, #12
 800fbd6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fbda:	f107 0310 	add.w	r3, r7, #16
 800fbde:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fbe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fbe6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fbea:	f107 030f 	add.w	r3, r7, #15
 800fbee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fbf8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fbfc:	2100      	movs	r1, #0
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f000 fe38 	bl	8010874 <hci_send_req>
 800fc04:	4603      	mov	r3, r0
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	da01      	bge.n	800fc0e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800fc0a:	23ff      	movs	r3, #255	@ 0xff
 800fc0c:	e004      	b.n	800fc18 <aci_hal_write_config_data+0x100>
  return status;
 800fc0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc12:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fc16:	781b      	ldrb	r3, [r3, #0]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}

0800fc22 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800fc22:	b580      	push	{r7, lr}
 800fc24:	b0cc      	sub	sp, #304	@ 0x130
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	4602      	mov	r2, r0
 800fc2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc2e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fc32:	701a      	strb	r2, [r3, #0]
 800fc34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc38:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fc3c:	460a      	mov	r2, r1
 800fc3e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800fc40:	f107 0310 	add.w	r3, r7, #16
 800fc44:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fc48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc4c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fc50:	2200      	movs	r2, #0
 800fc52:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fc54:	2300      	movs	r3, #0
 800fc56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800fc5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fc5e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fc62:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fc66:	7812      	ldrb	r2, [r2, #0]
 800fc68:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fc6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc6e:	3301      	adds	r3, #1
 800fc70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800fc74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fc78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fc7c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fc80:	7812      	ldrb	r2, [r2, #0]
 800fc82:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fc84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc88:	3301      	adds	r3, #1
 800fc8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fc8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fc92:	2218      	movs	r2, #24
 800fc94:	2100      	movs	r1, #0
 800fc96:	4618      	mov	r0, r3
 800fc98:	f000 fa34 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fc9c:	233f      	movs	r3, #63	@ 0x3f
 800fc9e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800fca2:	230f      	movs	r3, #15
 800fca4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fca8:	f107 0310 	add.w	r3, r7, #16
 800fcac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fcb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fcb4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fcb8:	f107 030f 	add.w	r3, r7, #15
 800fcbc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fcc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fcca:	2100      	movs	r1, #0
 800fccc:	4618      	mov	r0, r3
 800fcce:	f000 fdd1 	bl	8010874 <hci_send_req>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	da01      	bge.n	800fcdc <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800fcd8:	23ff      	movs	r3, #255	@ 0xff
 800fcda:	e004      	b.n	800fce6 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800fcdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fce0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fce4:	781b      	ldrb	r3, [r3, #0]
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b0cc      	sub	sp, #304	@ 0x130
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fcfc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fd00:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800fd02:	f107 0310 	add.w	r3, r7, #16
 800fd06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fd0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fd0e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fd12:	2200      	movs	r2, #0
 800fd14:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fd16:	2300      	movs	r3, #0
 800fd18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800fd1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fd20:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fd24:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fd28:	8812      	ldrh	r2, [r2, #0]
 800fd2a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800fd2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd30:	3302      	adds	r3, #2
 800fd32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fd36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fd3a:	2218      	movs	r2, #24
 800fd3c:	2100      	movs	r1, #0
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f000 f9e0 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fd44:	233f      	movs	r3, #63	@ 0x3f
 800fd46:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800fd4a:	2318      	movs	r3, #24
 800fd4c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fd50:	f107 0310 	add.w	r3, r7, #16
 800fd54:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fd58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd5c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fd60:	f107 030f 	add.w	r3, r7, #15
 800fd64:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fd68:	2301      	movs	r3, #1
 800fd6a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fd6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fd72:	2100      	movs	r1, #0
 800fd74:	4618      	mov	r0, r3
 800fd76:	f000 fd7d 	bl	8010874 <hci_send_req>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	da01      	bge.n	800fd84 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800fd80:	23ff      	movs	r3, #255	@ 0xff
 800fd82:	e004      	b.n	800fd8e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800fd84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fd88:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fd8c:	781b      	ldrb	r3, [r3, #0]
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b088      	sub	sp, #32
 800fd9c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fda2:	f107 0308 	add.w	r3, r7, #8
 800fda6:	2218      	movs	r2, #24
 800fda8:	2100      	movs	r1, #0
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f000 f9aa 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x03;
 800fdb0:	2303      	movs	r3, #3
 800fdb2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800fdb4:	2303      	movs	r3, #3
 800fdb6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800fdb8:	1dfb      	adds	r3, r7, #7
 800fdba:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fdc0:	f107 0308 	add.w	r3, r7, #8
 800fdc4:	2100      	movs	r1, #0
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f000 fd54 	bl	8010874 <hci_send_req>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	da01      	bge.n	800fdd6 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800fdd2:	23ff      	movs	r3, #255	@ 0xff
 800fdd4:	e000      	b.n	800fdd8 <hci_reset+0x40>
  return status;
 800fdd6:	79fb      	ldrb	r3, [r7, #7]
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3720      	adds	r7, #32
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <hci_le_set_data_length>:
}

tBleStatus hci_le_set_data_length( uint16_t Connection_Handle,
                                   uint16_t TxOctets,
                                   uint16_t TxTime )
{
 800fde0:	b590      	push	{r4, r7, lr}
 800fde2:	b0cd      	sub	sp, #308	@ 0x134
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	4604      	mov	r4, r0
 800fde8:	4608      	mov	r0, r1
 800fdea:	4611      	mov	r1, r2
 800fdec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fdf0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fdf4:	4622      	mov	r2, r4
 800fdf6:	801a      	strh	r2, [r3, #0]
 800fdf8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fdfc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fe00:	4602      	mov	r2, r0
 800fe02:	801a      	strh	r2, [r3, #0]
 800fe04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fe08:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800fe0c:	460a      	mov	r2, r1
 800fe0e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_data_length_cp0 *cp0 = (hci_le_set_data_length_cp0*)(cmd_buffer);
 800fe10:	f107 0310 	add.w	r3, r7, #16
 800fe14:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  hci_le_set_data_length_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800fe18:	f107 030c 	add.w	r3, r7, #12
 800fe1c:	2203      	movs	r2, #3
 800fe1e:	2100      	movs	r1, #0
 800fe20:	4618      	mov	r0, r3
 800fe22:	f000 f96f 	bl	8010104 <Osal_MemSet>
  int index_input = 0;
 800fe26:	2300      	movs	r3, #0
 800fe28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800fe2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fe30:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fe34:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fe38:	8812      	ldrh	r2, [r2, #0]
 800fe3a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800fe3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe40:	3302      	adds	r3, #2
 800fe42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TxOctets = TxOctets;
 800fe46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fe4a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fe4e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800fe52:	8812      	ldrh	r2, [r2, #0]
 800fe54:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800fe56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe5a:	3302      	adds	r3, #2
 800fe5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TxTime = TxTime;
 800fe60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fe64:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fe68:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800fe6c:	8812      	ldrh	r2, [r2, #0]
 800fe6e:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800fe70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe74:	3302      	adds	r3, #2
 800fe76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fe7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fe7e:	2218      	movs	r2, #24
 800fe80:	2100      	movs	r1, #0
 800fe82:	4618      	mov	r0, r3
 800fe84:	f000 f93e 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x08;
 800fe88:	2308      	movs	r3, #8
 800fe8a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x022;
 800fe8e:	2322      	movs	r3, #34	@ 0x22
 800fe90:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fe94:	f107 0310 	add.w	r3, r7, #16
 800fe98:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fe9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fea0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800fea4:	f107 030c 	add.w	r3, r7, #12
 800fea8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800feac:	2303      	movs	r3, #3
 800feae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800feb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800feb6:	2100      	movs	r1, #0
 800feb8:	4618      	mov	r0, r3
 800feba:	f000 fcdb 	bl	8010874 <hci_send_req>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	da01      	bge.n	800fec8 <hci_le_set_data_length+0xe8>
    return BLE_STATUS_TIMEOUT;
 800fec4:	23ff      	movs	r3, #255	@ 0xff
 800fec6:	e00d      	b.n	800fee4 <hci_le_set_data_length+0x104>
  if ( resp.Status )
 800fec8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fecc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d005      	beq.n	800fee2 <hci_le_set_data_length+0x102>
    return resp.Status;
 800fed6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800feda:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	e000      	b.n	800fee4 <hci_le_set_data_length+0x104>
  return BLE_STATUS_SUCCESS;
 800fee2:	2300      	movs	r3, #0
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800feea:	46bd      	mov	sp, r7
 800feec:	bd90      	pop	{r4, r7, pc}

0800feee <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800feee:	b580      	push	{r7, lr}
 800fef0:	b0ce      	sub	sp, #312	@ 0x138
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fef8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800fefc:	6019      	str	r1, [r3, #0]
 800fefe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ff02:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ff06:	601a      	str	r2, [r3, #0]
 800ff08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ff0c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ff10:	4602      	mov	r2, r0
 800ff12:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800ff14:	f107 0318 	add.w	r3, r7, #24
 800ff18:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ff1c:	f107 0310 	add.w	r3, r7, #16
 800ff20:	2205      	movs	r2, #5
 800ff22:	2100      	movs	r1, #0
 800ff24:	4618      	mov	r0, r3
 800ff26:	f000 f8ed 	bl	8010104 <Osal_MemSet>
  int index_input = 0;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 800ff30:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ff34:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ff38:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ff3c:	8812      	ldrh	r2, [r2, #0]
 800ff3e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ff40:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ff44:	3302      	adds	r3, #2
 800ff46:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ff4a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800ff4e:	2218      	movs	r2, #24
 800ff50:	2100      	movs	r1, #0
 800ff52:	4618      	mov	r0, r3
 800ff54:	f000 f8d6 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x08;
 800ff58:	2308      	movs	r3, #8
 800ff5a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 800ff5e:	2330      	movs	r3, #48	@ 0x30
 800ff60:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800ff64:	f107 0318 	add.w	r3, r7, #24
 800ff68:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800ff6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ff70:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800ff74:	f107 0310 	add.w	r3, r7, #16
 800ff78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800ff7c:	2305      	movs	r3, #5
 800ff7e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ff82:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800ff86:	2100      	movs	r1, #0
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f000 fc73 	bl	8010874 <hci_send_req>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	da01      	bge.n	800ff98 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800ff94:	23ff      	movs	r3, #255	@ 0xff
 800ff96:	e023      	b.n	800ffe0 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800ff98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ff9c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d005      	beq.n	800ffb2 <hci_le_read_phy+0xc4>
    return resp.Status;
 800ffa6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ffaa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	e016      	b.n	800ffe0 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800ffb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ffb6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ffba:	78da      	ldrb	r2, [r3, #3]
 800ffbc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ffc0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800ffc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ffcc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ffd0:	791a      	ldrb	r2, [r3, #4]
 800ffd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ffd6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ffde:	2300      	movs	r3, #0
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}

0800ffea <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800ffea:	b590      	push	{r4, r7, lr}
 800ffec:	b0cd      	sub	sp, #308	@ 0x134
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	4604      	mov	r4, r0
 800fff2:	4608      	mov	r0, r1
 800fff4:	4611      	mov	r1, r2
 800fff6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fffa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fffe:	4622      	mov	r2, r4
 8010000:	701a      	strb	r2, [r3, #0]
 8010002:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010006:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801000a:	4602      	mov	r2, r0
 801000c:	701a      	strb	r2, [r3, #0]
 801000e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010012:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8010016:	460a      	mov	r2, r1
 8010018:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 801001a:	f107 0310 	add.w	r3, r7, #16
 801001e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010022:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010026:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801002a:	2200      	movs	r2, #0
 801002c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801002e:	2300      	movs	r3, #0
 8010030:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8010034:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010038:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801003c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8010040:	7812      	ldrb	r2, [r2, #0]
 8010042:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010044:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010048:	3301      	adds	r3, #1
 801004a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 801004e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010052:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010056:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801005a:	7812      	ldrb	r2, [r2, #0]
 801005c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801005e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010062:	3301      	adds	r3, #1
 8010064:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8010068:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801006c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010070:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8010074:	7812      	ldrb	r2, [r2, #0]
 8010076:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010078:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801007c:	3301      	adds	r3, #1
 801007e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010082:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010086:	2218      	movs	r2, #24
 8010088:	2100      	movs	r1, #0
 801008a:	4618      	mov	r0, r3
 801008c:	f000 f83a 	bl	8010104 <Osal_MemSet>
  rq.ogf = 0x08;
 8010090:	2308      	movs	r3, #8
 8010092:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8010096:	2331      	movs	r3, #49	@ 0x31
 8010098:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801009c:	f107 0310 	add.w	r3, r7, #16
 80100a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80100a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80100a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80100ac:	f107 030f 	add.w	r3, r7, #15
 80100b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80100b4:	2301      	movs	r3, #1
 80100b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80100ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80100be:	2100      	movs	r1, #0
 80100c0:	4618      	mov	r0, r3
 80100c2:	f000 fbd7 	bl	8010874 <hci_send_req>
 80100c6:	4603      	mov	r3, r0
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	da01      	bge.n	80100d0 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80100cc:	23ff      	movs	r3, #255	@ 0xff
 80100ce:	e004      	b.n	80100da <hci_le_set_default_phy+0xf0>
  return status;
 80100d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80100d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80100d8:	781b      	ldrb	r3, [r3, #0]
}
 80100da:	4618      	mov	r0, r3
 80100dc:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd90      	pop	{r4, r7, pc}

080100e4 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	60f8      	str	r0, [r7, #12]
 80100ec:	60b9      	str	r1, [r7, #8]
 80100ee:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	68b9      	ldr	r1, [r7, #8]
 80100f4:	68f8      	ldr	r0, [r7, #12]
 80100f6:	f004 fb6e 	bl	80147d6 <memcpy>
 80100fa:	4603      	mov	r3, r0
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3710      	adds	r7, #16
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8010110:	687a      	ldr	r2, [r7, #4]
 8010112:	68b9      	ldr	r1, [r7, #8]
 8010114:	68f8      	ldr	r0, [r7, #12]
 8010116:	f004 facd 	bl	80146b4 <memset>
 801011a:	4603      	mov	r3, r0
}
 801011c:	4618      	mov	r0, r3
 801011e:	3710      	adds	r7, #16
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}

08010124 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b08a      	sub	sp, #40	@ 0x28
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 801012c:	2300      	movs	r3, #0
 801012e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	3301      	adds	r3, #1
 8010136:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8010138:	6a3b      	ldr	r3, [r7, #32]
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	2bff      	cmp	r3, #255	@ 0xff
 801013e:	d14c      	bne.n	80101da <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8010140:	6a3b      	ldr	r3, [r7, #32]
 8010142:	3302      	adds	r3, #2
 8010144:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8010146:	69fb      	ldr	r3, [r7, #28]
 8010148:	881b      	ldrh	r3, [r3, #0]
 801014a:	b29b      	uxth	r3, r3
 801014c:	461a      	mov	r2, r3
 801014e:	f640 4301 	movw	r3, #3073	@ 0xc01
 8010152:	429a      	cmp	r2, r3
 8010154:	d13d      	bne.n	80101d2 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8010156:	69fb      	ldr	r3, [r7, #28]
 8010158:	3302      	adds	r3, #2
 801015a:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 801015c:	69bb      	ldr	r3, [r7, #24]
 801015e:	885b      	ldrh	r3, [r3, #2]
 8010160:	b29b      	uxth	r3, r3
 8010162:	461a      	mov	r2, r3
 8010164:	4b20      	ldr	r3, [pc, #128]	@ (80101e8 <PeerToPeer_Event_Handler+0xc4>)
 8010166:	889b      	ldrh	r3, [r3, #4]
 8010168:	3302      	adds	r3, #2
 801016a:	429a      	cmp	r2, r3
 801016c:	d118      	bne.n	80101a0 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 801016e:	2301      	movs	r3, #1
 8010170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8010174:	69bb      	ldr	r3, [r7, #24]
 8010176:	7a1b      	ldrb	r3, [r3, #8]
 8010178:	f003 0301 	and.w	r3, r3, #1
 801017c:	2b00      	cmp	r3, #0
 801017e:	d007      	beq.n	8010190 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8010180:	2300      	movs	r3, #0
 8010182:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8010184:	f107 0308 	add.w	r3, r7, #8
 8010188:	4618      	mov	r0, r3
 801018a:	f002 fddf 	bl	8012d4c <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 801018e:	e022      	b.n	80101d6 <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8010190:	2301      	movs	r3, #1
 8010192:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8010194:	f107 0308 	add.w	r3, r7, #8
 8010198:	4618      	mov	r0, r3
 801019a:	f002 fdd7 	bl	8012d4c <P2PS_STM_App_Notification>
        break;
 801019e:	e01a      	b.n	80101d6 <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 80101a0:	69bb      	ldr	r3, [r7, #24]
 80101a2:	885b      	ldrh	r3, [r3, #2]
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	461a      	mov	r2, r3
 80101a8:	4b0f      	ldr	r3, [pc, #60]	@ (80101e8 <PeerToPeer_Event_Handler+0xc4>)
 80101aa:	885b      	ldrh	r3, [r3, #2]
 80101ac:	3301      	adds	r3, #1
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d111      	bne.n	80101d6 <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 80101b2:	2303      	movs	r3, #3
 80101b4:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	88db      	ldrh	r3, [r3, #6]
 80101ba:	b29b      	uxth	r3, r3
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80101c0:	69bb      	ldr	r3, [r7, #24]
 80101c2:	3308      	adds	r3, #8
 80101c4:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 80101c6:	f107 0308 	add.w	r3, r7, #8
 80101ca:	4618      	mov	r0, r3
 80101cc:	f002 fdbe 	bl	8012d4c <P2PS_STM_App_Notification>
        break;
 80101d0:	e001      	b.n	80101d6 <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 80101d2:	bf00      	nop
 80101d4:	e002      	b.n	80101dc <PeerToPeer_Event_Handler+0xb8>
        break;
 80101d6:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80101d8:	e000      	b.n	80101dc <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 80101da:	bf00      	nop
  }

  return(return_value);
 80101dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end SVCCTL_EvtAckStatus_t */
 80101e0:	4618      	mov	r0, r3
 80101e2:	3728      	adds	r7, #40	@ 0x28
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	2000017c 	.word	0x2000017c

080101ec <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b08a      	sub	sp, #40	@ 0x28
 80101f0:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80101f2:	484a      	ldr	r0, [pc, #296]	@ (801031c <P2PS_STM_Init+0x130>)
 80101f4:	f000 f974 	bl	80104e0 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80101f8:	238f      	movs	r3, #143	@ 0x8f
 80101fa:	703b      	strb	r3, [r7, #0]
 80101fc:	23e5      	movs	r3, #229	@ 0xe5
 80101fe:	707b      	strb	r3, [r7, #1]
 8010200:	23b3      	movs	r3, #179	@ 0xb3
 8010202:	70bb      	strb	r3, [r7, #2]
 8010204:	23d5      	movs	r3, #213	@ 0xd5
 8010206:	70fb      	strb	r3, [r7, #3]
 8010208:	232e      	movs	r3, #46	@ 0x2e
 801020a:	713b      	strb	r3, [r7, #4]
 801020c:	237f      	movs	r3, #127	@ 0x7f
 801020e:	717b      	strb	r3, [r7, #5]
 8010210:	234a      	movs	r3, #74	@ 0x4a
 8010212:	71bb      	strb	r3, [r7, #6]
 8010214:	2398      	movs	r3, #152	@ 0x98
 8010216:	71fb      	strb	r3, [r7, #7]
 8010218:	232a      	movs	r3, #42	@ 0x2a
 801021a:	723b      	strb	r3, [r7, #8]
 801021c:	2348      	movs	r3, #72	@ 0x48
 801021e:	727b      	strb	r3, [r7, #9]
 8010220:	237a      	movs	r3, #122	@ 0x7a
 8010222:	72bb      	strb	r3, [r7, #10]
 8010224:	23cc      	movs	r3, #204	@ 0xcc
 8010226:	72fb      	strb	r3, [r7, #11]
 8010228:	2340      	movs	r3, #64	@ 0x40
 801022a:	733b      	strb	r3, [r7, #12]
 801022c:	23fe      	movs	r3, #254	@ 0xfe
 801022e:	737b      	strb	r3, [r7, #13]
 8010230:	2300      	movs	r3, #0
 8010232:	73bb      	strb	r3, [r7, #14]
 8010234:	2300      	movs	r3, #0
 8010236:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8010238:	4639      	mov	r1, r7
 801023a:	4b39      	ldr	r3, [pc, #228]	@ (8010320 <P2PS_STM_Init+0x134>)
 801023c:	9300      	str	r3, [sp, #0]
 801023e:	2306      	movs	r3, #6
 8010240:	2201      	movs	r2, #1
 8010242:	2002      	movs	r0, #2
 8010244:	f7ff f934 	bl	800f4b0 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8010248:	2319      	movs	r3, #25
 801024a:	703b      	strb	r3, [r7, #0]
 801024c:	23ed      	movs	r3, #237	@ 0xed
 801024e:	707b      	strb	r3, [r7, #1]
 8010250:	2382      	movs	r3, #130	@ 0x82
 8010252:	70bb      	strb	r3, [r7, #2]
 8010254:	23ae      	movs	r3, #174	@ 0xae
 8010256:	70fb      	strb	r3, [r7, #3]
 8010258:	23ed      	movs	r3, #237	@ 0xed
 801025a:	713b      	strb	r3, [r7, #4]
 801025c:	2321      	movs	r3, #33	@ 0x21
 801025e:	717b      	strb	r3, [r7, #5]
 8010260:	234c      	movs	r3, #76	@ 0x4c
 8010262:	71bb      	strb	r3, [r7, #6]
 8010264:	239d      	movs	r3, #157	@ 0x9d
 8010266:	71fb      	strb	r3, [r7, #7]
 8010268:	2341      	movs	r3, #65	@ 0x41
 801026a:	723b      	strb	r3, [r7, #8]
 801026c:	2345      	movs	r3, #69	@ 0x45
 801026e:	727b      	strb	r3, [r7, #9]
 8010270:	2322      	movs	r3, #34	@ 0x22
 8010272:	72bb      	strb	r3, [r7, #10]
 8010274:	238e      	movs	r3, #142	@ 0x8e
 8010276:	72fb      	strb	r3, [r7, #11]
 8010278:	2341      	movs	r3, #65	@ 0x41
 801027a:	733b      	strb	r3, [r7, #12]
 801027c:	23fe      	movs	r3, #254	@ 0xfe
 801027e:	737b      	strb	r3, [r7, #13]
 8010280:	2300      	movs	r3, #0
 8010282:	73bb      	strb	r3, [r7, #14]
 8010284:	2300      	movs	r3, #0
 8010286:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8010288:	4b25      	ldr	r3, [pc, #148]	@ (8010320 <P2PS_STM_Init+0x134>)
 801028a:	8818      	ldrh	r0, [r3, #0]
 801028c:	463a      	mov	r2, r7
 801028e:	4b25      	ldr	r3, [pc, #148]	@ (8010324 <P2PS_STM_Init+0x138>)
 8010290:	9305      	str	r3, [sp, #20]
 8010292:	2301      	movs	r3, #1
 8010294:	9304      	str	r3, [sp, #16]
 8010296:	230a      	movs	r3, #10
 8010298:	9303      	str	r3, [sp, #12]
 801029a:	2301      	movs	r3, #1
 801029c:	9302      	str	r3, [sp, #8]
 801029e:	2300      	movs	r3, #0
 80102a0:	9301      	str	r3, [sp, #4]
 80102a2:	2306      	movs	r3, #6
 80102a4:	9300      	str	r3, [sp, #0]
 80102a6:	2302      	movs	r3, #2
 80102a8:	2102      	movs	r1, #2
 80102aa:	f7ff f9d7 	bl	800f65c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 80102ae:	2319      	movs	r3, #25
 80102b0:	703b      	strb	r3, [r7, #0]
 80102b2:	23ed      	movs	r3, #237	@ 0xed
 80102b4:	707b      	strb	r3, [r7, #1]
 80102b6:	2382      	movs	r3, #130	@ 0x82
 80102b8:	70bb      	strb	r3, [r7, #2]
 80102ba:	23ae      	movs	r3, #174	@ 0xae
 80102bc:	70fb      	strb	r3, [r7, #3]
 80102be:	23ed      	movs	r3, #237	@ 0xed
 80102c0:	713b      	strb	r3, [r7, #4]
 80102c2:	2321      	movs	r3, #33	@ 0x21
 80102c4:	717b      	strb	r3, [r7, #5]
 80102c6:	234c      	movs	r3, #76	@ 0x4c
 80102c8:	71bb      	strb	r3, [r7, #6]
 80102ca:	239d      	movs	r3, #157	@ 0x9d
 80102cc:	71fb      	strb	r3, [r7, #7]
 80102ce:	2341      	movs	r3, #65	@ 0x41
 80102d0:	723b      	strb	r3, [r7, #8]
 80102d2:	2345      	movs	r3, #69	@ 0x45
 80102d4:	727b      	strb	r3, [r7, #9]
 80102d6:	2322      	movs	r3, #34	@ 0x22
 80102d8:	72bb      	strb	r3, [r7, #10]
 80102da:	238e      	movs	r3, #142	@ 0x8e
 80102dc:	72fb      	strb	r3, [r7, #11]
 80102de:	2342      	movs	r3, #66	@ 0x42
 80102e0:	733b      	strb	r3, [r7, #12]
 80102e2:	23fe      	movs	r3, #254	@ 0xfe
 80102e4:	737b      	strb	r3, [r7, #13]
 80102e6:	2300      	movs	r3, #0
 80102e8:	73bb      	strb	r3, [r7, #14]
 80102ea:	2300      	movs	r3, #0
 80102ec:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80102ee:	4b0c      	ldr	r3, [pc, #48]	@ (8010320 <P2PS_STM_Init+0x134>)
 80102f0:	8818      	ldrh	r0, [r3, #0]
 80102f2:	463a      	mov	r2, r7
 80102f4:	4b0c      	ldr	r3, [pc, #48]	@ (8010328 <P2PS_STM_Init+0x13c>)
 80102f6:	9305      	str	r3, [sp, #20]
 80102f8:	2301      	movs	r3, #1
 80102fa:	9304      	str	r3, [sp, #16]
 80102fc:	230a      	movs	r3, #10
 80102fe:	9303      	str	r3, [sp, #12]
 8010300:	2301      	movs	r3, #1
 8010302:	9302      	str	r3, [sp, #8]
 8010304:	2300      	movs	r3, #0
 8010306:	9301      	str	r3, [sp, #4]
 8010308:	2310      	movs	r3, #16
 801030a:	9300      	str	r3, [sp, #0]
 801030c:	2380      	movs	r3, #128	@ 0x80
 801030e:	2102      	movs	r1, #2
 8010310:	f7ff f9a4 	bl	800f65c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8010314:	bf00      	nop
}
 8010316:	3710      	adds	r7, #16
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}
 801031c:	08010125 	.word	0x08010125
 8010320:	2000017c 	.word	0x2000017c
 8010324:	2000017e 	.word	0x2000017e
 8010328:	20000180 	.word	0x20000180

0801032c <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 801032c:	b5b0      	push	{r4, r5, r7, lr}
 801032e:	b086      	sub	sp, #24
 8010330:	af02      	add	r7, sp, #8
 8010332:	4603      	mov	r3, r0
 8010334:	6039      	str	r1, [r7, #0]
 8010336:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8010338:	2392      	movs	r3, #146	@ 0x92
 801033a:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 801033c:	88fb      	ldrh	r3, [r7, #6]
 801033e:	f64f 6242 	movw	r2, #65090	@ 0xfe42
 8010342:	4293      	cmp	r3, r2
 8010344:	d113      	bne.n	801036e <P2PS_STM_App_Update_Char+0x42>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8010346:	4b0d      	ldr	r3, [pc, #52]	@ (801037c <P2PS_STM_App_Update_Char+0x50>)
 8010348:	881c      	ldrh	r4, [r3, #0]
 801034a:	4b0c      	ldr	r3, [pc, #48]	@ (801037c <P2PS_STM_App_Update_Char+0x50>)
 801034c:	889d      	ldrh	r5, [r3, #4]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
							  strlen((char *)pPayload), /* charValueLen */
 801034e:	6838      	ldr	r0, [r7, #0]
 8010350:	f7ef ff16 	bl	8000180 <strlen>
 8010354:	4603      	mov	r3, r0
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8010356:	b2da      	uxtb	r2, r3
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	4613      	mov	r3, r2
 801035e:	2200      	movs	r2, #0
 8010360:	4629      	mov	r1, r5
 8010362:	4620      	mov	r0, r4
 8010364:	f7ff fa82 	bl	800f86c <aci_gatt_update_char_value>
 8010368:	4603      	mov	r3, r0
 801036a:	73fb      	strb	r3, [r7, #15]
                             (uint8_t *)  pPayload);
    
      break;
 801036c:	e000      	b.n	8010370 <P2PS_STM_App_Update_Char+0x44>

    default:
      break;
 801036e:	bf00      	nop
  }

  return result;
 8010370:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8010372:	4618      	mov	r0, r3
 8010374:	3710      	adds	r7, #16
 8010376:	46bd      	mov	sp, r7
 8010378:	bdb0      	pop	{r4, r5, r7, pc}
 801037a:	bf00      	nop
 801037c:	2000017c 	.word	0x2000017c

08010380 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8010380:	b480      	push	{r7}
 8010382:	af00      	add	r7, sp, #0
  return;
 8010384:	bf00      	nop
}
 8010386:	46bd      	mov	sp, r7
 8010388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038c:	4770      	bx	lr

0801038e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 801038e:	b480      	push	{r7}
 8010390:	af00      	add	r7, sp, #0
  return;
 8010392:	bf00      	nop
}
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr

0801039c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 801039c:	b480      	push	{r7}
 801039e:	af00      	add	r7, sp, #0
  return;
 80103a0:	bf00      	nop
}
 80103a2:	46bd      	mov	sp, r7
 80103a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a8:	4770      	bx	lr

080103aa <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80103aa:	b480      	push	{r7}
 80103ac:	af00      	add	r7, sp, #0
  return;
 80103ae:	bf00      	nop
}
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr

080103b8 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80103b8:	b480      	push	{r7}
 80103ba:	af00      	add	r7, sp, #0
  return;
 80103bc:	bf00      	nop
}
 80103be:	46bd      	mov	sp, r7
 80103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c4:	4770      	bx	lr

080103c6 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80103c6:	b480      	push	{r7}
 80103c8:	af00      	add	r7, sp, #0
  return;
 80103ca:	bf00      	nop
}
 80103cc:	46bd      	mov	sp, r7
 80103ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d2:	4770      	bx	lr

080103d4 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80103d4:	b480      	push	{r7}
 80103d6:	af00      	add	r7, sp, #0
  return;
 80103d8:	bf00      	nop
}
 80103da:	46bd      	mov	sp, r7
 80103dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e0:	4770      	bx	lr

080103e2 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80103e2:	b480      	push	{r7}
 80103e4:	af00      	add	r7, sp, #0
  return;
 80103e6:	bf00      	nop
}
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80103f0:	b480      	push	{r7}
 80103f2:	af00      	add	r7, sp, #0
  return;
 80103f4:	bf00      	nop
}
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr

080103fe <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80103fe:	b480      	push	{r7}
 8010400:	af00      	add	r7, sp, #0
  return;
 8010402:	bf00      	nop
}
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 801040c:	b480      	push	{r7}
 801040e:	af00      	add	r7, sp, #0
  return;
 8010410:	bf00      	nop
}
 8010412:	46bd      	mov	sp, r7
 8010414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010418:	4770      	bx	lr

0801041a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 801041a:	b480      	push	{r7}
 801041c:	af00      	add	r7, sp, #0
  return;
 801041e:	bf00      	nop
}
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr

08010428 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 8010428:	b480      	push	{r7}
 801042a:	af00      	add	r7, sp, #0
  return;
 801042c:	bf00      	nop
}
 801042e:	46bd      	mov	sp, r7
 8010430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010434:	4770      	bx	lr

08010436 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8010436:	b480      	push	{r7}
 8010438:	af00      	add	r7, sp, #0
  return;
 801043a:	bf00      	nop
}
 801043c:	46bd      	mov	sp, r7
 801043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010442:	4770      	bx	lr

08010444 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8010444:	b480      	push	{r7}
 8010446:	af00      	add	r7, sp, #0
  return;
 8010448:	bf00      	nop
}
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr

08010452 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8010452:	b480      	push	{r7}
 8010454:	af00      	add	r7, sp, #0
  return;
 8010456:	bf00      	nop
}
 8010458:	46bd      	mov	sp, r7
 801045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045e:	4770      	bx	lr

08010460 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8010460:	b480      	push	{r7}
 8010462:	af00      	add	r7, sp, #0
  return;
 8010464:	bf00      	nop
}
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr
	...

08010470 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8010470:	b580      	push	{r7, lr}
 8010472:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8010474:	4b04      	ldr	r3, [pc, #16]	@ (8010488 <SVCCTL_Init+0x18>)
 8010476:	2200      	movs	r2, #0
 8010478:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 801047a:	4b04      	ldr	r3, [pc, #16]	@ (801048c <SVCCTL_Init+0x1c>)
 801047c:	2200      	movs	r2, #0
 801047e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8010480:	f000 f806 	bl	8010490 <SVCCTL_SvcInit>

  return;
 8010484:	bf00      	nop
}
 8010486:	bd80      	pop	{r7, pc}
 8010488:	20000184 	.word	0x20000184
 801048c:	200001a4 	.word	0x200001a4

08010490 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	af00      	add	r7, sp, #0
  BAS_Init();
 8010494:	f7ff ff74 	bl	8010380 <BAS_Init>

  BLS_Init();
 8010498:	f7ff ff79 	bl	801038e <BLS_Init>

  CRS_STM_Init();
 801049c:	f7ff ff7e 	bl	801039c <CRS_STM_Init>

  DIS_Init();
 80104a0:	f7ff ff83 	bl	80103aa <DIS_Init>

  EDS_STM_Init();
 80104a4:	f7ff ff88 	bl	80103b8 <EDS_STM_Init>

  HIDS_Init();
 80104a8:	f7ff ff8d 	bl	80103c6 <HIDS_Init>

  HRS_Init();
 80104ac:	f7ff ff92 	bl	80103d4 <HRS_Init>

  HTS_Init();
 80104b0:	f7ff ff97 	bl	80103e2 <HTS_Init>

  IAS_Init();
 80104b4:	f7ff ff9c 	bl	80103f0 <IAS_Init>

  LLS_Init();
 80104b8:	f7ff ffa1 	bl	80103fe <LLS_Init>

  TPS_Init();
 80104bc:	f7ff ffa6 	bl	801040c <TPS_Init>

  MOTENV_STM_Init();
 80104c0:	f7ff ffab 	bl	801041a <MOTENV_STM_Init>

  P2PS_STM_Init();
 80104c4:	f7ff fe92 	bl	80101ec <P2PS_STM_Init>

  ZDD_STM_Init();
 80104c8:	f7ff ffae 	bl	8010428 <ZDD_STM_Init>

  OTAS_STM_Init();
 80104cc:	f7ff ffb3 	bl	8010436 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80104d0:	f7ff ffbf 	bl	8010452 <BVOPUS_STM_Init>

  MESH_Init();
 80104d4:	f7ff ffb6 	bl	8010444 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80104d8:	f7ff ffc2 	bl	8010460 <SVCCTL_InitCustomSvc>
  
  return;
 80104dc:	bf00      	nop
}
 80104de:	bd80      	pop	{r7, pc}

080104e0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80104e0:	b480      	push	{r7}
 80104e2:	b083      	sub	sp, #12
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80104e8:	4b09      	ldr	r3, [pc, #36]	@ (8010510 <SVCCTL_RegisterSvcHandler+0x30>)
 80104ea:	7f1b      	ldrb	r3, [r3, #28]
 80104ec:	4619      	mov	r1, r3
 80104ee:	4a08      	ldr	r2, [pc, #32]	@ (8010510 <SVCCTL_RegisterSvcHandler+0x30>)
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80104f6:	4b06      	ldr	r3, [pc, #24]	@ (8010510 <SVCCTL_RegisterSvcHandler+0x30>)
 80104f8:	7f1b      	ldrb	r3, [r3, #28]
 80104fa:	3301      	adds	r3, #1
 80104fc:	b2da      	uxtb	r2, r3
 80104fe:	4b04      	ldr	r3, [pc, #16]	@ (8010510 <SVCCTL_RegisterSvcHandler+0x30>)
 8010500:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8010502:	bf00      	nop
}
 8010504:	370c      	adds	r7, #12
 8010506:	46bd      	mov	sp, r7
 8010508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050c:	4770      	bx	lr
 801050e:	bf00      	nop
 8010510:	20000184 	.word	0x20000184

08010514 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b086      	sub	sp, #24
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	3301      	adds	r3, #1
 8010520:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8010522:	2300      	movs	r3, #0
 8010524:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	2bff      	cmp	r3, #255	@ 0xff
 801052c:	d125      	bne.n	801057a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	3302      	adds	r3, #2
 8010532:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	881b      	ldrh	r3, [r3, #0]
 8010538:	b29b      	uxth	r3, r3
 801053a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801053e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010542:	d118      	bne.n	8010576 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010544:	2300      	movs	r3, #0
 8010546:	757b      	strb	r3, [r7, #21]
 8010548:	e00d      	b.n	8010566 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 801054a:	7d7b      	ldrb	r3, [r7, #21]
 801054c:	4a1a      	ldr	r2, [pc, #104]	@ (80105b8 <SVCCTL_UserEvtRx+0xa4>)
 801054e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	4798      	blx	r3
 8010556:	4603      	mov	r3, r0
 8010558:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 801055a:	7dfb      	ldrb	r3, [r7, #23]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d108      	bne.n	8010572 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010560:	7d7b      	ldrb	r3, [r7, #21]
 8010562:	3301      	adds	r3, #1
 8010564:	757b      	strb	r3, [r7, #21]
 8010566:	4b14      	ldr	r3, [pc, #80]	@ (80105b8 <SVCCTL_UserEvtRx+0xa4>)
 8010568:	7f1b      	ldrb	r3, [r3, #28]
 801056a:	7d7a      	ldrb	r2, [r7, #21]
 801056c:	429a      	cmp	r2, r3
 801056e:	d3ec      	bcc.n	801054a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8010570:	e002      	b.n	8010578 <SVCCTL_UserEvtRx+0x64>
              break;
 8010572:	bf00      	nop
          break;
 8010574:	e000      	b.n	8010578 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8010576:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8010578:	e000      	b.n	801057c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 801057a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 801057c:	7dfb      	ldrb	r3, [r7, #23]
 801057e:	2b02      	cmp	r3, #2
 8010580:	d00f      	beq.n	80105a2 <SVCCTL_UserEvtRx+0x8e>
 8010582:	2b02      	cmp	r3, #2
 8010584:	dc10      	bgt.n	80105a8 <SVCCTL_UserEvtRx+0x94>
 8010586:	2b00      	cmp	r3, #0
 8010588:	d002      	beq.n	8010590 <SVCCTL_UserEvtRx+0x7c>
 801058a:	2b01      	cmp	r3, #1
 801058c:	d006      	beq.n	801059c <SVCCTL_UserEvtRx+0x88>
 801058e:	e00b      	b.n	80105a8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f001 fccb 	bl	8011f2c <SVCCTL_App_Notification>
 8010596:	4603      	mov	r3, r0
 8010598:	75bb      	strb	r3, [r7, #22]
      break;
 801059a:	e008      	b.n	80105ae <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 801059c:	2301      	movs	r3, #1
 801059e:	75bb      	strb	r3, [r7, #22]
      break;
 80105a0:	e005      	b.n	80105ae <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80105a2:	2300      	movs	r3, #0
 80105a4:	75bb      	strb	r3, [r7, #22]
      break;
 80105a6:	e002      	b.n	80105ae <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80105a8:	2301      	movs	r3, #1
 80105aa:	75bb      	strb	r3, [r7, #22]
      break;
 80105ac:	bf00      	nop
  }

  return (return_status);
 80105ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	3718      	adds	r7, #24
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}
 80105b8:	20000184 	.word	0x20000184

080105bc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b088      	sub	sp, #32
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80105c4:	f107 030c 	add.w	r3, r7, #12
 80105c8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80105d0:	69fb      	ldr	r3, [r7, #28]
 80105d2:	212e      	movs	r1, #46	@ 0x2e
 80105d4:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 80105d8:	f000 fae8 	bl	8010bac <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80105dc:	69fb      	ldr	r3, [r7, #28]
 80105de:	330b      	adds	r3, #11
 80105e0:	78db      	ldrb	r3, [r3, #3]
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3720      	adds	r7, #32
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}

080105ea <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80105ea:	b580      	push	{r7, lr}
 80105ec:	b088      	sub	sp, #32
 80105ee:	af00      	add	r7, sp, #0
 80105f0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80105f2:	f107 030c 	add.w	r3, r7, #12
 80105f6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80105fe:	69fb      	ldr	r3, [r7, #28]
 8010600:	210f      	movs	r1, #15
 8010602:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8010606:	f000 fad1 	bl	8010bac <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801060a:	69fb      	ldr	r3, [r7, #28]
 801060c:	330b      	adds	r3, #11
 801060e:	78db      	ldrb	r3, [r3, #3]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3720      	adds	r7, #32
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b088      	sub	sp, #32
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010620:	f107 030c 	add.w	r3, r7, #12
 8010624:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	687a      	ldr	r2, [r7, #4]
 801062a:	2110      	movs	r1, #16
 801062c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8010630:	f000 fabc 	bl	8010bac <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8010634:	69fb      	ldr	r3, [r7, #28]
 8010636:	330b      	adds	r3, #11
 8010638:	78db      	ldrb	r3, [r3, #3]
}
 801063a:	4618      	mov	r0, r3
 801063c:	3720      	adds	r7, #32
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
	...

08010644 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8010644:	b480      	push	{r7}
 8010646:	b08b      	sub	sp, #44	@ 0x2c
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 801064c:	2300      	movs	r3, #0
 801064e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8010650:	2300      	movs	r3, #0
 8010652:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8010654:	2300      	movs	r3, #0
 8010656:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8010658:	2300      	movs	r3, #0
 801065a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 801065c:	2300      	movs	r3, #0
 801065e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8010660:	2300      	movs	r3, #0
 8010662:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8010664:	2300      	movs	r3, #0
 8010666:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8010668:	2300      	movs	r3, #0
 801066a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 801066c:	4b4a      	ldr	r3, [pc, #296]	@ (8010798 <SHCI_GetWirelessFwInfo+0x154>)
 801066e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010670:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010674:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	009b      	lsls	r3, r3, #2
 801067a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 801067e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	4a44      	ldr	r2, [pc, #272]	@ (801079c <SHCI_GetWirelessFwInfo+0x158>)
 801068c:	4293      	cmp	r3, r2
 801068e:	d10f      	bne.n	80106b0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	695b      	ldr	r3, [r3, #20]
 8010694:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	699b      	ldr	r3, [r3, #24]
 801069a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	69db      	ldr	r3, [r3, #28]
 80106a0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	68db      	ldr	r3, [r3, #12]
 80106a6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	691b      	ldr	r3, [r3, #16]
 80106ac:	617b      	str	r3, [r7, #20]
 80106ae:	e01a      	b.n	80106e6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	009b      	lsls	r3, r3, #2
 80106b4:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80106b8:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80106bc:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	691b      	ldr	r3, [r3, #16]
 80106c4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	695b      	ldr	r3, [r3, #20]
 80106cc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	699b      	ldr	r3, [r3, #24]
 80106d4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	685b      	ldr	r3, [r3, #4]
 80106dc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	689b      	ldr	r3, [r3, #8]
 80106e4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80106e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e8:	0e1b      	lsrs	r3, r3, #24
 80106ea:	b2da      	uxtb	r2, r3
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80106f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106f2:	0c1b      	lsrs	r3, r3, #16
 80106f4:	b2da      	uxtb	r2, r3
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80106fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106fc:	0a1b      	lsrs	r3, r3, #8
 80106fe:	b2da      	uxtb	r2, r3
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8010704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010706:	091b      	lsrs	r3, r3, #4
 8010708:	b2db      	uxtb	r3, r3
 801070a:	f003 030f 	and.w	r3, r3, #15
 801070e:	b2da      	uxtb	r2, r3
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8010714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010716:	b2db      	uxtb	r3, r3
 8010718:	f003 030f 	and.w	r3, r3, #15
 801071c:	b2da      	uxtb	r2, r3
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8010722:	6a3b      	ldr	r3, [r7, #32]
 8010724:	0e1b      	lsrs	r3, r3, #24
 8010726:	b2da      	uxtb	r2, r3
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 801072c:	6a3b      	ldr	r3, [r7, #32]
 801072e:	0c1b      	lsrs	r3, r3, #16
 8010730:	b2da      	uxtb	r2, r3
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8010736:	6a3b      	ldr	r3, [r7, #32]
 8010738:	0a1b      	lsrs	r3, r3, #8
 801073a:	b2da      	uxtb	r2, r3
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010740:	6a3b      	ldr	r3, [r7, #32]
 8010742:	b2da      	uxtb	r2, r3
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	b2da      	uxtb	r2, r3
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010750:	69bb      	ldr	r3, [r7, #24]
 8010752:	0e1b      	lsrs	r3, r3, #24
 8010754:	b2da      	uxtb	r2, r3
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801075a:	69bb      	ldr	r3, [r7, #24]
 801075c:	0c1b      	lsrs	r3, r3, #16
 801075e:	b2da      	uxtb	r2, r3
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8010764:	69bb      	ldr	r3, [r7, #24]
 8010766:	0a1b      	lsrs	r3, r3, #8
 8010768:	b2da      	uxtb	r2, r3
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	0e1b      	lsrs	r3, r3, #24
 8010772:	b2da      	uxtb	r2, r3
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	0c1b      	lsrs	r3, r3, #16
 801077c:	b2da      	uxtb	r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	b2da      	uxtb	r2, r3
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 801078a:	2300      	movs	r3, #0
}
 801078c:	4618      	mov	r0, r3
 801078e:	372c      	adds	r7, #44	@ 0x2c
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr
 8010798:	58004000 	.word	0x58004000
 801079c:	a94656b9 	.word	0xa94656b9

080107a0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b082      	sub	sp, #8
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	4a08      	ldr	r2, [pc, #32]	@ (80107d0 <hci_init+0x30>)
 80107b0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80107b2:	4a08      	ldr	r2, [pc, #32]	@ (80107d4 <hci_init+0x34>)
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80107b8:	4806      	ldr	r0, [pc, #24]	@ (80107d4 <hci_init+0x34>)
 80107ba:	f000 f979 	bl	8010ab0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	4618      	mov	r0, r3
 80107c4:	f000 f8da 	bl	801097c <TlInit>

  return;
 80107c8:	bf00      	nop
}
 80107ca:	3708      	adds	r7, #8
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}
 80107d0:	2000055c 	.word	0x2000055c
 80107d4:	20000534 	.word	0x20000534

080107d8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b084      	sub	sp, #16
 80107dc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80107de:	4822      	ldr	r0, [pc, #136]	@ (8010868 <hci_user_evt_proc+0x90>)
 80107e0:	f000 fe10 	bl	8011404 <LST_is_empty>
 80107e4:	4603      	mov	r3, r0
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d12b      	bne.n	8010842 <hci_user_evt_proc+0x6a>
 80107ea:	4b20      	ldr	r3, [pc, #128]	@ (801086c <hci_user_evt_proc+0x94>)
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d027      	beq.n	8010842 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80107f2:	f107 030c 	add.w	r3, r7, #12
 80107f6:	4619      	mov	r1, r3
 80107f8:	481b      	ldr	r0, [pc, #108]	@ (8010868 <hci_user_evt_proc+0x90>)
 80107fa:	f000 fe92 	bl	8011522 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80107fe:	4b1c      	ldr	r3, [pc, #112]	@ (8010870 <hci_user_evt_proc+0x98>)
 8010800:	69db      	ldr	r3, [r3, #28]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d00c      	beq.n	8010820 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 801080a:	2301      	movs	r3, #1
 801080c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 801080e:	4b18      	ldr	r3, [pc, #96]	@ (8010870 <hci_user_evt_proc+0x98>)
 8010810:	69db      	ldr	r3, [r3, #28]
 8010812:	1d3a      	adds	r2, r7, #4
 8010814:	4610      	mov	r0, r2
 8010816:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8010818:	793a      	ldrb	r2, [r7, #4]
 801081a:	4b14      	ldr	r3, [pc, #80]	@ (801086c <hci_user_evt_proc+0x94>)
 801081c:	701a      	strb	r2, [r3, #0]
 801081e:	e002      	b.n	8010826 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8010820:	4b12      	ldr	r3, [pc, #72]	@ (801086c <hci_user_evt_proc+0x94>)
 8010822:	2201      	movs	r2, #1
 8010824:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8010826:	4b11      	ldr	r3, [pc, #68]	@ (801086c <hci_user_evt_proc+0x94>)
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d004      	beq.n	8010838 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	4618      	mov	r0, r3
 8010832:	f000 fc0d 	bl	8011050 <TL_MM_EvtDone>
 8010836:	e004      	b.n	8010842 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	4619      	mov	r1, r3
 801083c:	480a      	ldr	r0, [pc, #40]	@ (8010868 <hci_user_evt_proc+0x90>)
 801083e:	f000 fe03 	bl	8011448 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8010842:	4809      	ldr	r0, [pc, #36]	@ (8010868 <hci_user_evt_proc+0x90>)
 8010844:	f000 fdde 	bl	8011404 <LST_is_empty>
 8010848:	4603      	mov	r3, r0
 801084a:	2b00      	cmp	r3, #0
 801084c:	d107      	bne.n	801085e <hci_user_evt_proc+0x86>
 801084e:	4b07      	ldr	r3, [pc, #28]	@ (801086c <hci_user_evt_proc+0x94>)
 8010850:	781b      	ldrb	r3, [r3, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d003      	beq.n	801085e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8010856:	4804      	ldr	r0, [pc, #16]	@ (8010868 <hci_user_evt_proc+0x90>)
 8010858:	f002 fa1f 	bl	8012c9a <hci_notify_asynch_evt>
  }


  return;
 801085c:	bf00      	nop
 801085e:	bf00      	nop
}
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	200001ac 	.word	0x200001ac
 801086c:	200001b8 	.word	0x200001b8
 8010870:	20000534 	.word	0x20000534

08010874 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b088      	sub	sp, #32
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	460b      	mov	r3, r1
 801087e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8010880:	2000      	movs	r0, #0
 8010882:	f000 f8d1 	bl	8010a28 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8010886:	2300      	movs	r3, #0
 8010888:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	885b      	ldrh	r3, [r3, #2]
 801088e:	b21b      	sxth	r3, r3
 8010890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010894:	b21a      	sxth	r2, r3
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	881b      	ldrh	r3, [r3, #0]
 801089a:	b21b      	sxth	r3, r3
 801089c:	029b      	lsls	r3, r3, #10
 801089e:	b21b      	sxth	r3, r3
 80108a0:	4313      	orrs	r3, r2
 80108a2:	b21b      	sxth	r3, r3
 80108a4:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80108a6:	4b33      	ldr	r3, [pc, #204]	@ (8010974 <hci_send_req+0x100>)
 80108a8:	2201      	movs	r2, #1
 80108aa:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	68db      	ldr	r3, [r3, #12]
 80108b0:	b2d9      	uxtb	r1, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	689a      	ldr	r2, [r3, #8]
 80108b6:	8bbb      	ldrh	r3, [r7, #28]
 80108b8:	4618      	mov	r0, r3
 80108ba:	f000 f88f 	bl	80109dc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80108be:	e04e      	b.n	801095e <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80108c0:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80108c4:	f002 fa00 	bl	8012cc8 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80108c8:	e043      	b.n	8010952 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80108ca:	f107 030c 	add.w	r3, r7, #12
 80108ce:	4619      	mov	r1, r3
 80108d0:	4829      	ldr	r0, [pc, #164]	@ (8010978 <hci_send_req+0x104>)
 80108d2:	f000 fe26 	bl	8011522 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	7a5b      	ldrb	r3, [r3, #9]
 80108da:	2b0f      	cmp	r3, #15
 80108dc:	d114      	bne.n	8010908 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	330b      	adds	r3, #11
 80108e2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	885b      	ldrh	r3, [r3, #2]
 80108e8:	b29b      	uxth	r3, r3
 80108ea:	8bba      	ldrh	r2, [r7, #28]
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d104      	bne.n	80108fa <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	691b      	ldr	r3, [r3, #16]
 80108f4:	693a      	ldr	r2, [r7, #16]
 80108f6:	7812      	ldrb	r2, [r2, #0]
 80108f8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	785b      	ldrb	r3, [r3, #1]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d027      	beq.n	8010952 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8010902:	2301      	movs	r3, #1
 8010904:	77fb      	strb	r3, [r7, #31]
 8010906:	e024      	b.n	8010952 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	330b      	adds	r3, #11
 801090c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 801090e:	69bb      	ldr	r3, [r7, #24]
 8010910:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010914:	b29b      	uxth	r3, r3
 8010916:	8bba      	ldrh	r2, [r7, #28]
 8010918:	429a      	cmp	r2, r3
 801091a:	d114      	bne.n	8010946 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	7a9b      	ldrb	r3, [r3, #10]
 8010920:	3b03      	subs	r3, #3
 8010922:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	695a      	ldr	r2, [r3, #20]
 8010928:	7dfb      	ldrb	r3, [r7, #23]
 801092a:	429a      	cmp	r2, r3
 801092c:	bfa8      	it	ge
 801092e:	461a      	movge	r2, r3
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	6918      	ldr	r0, [r3, #16]
 8010938:	69bb      	ldr	r3, [r7, #24]
 801093a:	1cd9      	adds	r1, r3, #3
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	695b      	ldr	r3, [r3, #20]
 8010940:	461a      	mov	r2, r3
 8010942:	f003 ff48 	bl	80147d6 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8010946:	69bb      	ldr	r3, [r7, #24]
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d001      	beq.n	8010952 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801094e:	2301      	movs	r3, #1
 8010950:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8010952:	4809      	ldr	r0, [pc, #36]	@ (8010978 <hci_send_req+0x104>)
 8010954:	f000 fd56 	bl	8011404 <LST_is_empty>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	d0b5      	beq.n	80108ca <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 801095e:	7ffb      	ldrb	r3, [r7, #31]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d0ad      	beq.n	80108c0 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8010964:	2001      	movs	r0, #1
 8010966:	f000 f85f 	bl	8010a28 <NotifyCmdStatus>

  return 0;
 801096a:	2300      	movs	r3, #0
}
 801096c:	4618      	mov	r0, r3
 801096e:	3720      	adds	r7, #32
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}
 8010974:	20000560 	.word	0x20000560
 8010978:	20000554 	.word	0x20000554

0801097c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b086      	sub	sp, #24
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8010984:	480f      	ldr	r0, [pc, #60]	@ (80109c4 <TlInit+0x48>)
 8010986:	f000 fd2d 	bl	80113e4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 801098a:	4a0f      	ldr	r2, [pc, #60]	@ (80109c8 <TlInit+0x4c>)
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8010990:	480e      	ldr	r0, [pc, #56]	@ (80109cc <TlInit+0x50>)
 8010992:	f000 fd27 	bl	80113e4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8010996:	4b0e      	ldr	r3, [pc, #56]	@ (80109d0 <TlInit+0x54>)
 8010998:	2201      	movs	r2, #1
 801099a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 801099c:	4b0d      	ldr	r3, [pc, #52]	@ (80109d4 <TlInit+0x58>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d00a      	beq.n	80109ba <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80109a8:	4b0b      	ldr	r3, [pc, #44]	@ (80109d8 <TlInit+0x5c>)
 80109aa:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80109ac:	4b09      	ldr	r3, [pc, #36]	@ (80109d4 <TlInit+0x58>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	f107 0208 	add.w	r2, r7, #8
 80109b4:	4610      	mov	r0, r2
 80109b6:	4798      	blx	r3
  }

  return;
 80109b8:	bf00      	nop
 80109ba:	bf00      	nop
}
 80109bc:	3718      	adds	r7, #24
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	bf00      	nop
 80109c4:	20000554 	.word	0x20000554
 80109c8:	200001b4 	.word	0x200001b4
 80109cc:	200001ac 	.word	0x200001ac
 80109d0:	200001b8 	.word	0x200001b8
 80109d4:	20000534 	.word	0x20000534
 80109d8:	08010a69 	.word	0x08010a69

080109dc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b082      	sub	sp, #8
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	4603      	mov	r3, r0
 80109e4:	603a      	str	r2, [r7, #0]
 80109e6:	80fb      	strh	r3, [r7, #6]
 80109e8:	460b      	mov	r3, r1
 80109ea:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80109ec:	4b0c      	ldr	r3, [pc, #48]	@ (8010a20 <SendCmd+0x44>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	88fa      	ldrh	r2, [r7, #6]
 80109f2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80109f6:	4b0a      	ldr	r3, [pc, #40]	@ (8010a20 <SendCmd+0x44>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	797a      	ldrb	r2, [r7, #5]
 80109fc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80109fe:	4b08      	ldr	r3, [pc, #32]	@ (8010a20 <SendCmd+0x44>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	330c      	adds	r3, #12
 8010a04:	797a      	ldrb	r2, [r7, #5]
 8010a06:	6839      	ldr	r1, [r7, #0]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f003 fee4 	bl	80147d6 <memcpy>

  hciContext.io.Send(0,0);
 8010a0e:	4b05      	ldr	r3, [pc, #20]	@ (8010a24 <SendCmd+0x48>)
 8010a10:	691b      	ldr	r3, [r3, #16]
 8010a12:	2100      	movs	r1, #0
 8010a14:	2000      	movs	r0, #0
 8010a16:	4798      	blx	r3

  return;
 8010a18:	bf00      	nop
}
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	200001b4 	.word	0x200001b4
 8010a24:	20000534 	.word	0x20000534

08010a28 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	4603      	mov	r3, r0
 8010a30:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8010a32:	79fb      	ldrb	r3, [r7, #7]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d108      	bne.n	8010a4a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8010a38:	4b0a      	ldr	r3, [pc, #40]	@ (8010a64 <NotifyCmdStatus+0x3c>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d00d      	beq.n	8010a5c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8010a40:	4b08      	ldr	r3, [pc, #32]	@ (8010a64 <NotifyCmdStatus+0x3c>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	2000      	movs	r0, #0
 8010a46:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8010a48:	e008      	b.n	8010a5c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8010a4a:	4b06      	ldr	r3, [pc, #24]	@ (8010a64 <NotifyCmdStatus+0x3c>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d004      	beq.n	8010a5c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8010a52:	4b04      	ldr	r3, [pc, #16]	@ (8010a64 <NotifyCmdStatus+0x3c>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	2001      	movs	r0, #1
 8010a58:	4798      	blx	r3
  return;
 8010a5a:	bf00      	nop
 8010a5c:	bf00      	nop
}
 8010a5e:	3708      	adds	r7, #8
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}
 8010a64:	2000055c 	.word	0x2000055c

08010a68 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b082      	sub	sp, #8
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	7a5b      	ldrb	r3, [r3, #9]
 8010a74:	2b0f      	cmp	r3, #15
 8010a76:	d003      	beq.n	8010a80 <TlEvtReceived+0x18>
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	7a5b      	ldrb	r3, [r3, #9]
 8010a7c:	2b0e      	cmp	r3, #14
 8010a7e:	d107      	bne.n	8010a90 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8010a80:	6879      	ldr	r1, [r7, #4]
 8010a82:	4809      	ldr	r0, [pc, #36]	@ (8010aa8 <TlEvtReceived+0x40>)
 8010a84:	f000 fd06 	bl	8011494 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8010a88:	2000      	movs	r0, #0
 8010a8a:	f002 f912 	bl	8012cb2 <hci_cmd_resp_release>
 8010a8e:	e006      	b.n	8010a9e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8010a90:	6879      	ldr	r1, [r7, #4]
 8010a92:	4806      	ldr	r0, [pc, #24]	@ (8010aac <TlEvtReceived+0x44>)
 8010a94:	f000 fcfe 	bl	8011494 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8010a98:	4804      	ldr	r0, [pc, #16]	@ (8010aac <TlEvtReceived+0x44>)
 8010a9a:	f002 f8fe 	bl	8012c9a <hci_notify_asynch_evt>
  }

  return;
 8010a9e:	bf00      	nop
}
 8010aa0:	3708      	adds	r7, #8
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	20000554 	.word	0x20000554
 8010aac:	200001ac 	.word	0x200001ac

08010ab0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b083      	sub	sp, #12
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	4a05      	ldr	r2, [pc, #20]	@ (8010ad0 <hci_register_io_bus+0x20>)
 8010abc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	4a04      	ldr	r2, [pc, #16]	@ (8010ad4 <hci_register_io_bus+0x24>)
 8010ac2:	611a      	str	r2, [r3, #16]

  return;
 8010ac4:	bf00      	nop
}
 8010ac6:	370c      	adds	r7, #12
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ace:	4770      	bx	lr
 8010ad0:	08010dc9 	.word	0x08010dc9
 8010ad4:	08010e31 	.word	0x08010e31

08010ad8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	685b      	ldr	r3, [r3, #4]
 8010ae6:	4a08      	ldr	r2, [pc, #32]	@ (8010b08 <shci_init+0x30>)
 8010ae8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8010aea:	4a08      	ldr	r2, [pc, #32]	@ (8010b0c <shci_init+0x34>)
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8010af0:	4806      	ldr	r0, [pc, #24]	@ (8010b0c <shci_init+0x34>)
 8010af2:	f000 f915 	bl	8010d20 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4618      	mov	r0, r3
 8010afc:	f000 f898 	bl	8010c30 <TlInit>

  return;
 8010b00:	bf00      	nop
}
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	20000584 	.word	0x20000584
 8010b0c:	20000564 	.word	0x20000564

08010b10 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b084      	sub	sp, #16
 8010b14:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8010b16:	4822      	ldr	r0, [pc, #136]	@ (8010ba0 <shci_user_evt_proc+0x90>)
 8010b18:	f000 fc74 	bl	8011404 <LST_is_empty>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d12b      	bne.n	8010b7a <shci_user_evt_proc+0x6a>
 8010b22:	4b20      	ldr	r3, [pc, #128]	@ (8010ba4 <shci_user_evt_proc+0x94>)
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d027      	beq.n	8010b7a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8010b2a:	f107 030c 	add.w	r3, r7, #12
 8010b2e:	4619      	mov	r1, r3
 8010b30:	481b      	ldr	r0, [pc, #108]	@ (8010ba0 <shci_user_evt_proc+0x90>)
 8010b32:	f000 fcf6 	bl	8011522 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8010b36:	4b1c      	ldr	r3, [pc, #112]	@ (8010ba8 <shci_user_evt_proc+0x98>)
 8010b38:	69db      	ldr	r3, [r3, #28]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d00c      	beq.n	8010b58 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8010b42:	2301      	movs	r3, #1
 8010b44:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8010b46:	4b18      	ldr	r3, [pc, #96]	@ (8010ba8 <shci_user_evt_proc+0x98>)
 8010b48:	69db      	ldr	r3, [r3, #28]
 8010b4a:	1d3a      	adds	r2, r7, #4
 8010b4c:	4610      	mov	r0, r2
 8010b4e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8010b50:	793a      	ldrb	r2, [r7, #4]
 8010b52:	4b14      	ldr	r3, [pc, #80]	@ (8010ba4 <shci_user_evt_proc+0x94>)
 8010b54:	701a      	strb	r2, [r3, #0]
 8010b56:	e002      	b.n	8010b5e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8010b58:	4b12      	ldr	r3, [pc, #72]	@ (8010ba4 <shci_user_evt_proc+0x94>)
 8010b5a:	2201      	movs	r2, #1
 8010b5c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8010b5e:	4b11      	ldr	r3, [pc, #68]	@ (8010ba4 <shci_user_evt_proc+0x94>)
 8010b60:	781b      	ldrb	r3, [r3, #0]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d004      	beq.n	8010b70 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 fa71 	bl	8011050 <TL_MM_EvtDone>
 8010b6e:	e004      	b.n	8010b7a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	4619      	mov	r1, r3
 8010b74:	480a      	ldr	r0, [pc, #40]	@ (8010ba0 <shci_user_evt_proc+0x90>)
 8010b76:	f000 fc67 	bl	8011448 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8010b7a:	4809      	ldr	r0, [pc, #36]	@ (8010ba0 <shci_user_evt_proc+0x90>)
 8010b7c:	f000 fc42 	bl	8011404 <LST_is_empty>
 8010b80:	4603      	mov	r3, r0
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d107      	bne.n	8010b96 <shci_user_evt_proc+0x86>
 8010b86:	4b07      	ldr	r3, [pc, #28]	@ (8010ba4 <shci_user_evt_proc+0x94>)
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d003      	beq.n	8010b96 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8010b8e:	4804      	ldr	r0, [pc, #16]	@ (8010ba0 <shci_user_evt_proc+0x90>)
 8010b90:	f7f0 fdbe 	bl	8001710 <shci_notify_asynch_evt>
  }


  return;
 8010b94:	bf00      	nop
 8010b96:	bf00      	nop
}
 8010b98:	3710      	adds	r7, #16
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	200001bc 	.word	0x200001bc
 8010ba4:	200001cc 	.word	0x200001cc
 8010ba8:	20000564 	.word	0x20000564

08010bac <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b084      	sub	sp, #16
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	60ba      	str	r2, [r7, #8]
 8010bb4:	607b      	str	r3, [r7, #4]
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	81fb      	strh	r3, [r7, #14]
 8010bba:	460b      	mov	r3, r1
 8010bbc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8010bbe:	2000      	movs	r0, #0
 8010bc0:	f000 f868 	bl	8010c94 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8010bc4:	4b17      	ldr	r3, [pc, #92]	@ (8010c24 <shci_send+0x78>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	89fa      	ldrh	r2, [r7, #14]
 8010bca:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8010bce:	4b15      	ldr	r3, [pc, #84]	@ (8010c24 <shci_send+0x78>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	7b7a      	ldrb	r2, [r7, #13]
 8010bd4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8010bd6:	4b13      	ldr	r3, [pc, #76]	@ (8010c24 <shci_send+0x78>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	330c      	adds	r3, #12
 8010bdc:	7b7a      	ldrb	r2, [r7, #13]
 8010bde:	68b9      	ldr	r1, [r7, #8]
 8010be0:	4618      	mov	r0, r3
 8010be2:	f003 fdf8 	bl	80147d6 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8010be6:	4b10      	ldr	r3, [pc, #64]	@ (8010c28 <shci_send+0x7c>)
 8010be8:	2201      	movs	r2, #1
 8010bea:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8010bec:	4b0f      	ldr	r3, [pc, #60]	@ (8010c2c <shci_send+0x80>)
 8010bee:	691b      	ldr	r3, [r3, #16]
 8010bf0:	2100      	movs	r1, #0
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8010bf6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8010bfa:	f7f0 fda0 	bl	800173e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f103 0008 	add.w	r0, r3, #8
 8010c04:	4b07      	ldr	r3, [pc, #28]	@ (8010c24 <shci_send+0x78>)
 8010c06:	6819      	ldr	r1, [r3, #0]
 8010c08:	4b06      	ldr	r3, [pc, #24]	@ (8010c24 <shci_send+0x78>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	789b      	ldrb	r3, [r3, #2]
 8010c0e:	3303      	adds	r3, #3
 8010c10:	461a      	mov	r2, r3
 8010c12:	f003 fde0 	bl	80147d6 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8010c16:	2001      	movs	r0, #1
 8010c18:	f000 f83c 	bl	8010c94 <Cmd_SetStatus>

  return;
 8010c1c:	bf00      	nop
}
 8010c1e:	3710      	adds	r7, #16
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	200001c8 	.word	0x200001c8
 8010c28:	20000588 	.word	0x20000588
 8010c2c:	20000564 	.word	0x20000564

08010c30 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b086      	sub	sp, #24
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8010c38:	4a10      	ldr	r2, [pc, #64]	@ (8010c7c <TlInit+0x4c>)
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8010c3e:	4810      	ldr	r0, [pc, #64]	@ (8010c80 <TlInit+0x50>)
 8010c40:	f000 fbd0 	bl	80113e4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8010c44:	2001      	movs	r0, #1
 8010c46:	f000 f825 	bl	8010c94 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8010c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8010c84 <TlInit+0x54>)
 8010c4c:	2201      	movs	r2, #1
 8010c4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8010c50:	4b0d      	ldr	r3, [pc, #52]	@ (8010c88 <TlInit+0x58>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d00c      	beq.n	8010c72 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8010c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8010c8c <TlInit+0x5c>)
 8010c5e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8010c60:	4b0b      	ldr	r3, [pc, #44]	@ (8010c90 <TlInit+0x60>)
 8010c62:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8010c64:	4b08      	ldr	r3, [pc, #32]	@ (8010c88 <TlInit+0x58>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	f107 020c 	add.w	r2, r7, #12
 8010c6c:	4610      	mov	r0, r2
 8010c6e:	4798      	blx	r3
  }

  return;
 8010c70:	bf00      	nop
 8010c72:	bf00      	nop
}
 8010c74:	3718      	adds	r7, #24
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	200001c8 	.word	0x200001c8
 8010c80:	200001bc 	.word	0x200001bc
 8010c84:	200001cc 	.word	0x200001cc
 8010c88:	20000564 	.word	0x20000564
 8010c8c:	08010ce5 	.word	0x08010ce5
 8010c90:	08010cfd 	.word	0x08010cfd

08010c94 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8010c9e:	79fb      	ldrb	r3, [r7, #7]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d10b      	bne.n	8010cbc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8010ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8010cdc <Cmd_SetStatus+0x48>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d003      	beq.n	8010cb4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8010cac:	4b0b      	ldr	r3, [pc, #44]	@ (8010cdc <Cmd_SetStatus+0x48>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8010cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8010ce0 <Cmd_SetStatus+0x4c>)
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8010cba:	e00b      	b.n	8010cd4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8010cbc:	4b08      	ldr	r3, [pc, #32]	@ (8010ce0 <Cmd_SetStatus+0x4c>)
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8010cc2:	4b06      	ldr	r3, [pc, #24]	@ (8010cdc <Cmd_SetStatus+0x48>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d004      	beq.n	8010cd4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8010cca:	4b04      	ldr	r3, [pc, #16]	@ (8010cdc <Cmd_SetStatus+0x48>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	2001      	movs	r0, #1
 8010cd0:	4798      	blx	r3
  return;
 8010cd2:	bf00      	nop
 8010cd4:	bf00      	nop
}
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}
 8010cdc:	20000584 	.word	0x20000584
 8010ce0:	200001c4 	.word	0x200001c4

08010ce4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8010cec:	2000      	movs	r0, #0
 8010cee:	f7f0 fd1b 	bl	8001728 <shci_cmd_resp_release>

  return;
 8010cf2:	bf00      	nop
}
 8010cf4:	3708      	adds	r7, #8
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}
	...

08010cfc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8010d04:	6879      	ldr	r1, [r7, #4]
 8010d06:	4805      	ldr	r0, [pc, #20]	@ (8010d1c <TlUserEvtReceived+0x20>)
 8010d08:	f000 fbc4 	bl	8011494 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8010d0c:	4803      	ldr	r0, [pc, #12]	@ (8010d1c <TlUserEvtReceived+0x20>)
 8010d0e:	f7f0 fcff 	bl	8001710 <shci_notify_asynch_evt>

  return;
 8010d12:	bf00      	nop
}
 8010d14:	3708      	adds	r7, #8
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	200001bc 	.word	0x200001bc

08010d20 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8010d20:	b480      	push	{r7}
 8010d22:	b083      	sub	sp, #12
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	4a05      	ldr	r2, [pc, #20]	@ (8010d40 <shci_register_io_bus+0x20>)
 8010d2c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	4a04      	ldr	r2, [pc, #16]	@ (8010d44 <shci_register_io_bus+0x24>)
 8010d32:	611a      	str	r2, [r3, #16]

  return;
 8010d34:	bf00      	nop
}
 8010d36:	370c      	adds	r7, #12
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr
 8010d40:	08010edd 	.word	0x08010edd
 8010d44:	08010f31 	.word	0x08010f31

08010d48 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8010d4c:	f002 f9d4 	bl	80130f8 <HW_IPCC_Enable>

  return;
 8010d50:	bf00      	nop
}
 8010d52:	bd80      	pop	{r7, pc}

08010d54 <TL_Init>:


void TL_Init( void )
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8010d58:	4b10      	ldr	r3, [pc, #64]	@ (8010d9c <TL_Init+0x48>)
 8010d5a:	4a11      	ldr	r2, [pc, #68]	@ (8010da0 <TL_Init+0x4c>)
 8010d5c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8010d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8010d9c <TL_Init+0x48>)
 8010d60:	4a10      	ldr	r2, [pc, #64]	@ (8010da4 <TL_Init+0x50>)
 8010d62:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8010d64:	4b0d      	ldr	r3, [pc, #52]	@ (8010d9c <TL_Init+0x48>)
 8010d66:	4a10      	ldr	r2, [pc, #64]	@ (8010da8 <TL_Init+0x54>)
 8010d68:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8010d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8010d9c <TL_Init+0x48>)
 8010d6c:	4a0f      	ldr	r2, [pc, #60]	@ (8010dac <TL_Init+0x58>)
 8010d6e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8010d70:	4b0a      	ldr	r3, [pc, #40]	@ (8010d9c <TL_Init+0x48>)
 8010d72:	4a0f      	ldr	r2, [pc, #60]	@ (8010db0 <TL_Init+0x5c>)
 8010d74:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8010d76:	4b09      	ldr	r3, [pc, #36]	@ (8010d9c <TL_Init+0x48>)
 8010d78:	4a0e      	ldr	r2, [pc, #56]	@ (8010db4 <TL_Init+0x60>)
 8010d7a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8010d7c:	4b07      	ldr	r3, [pc, #28]	@ (8010d9c <TL_Init+0x48>)
 8010d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8010db8 <TL_Init+0x64>)
 8010d80:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8010d82:	4b06      	ldr	r3, [pc, #24]	@ (8010d9c <TL_Init+0x48>)
 8010d84:	4a0d      	ldr	r2, [pc, #52]	@ (8010dbc <TL_Init+0x68>)
 8010d86:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8010d88:	4b04      	ldr	r3, [pc, #16]	@ (8010d9c <TL_Init+0x48>)
 8010d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8010dc0 <TL_Init+0x6c>)
 8010d8c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8010d8e:	4b03      	ldr	r3, [pc, #12]	@ (8010d9c <TL_Init+0x48>)
 8010d90:	4a0c      	ldr	r2, [pc, #48]	@ (8010dc4 <TL_Init+0x70>)
 8010d92:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8010d94:	f002 f9c4 	bl	8013120 <HW_IPCC_Init>

  return;
 8010d98:	bf00      	nop
}
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	20030000 	.word	0x20030000
 8010da0:	20030028 	.word	0x20030028
 8010da4:	20030048 	.word	0x20030048
 8010da8:	20030058 	.word	0x20030058
 8010dac:	20030068 	.word	0x20030068
 8010db0:	20030070 	.word	0x20030070
 8010db4:	20030078 	.word	0x20030078
 8010db8:	20030080 	.word	0x20030080
 8010dbc:	2003009c 	.word	0x2003009c
 8010dc0:	200300a0 	.word	0x200300a0
 8010dc4:	200300ac 	.word	0x200300ac

08010dc8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b084      	sub	sp, #16
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8010dd4:	4811      	ldr	r0, [pc, #68]	@ (8010e1c <TL_BLE_Init+0x54>)
 8010dd6:	f000 fb05 	bl	80113e4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8010dda:	4b11      	ldr	r3, [pc, #68]	@ (8010e20 <TL_BLE_Init+0x58>)
 8010ddc:	685b      	ldr	r3, [r3, #4]
 8010dde:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	689a      	ldr	r2, [r3, #8]
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	68da      	ldr	r2, [r3, #12]
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	4a0c      	ldr	r2, [pc, #48]	@ (8010e24 <TL_BLE_Init+0x5c>)
 8010df4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	4a08      	ldr	r2, [pc, #32]	@ (8010e1c <TL_BLE_Init+0x54>)
 8010dfa:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8010dfc:	f002 f9a6 	bl	801314c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	4a08      	ldr	r2, [pc, #32]	@ (8010e28 <TL_BLE_Init+0x60>)
 8010e06:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	685b      	ldr	r3, [r3, #4]
 8010e0c:	4a07      	ldr	r2, [pc, #28]	@ (8010e2c <TL_BLE_Init+0x64>)
 8010e0e:	6013      	str	r3, [r2, #0]

  return 0;
 8010e10:	2300      	movs	r3, #0
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3710      	adds	r7, #16
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	200300c8 	.word	0x200300c8
 8010e20:	20030000 	.word	0x20030000
 8010e24:	20030a58 	.word	0x20030a58
 8010e28:	20000594 	.word	0x20000594
 8010e2c:	20000598 	.word	0x20000598

08010e30 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	460b      	mov	r3, r1
 8010e3a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8010e3c:	4b09      	ldr	r3, [pc, #36]	@ (8010e64 <TL_BLE_SendCmd+0x34>)
 8010e3e:	685b      	ldr	r3, [r3, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	2201      	movs	r2, #1
 8010e44:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8010e46:	4b07      	ldr	r3, [pc, #28]	@ (8010e64 <TL_BLE_SendCmd+0x34>)
 8010e48:	685b      	ldr	r3, [r3, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	2001      	movs	r0, #1
 8010e50:	f000 f96c 	bl	801112c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8010e54:	f002 f984 	bl	8013160 <HW_IPCC_BLE_SendCmd>

  return 0;
 8010e58:	2300      	movs	r3, #0
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3708      	adds	r7, #8
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	20030000 	.word	0x20030000

08010e68 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8010e6e:	e01c      	b.n	8010eaa <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8010e70:	1d3b      	adds	r3, r7, #4
 8010e72:	4619      	mov	r1, r3
 8010e74:	4812      	ldr	r0, [pc, #72]	@ (8010ec0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8010e76:	f000 fb54 	bl	8011522 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	7a5b      	ldrb	r3, [r3, #9]
 8010e7e:	2b0f      	cmp	r3, #15
 8010e80:	d003      	beq.n	8010e8a <HW_IPCC_BLE_RxEvtNot+0x22>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	7a5b      	ldrb	r3, [r3, #9]
 8010e86:	2b0e      	cmp	r3, #14
 8010e88:	d105      	bne.n	8010e96 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	2002      	movs	r0, #2
 8010e90:	f000 f94c 	bl	801112c <OutputDbgTrace>
 8010e94:	e004      	b.n	8010ea0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	4619      	mov	r1, r3
 8010e9a:	2003      	movs	r0, #3
 8010e9c:	f000 f946 	bl	801112c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8010ea0:	4b08      	ldr	r3, [pc, #32]	@ (8010ec4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	687a      	ldr	r2, [r7, #4]
 8010ea6:	4610      	mov	r0, r2
 8010ea8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8010eaa:	4805      	ldr	r0, [pc, #20]	@ (8010ec0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8010eac:	f000 faaa 	bl	8011404 <LST_is_empty>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d0dc      	beq.n	8010e70 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8010eb6:	bf00      	nop
}
 8010eb8:	3708      	adds	r7, #8
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	200300c8 	.word	0x200300c8
 8010ec4:	20000594 	.word	0x20000594

08010ec8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8010ecc:	4b02      	ldr	r3, [pc, #8]	@ (8010ed8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	4798      	blx	r3

  return;
 8010ed2:	bf00      	nop
}
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	20000598 	.word	0x20000598

08010edc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b084      	sub	sp, #16
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8010ee8:	480d      	ldr	r0, [pc, #52]	@ (8010f20 <TL_SYS_Init+0x44>)
 8010eea:	f000 fa7b 	bl	80113e4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8010eee:	4b0d      	ldr	r3, [pc, #52]	@ (8010f24 <TL_SYS_Init+0x48>)
 8010ef0:	68db      	ldr	r3, [r3, #12]
 8010ef2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	689a      	ldr	r2, [r3, #8]
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	4a08      	ldr	r2, [pc, #32]	@ (8010f20 <TL_SYS_Init+0x44>)
 8010f00:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8010f02:	f002 f94f 	bl	80131a4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4a07      	ldr	r2, [pc, #28]	@ (8010f28 <TL_SYS_Init+0x4c>)
 8010f0c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	685b      	ldr	r3, [r3, #4]
 8010f12:	4a06      	ldr	r2, [pc, #24]	@ (8010f2c <TL_SYS_Init+0x50>)
 8010f14:	6013      	str	r3, [r2, #0]

  return 0;
 8010f16:	2300      	movs	r3, #0
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3710      	adds	r7, #16
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}
 8010f20:	200300d0 	.word	0x200300d0
 8010f24:	20030000 	.word	0x20030000
 8010f28:	2000059c 	.word	0x2000059c
 8010f2c:	200005a0 	.word	0x200005a0

08010f30 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b082      	sub	sp, #8
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	460b      	mov	r3, r1
 8010f3a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8010f3c:	4b09      	ldr	r3, [pc, #36]	@ (8010f64 <TL_SYS_SendCmd+0x34>)
 8010f3e:	68db      	ldr	r3, [r3, #12]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	2210      	movs	r2, #16
 8010f44:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8010f46:	4b07      	ldr	r3, [pc, #28]	@ (8010f64 <TL_SYS_SendCmd+0x34>)
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	2004      	movs	r0, #4
 8010f50:	f000 f8ec 	bl	801112c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8010f54:	f002 f930 	bl	80131b8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8010f58:	2300      	movs	r3, #0
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3708      	adds	r7, #8
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	20030000 	.word	0x20030000

08010f68 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010f6c:	4b07      	ldr	r3, [pc, #28]	@ (8010f8c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010f6e:	68db      	ldr	r3, [r3, #12]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	4619      	mov	r1, r3
 8010f74:	2005      	movs	r0, #5
 8010f76:	f000 f8d9 	bl	801112c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010f7a:	4b05      	ldr	r3, [pc, #20]	@ (8010f90 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	4a03      	ldr	r2, [pc, #12]	@ (8010f8c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010f80:	68d2      	ldr	r2, [r2, #12]
 8010f82:	6812      	ldr	r2, [r2, #0]
 8010f84:	4610      	mov	r0, r2
 8010f86:	4798      	blx	r3

  return;
 8010f88:	bf00      	nop
}
 8010f8a:	bd80      	pop	{r7, pc}
 8010f8c:	20030000 	.word	0x20030000
 8010f90:	2000059c 	.word	0x2000059c

08010f94 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b082      	sub	sp, #8
 8010f98:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8010f9a:	e00e      	b.n	8010fba <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8010f9c:	1d3b      	adds	r3, r7, #4
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	480b      	ldr	r0, [pc, #44]	@ (8010fd0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010fa2:	f000 fabe 	bl	8011522 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	4619      	mov	r1, r3
 8010faa:	2006      	movs	r0, #6
 8010fac:	f000 f8be 	bl	801112c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8010fb0:	4b08      	ldr	r3, [pc, #32]	@ (8010fd4 <HW_IPCC_SYS_EvtNot+0x40>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	687a      	ldr	r2, [r7, #4]
 8010fb6:	4610      	mov	r0, r2
 8010fb8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8010fba:	4805      	ldr	r0, [pc, #20]	@ (8010fd0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010fbc:	f000 fa22 	bl	8011404 <LST_is_empty>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d0ea      	beq.n	8010f9c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8010fc6:	bf00      	nop
}
 8010fc8:	3708      	adds	r7, #8
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	200300d0 	.word	0x200300d0
 8010fd4:	200005a0 	.word	0x200005a0

08010fd8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8010fe0:	4817      	ldr	r0, [pc, #92]	@ (8011040 <TL_MM_Init+0x68>)
 8010fe2:	f000 f9ff 	bl	80113e4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8010fe6:	4817      	ldr	r0, [pc, #92]	@ (8011044 <TL_MM_Init+0x6c>)
 8010fe8:	f000 f9fc 	bl	80113e4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8010fec:	4b16      	ldr	r3, [pc, #88]	@ (8011048 <TL_MM_Init+0x70>)
 8010fee:	691b      	ldr	r3, [r3, #16]
 8010ff0:	4a16      	ldr	r2, [pc, #88]	@ (801104c <TL_MM_Init+0x74>)
 8010ff2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8010ff4:	4b15      	ldr	r3, [pc, #84]	@ (801104c <TL_MM_Init+0x74>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	687a      	ldr	r2, [r7, #4]
 8010ffa:	6892      	ldr	r2, [r2, #8]
 8010ffc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8010ffe:	4b13      	ldr	r3, [pc, #76]	@ (801104c <TL_MM_Init+0x74>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	68d2      	ldr	r2, [r2, #12]
 8011006:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8011008:	4b10      	ldr	r3, [pc, #64]	@ (801104c <TL_MM_Init+0x74>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	4a0c      	ldr	r2, [pc, #48]	@ (8011040 <TL_MM_Init+0x68>)
 801100e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8011010:	4b0e      	ldr	r3, [pc, #56]	@ (801104c <TL_MM_Init+0x74>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	687a      	ldr	r2, [r7, #4]
 8011016:	6812      	ldr	r2, [r2, #0]
 8011018:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801101a:	4b0c      	ldr	r3, [pc, #48]	@ (801104c <TL_MM_Init+0x74>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	687a      	ldr	r2, [r7, #4]
 8011020:	6852      	ldr	r2, [r2, #4]
 8011022:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8011024:	4b09      	ldr	r3, [pc, #36]	@ (801104c <TL_MM_Init+0x74>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	687a      	ldr	r2, [r7, #4]
 801102a:	6912      	ldr	r2, [r2, #16]
 801102c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801102e:	4b07      	ldr	r3, [pc, #28]	@ (801104c <TL_MM_Init+0x74>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	6952      	ldr	r2, [r2, #20]
 8011036:	619a      	str	r2, [r3, #24]

  return;
 8011038:	bf00      	nop
}
 801103a:	3708      	adds	r7, #8
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	200300b8 	.word	0x200300b8
 8011044:	2000058c 	.word	0x2000058c
 8011048:	20030000 	.word	0x20030000
 801104c:	200005a4 	.word	0x200005a4

08011050 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b082      	sub	sp, #8
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8011058:	6879      	ldr	r1, [r7, #4]
 801105a:	4807      	ldr	r0, [pc, #28]	@ (8011078 <TL_MM_EvtDone+0x28>)
 801105c:	f000 fa1a 	bl	8011494 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8011060:	6879      	ldr	r1, [r7, #4]
 8011062:	2000      	movs	r0, #0
 8011064:	f000 f862 	bl	801112c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8011068:	4804      	ldr	r0, [pc, #16]	@ (801107c <TL_MM_EvtDone+0x2c>)
 801106a:	f002 f8cb 	bl	8013204 <HW_IPCC_MM_SendFreeBuf>

  return;
 801106e:	bf00      	nop
}
 8011070:	3708      	adds	r7, #8
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	2000058c 	.word	0x2000058c
 801107c:	08011081 	.word	0x08011081

08011080 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b082      	sub	sp, #8
 8011084:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8011086:	e00c      	b.n	80110a2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8011088:	1d3b      	adds	r3, r7, #4
 801108a:	4619      	mov	r1, r3
 801108c:	480a      	ldr	r0, [pc, #40]	@ (80110b8 <SendFreeBuf+0x38>)
 801108e:	f000 fa48 	bl	8011522 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8011092:	4b0a      	ldr	r3, [pc, #40]	@ (80110bc <SendFreeBuf+0x3c>)
 8011094:	691b      	ldr	r3, [r3, #16]
 8011096:	691b      	ldr	r3, [r3, #16]
 8011098:	687a      	ldr	r2, [r7, #4]
 801109a:	4611      	mov	r1, r2
 801109c:	4618      	mov	r0, r3
 801109e:	f000 f9f9 	bl	8011494 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80110a2:	4805      	ldr	r0, [pc, #20]	@ (80110b8 <SendFreeBuf+0x38>)
 80110a4:	f000 f9ae 	bl	8011404 <LST_is_empty>
 80110a8:	4603      	mov	r3, r0
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d0ec      	beq.n	8011088 <SendFreeBuf+0x8>
  }

  return;
 80110ae:	bf00      	nop
}
 80110b0:	3708      	adds	r7, #8
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}
 80110b6:	bf00      	nop
 80110b8:	2000058c 	.word	0x2000058c
 80110bc:	20030000 	.word	0x20030000

080110c0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80110c4:	4805      	ldr	r0, [pc, #20]	@ (80110dc <TL_TRACES_Init+0x1c>)
 80110c6:	f000 f98d 	bl	80113e4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80110ca:	4b05      	ldr	r3, [pc, #20]	@ (80110e0 <TL_TRACES_Init+0x20>)
 80110cc:	695b      	ldr	r3, [r3, #20]
 80110ce:	4a03      	ldr	r2, [pc, #12]	@ (80110dc <TL_TRACES_Init+0x1c>)
 80110d0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80110d2:	f002 f8cd 	bl	8013270 <HW_IPCC_TRACES_Init>

  return;
 80110d6:	bf00      	nop
}
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	200300c0 	.word	0x200300c0
 80110e0:	20030000 	.word	0x20030000

080110e4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80110ea:	e008      	b.n	80110fe <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80110ec:	1d3b      	adds	r3, r7, #4
 80110ee:	4619      	mov	r1, r3
 80110f0:	4808      	ldr	r0, [pc, #32]	@ (8011114 <HW_IPCC_TRACES_EvtNot+0x30>)
 80110f2:	f000 fa16 	bl	8011522 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	4618      	mov	r0, r3
 80110fa:	f000 f80d 	bl	8011118 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80110fe:	4805      	ldr	r0, [pc, #20]	@ (8011114 <HW_IPCC_TRACES_EvtNot+0x30>)
 8011100:	f000 f980 	bl	8011404 <LST_is_empty>
 8011104:	4603      	mov	r3, r0
 8011106:	2b00      	cmp	r3, #0
 8011108:	d0f0      	beq.n	80110ec <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 801110a:	bf00      	nop
}
 801110c:	3708      	adds	r7, #8
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	200300c0 	.word	0x200300c0

08011118 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8011118:	b480      	push	{r7}
 801111a:	b083      	sub	sp, #12
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8011120:	bf00      	nop
 8011122:	370c      	adds	r7, #12
 8011124:	46bd      	mov	sp, r7
 8011126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112a:	4770      	bx	lr

0801112c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 801112c:	b480      	push	{r7}
 801112e:	b085      	sub	sp, #20
 8011130:	af00      	add	r7, sp, #0
 8011132:	4603      	mov	r3, r0
 8011134:	6039      	str	r1, [r7, #0]
 8011136:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8011138:	79fb      	ldrb	r3, [r7, #7]
 801113a:	2b06      	cmp	r3, #6
 801113c:	d845      	bhi.n	80111ca <OutputDbgTrace+0x9e>
 801113e:	a201      	add	r2, pc, #4	@ (adr r2, 8011144 <OutputDbgTrace+0x18>)
 8011140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011144:	08011161 	.word	0x08011161
 8011148:	08011185 	.word	0x08011185
 801114c:	0801118b 	.word	0x0801118b
 8011150:	0801119f 	.word	0x0801119f
 8011154:	080111ab 	.word	0x080111ab
 8011158:	080111b1 	.word	0x080111b1
 801115c:	080111bf 	.word	0x080111bf
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	7a5b      	ldrb	r3, [r3, #9]
 8011168:	2bff      	cmp	r3, #255	@ 0xff
 801116a:	d005      	beq.n	8011178 <OutputDbgTrace+0x4c>
 801116c:	2bff      	cmp	r3, #255	@ 0xff
 801116e:	dc05      	bgt.n	801117c <OutputDbgTrace+0x50>
 8011170:	2b0e      	cmp	r3, #14
 8011172:	d005      	beq.n	8011180 <OutputDbgTrace+0x54>
 8011174:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8011176:	e001      	b.n	801117c <OutputDbgTrace+0x50>
          break;
 8011178:	bf00      	nop
 801117a:	e027      	b.n	80111cc <OutputDbgTrace+0xa0>
          break;
 801117c:	bf00      	nop
 801117e:	e025      	b.n	80111cc <OutputDbgTrace+0xa0>
          break;
 8011180:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8011182:	e023      	b.n	80111cc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8011188:	e020      	b.n	80111cc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	7a5b      	ldrb	r3, [r3, #9]
 8011192:	2b0e      	cmp	r3, #14
 8011194:	d001      	beq.n	801119a <OutputDbgTrace+0x6e>
 8011196:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8011198:	e000      	b.n	801119c <OutputDbgTrace+0x70>
          break;
 801119a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801119c:	e016      	b.n	80111cc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	7a5b      	ldrb	r3, [r3, #9]
 80111a6:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80111a8:	e010      	b.n	80111cc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80111ae:	e00d      	b.n	80111cc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	7a5b      	ldrb	r3, [r3, #9]
 80111b8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80111ba:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80111bc:	e006      	b.n	80111cc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	7a5b      	ldrb	r3, [r3, #9]
 80111c6:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80111c8:	e000      	b.n	80111cc <OutputDbgTrace+0xa0>

    default:
      break;
 80111ca:	bf00      	nop
  }

  return;
 80111cc:	bf00      	nop
}
 80111ce:	3714      	adds	r7, #20
 80111d0:	46bd      	mov	sp, r7
 80111d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d6:	4770      	bx	lr

080111d8 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b084      	sub	sp, #16
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 80111e4:	215c      	movs	r1, #92	@ 0x5c
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f003 fa6c 	bl	80146c4 <strrchr>
 80111ec:	4603      	mov	r3, r0
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d007      	beq.n	8011202 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 80111f2:	215c      	movs	r1, #92	@ 0x5c
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f003 fa65 	bl	80146c4 <strrchr>
 80111fa:	4603      	mov	r3, r0
 80111fc:	3301      	adds	r3, #1
 80111fe:	60fb      	str	r3, [r7, #12]
 8011200:	e00d      	b.n	801121e <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 8011202:	212f      	movs	r1, #47	@ 0x2f
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f003 fa5d 	bl	80146c4 <strrchr>
 801120a:	4603      	mov	r3, r0
 801120c:	2b00      	cmp	r3, #0
 801120e:	d006      	beq.n	801121e <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8011210:	212f      	movs	r1, #47	@ 0x2f
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f003 fa56 	bl	80146c4 <strrchr>
 8011218:	4603      	mov	r3, r0
 801121a:	3301      	adds	r3, #1
 801121c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801121e:	68fb      	ldr	r3, [r7, #12]
}
 8011220:	4618      	mov	r0, r3
 8011222:	3710      	adds	r7, #16
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}

08011228 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b086      	sub	sp, #24
 801122c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801122e:	f3ef 8310 	mrs	r3, PRIMASK
 8011232:	60fb      	str	r3, [r7, #12]
  return(result);
 8011234:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8011236:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011238:	b672      	cpsid	i
}
 801123a:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 801123c:	1cbb      	adds	r3, r7, #2
 801123e:	4619      	mov	r1, r3
 8011240:	4812      	ldr	r0, [pc, #72]	@ (801128c <DbgTrace_TxCpltCallback+0x64>)
 8011242:	f000 fbe5 	bl	8011a10 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8011246:	1cbb      	adds	r3, r7, #2
 8011248:	4619      	mov	r1, r3
 801124a:	4810      	ldr	r0, [pc, #64]	@ (801128c <DbgTrace_TxCpltCallback+0x64>)
 801124c:	f000 fccf 	bl	8011bee <CircularQueue_Sense>
 8011250:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d00c      	beq.n	8011272 <DbgTrace_TxCpltCallback+0x4a>
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	f383 8810 	msr	PRIMASK, r3
}
 8011262:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8011264:	887b      	ldrh	r3, [r7, #2]
 8011266:	4a0a      	ldr	r2, [pc, #40]	@ (8011290 <DbgTrace_TxCpltCallback+0x68>)
 8011268:	4619      	mov	r1, r3
 801126a:	6938      	ldr	r0, [r7, #16]
 801126c:	f7ef fe81 	bl	8000f72 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8011270:	e008      	b.n	8011284 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8011272:	4b08      	ldr	r3, [pc, #32]	@ (8011294 <DbgTrace_TxCpltCallback+0x6c>)
 8011274:	2201      	movs	r2, #1
 8011276:	701a      	strb	r2, [r3, #0]
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f383 8810 	msr	PRIMASK, r3
}
 8011282:	bf00      	nop
}
 8011284:	bf00      	nop
 8011286:	3718      	adds	r7, #24
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	200005a8 	.word	0x200005a8
 8011290:	08011229 	.word	0x08011229
 8011294:	2000009e 	.word	0x2000009e

08011298 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 801129e:	f7ef fe62 	bl	8000f66 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80112a2:	2302      	movs	r3, #2
 80112a4:	9300      	str	r3, [sp, #0]
 80112a6:	2300      	movs	r3, #0
 80112a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80112ac:	4903      	ldr	r1, [pc, #12]	@ (80112bc <DbgTraceInit+0x24>)
 80112ae:	4804      	ldr	r0, [pc, #16]	@ (80112c0 <DbgTraceInit+0x28>)
 80112b0:	f000 f956 	bl	8011560 <CircularQueue_Init>
#endif 
#endif
  return;
 80112b4:	bf00      	nop
}
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}
 80112ba:	bf00      	nop
 80112bc:	200005c8 	.word	0x200005c8
 80112c0:	200005a8 	.word	0x200005a8

080112c4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b084      	sub	sp, #16
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	60f8      	str	r0, [r7, #12]
 80112cc:	60b9      	str	r1, [r7, #8]
 80112ce:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80112d0:	687a      	ldr	r2, [r7, #4]
 80112d2:	68b9      	ldr	r1, [r7, #8]
 80112d4:	68f8      	ldr	r0, [r7, #12]
 80112d6:	f000 f805 	bl	80112e4 <DbgTraceWrite>
 80112da:	4603      	mov	r3, r0
}
 80112dc:	4618      	mov	r0, r3
 80112de:	3710      	adds	r7, #16
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}

080112e4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b08a      	sub	sp, #40	@ 0x28
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	60f8      	str	r0, [r7, #12]
 80112ec:	60b9      	str	r1, [r7, #8]
 80112ee:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 80112f0:	2300      	movs	r3, #0
 80112f2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80112f4:	f3ef 8310 	mrs	r3, PRIMASK
 80112f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80112fa:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80112fc:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011304:	d102      	bne.n	801130c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8011306:	2300      	movs	r3, #0
 8011308:	627b      	str	r3, [r7, #36]	@ 0x24
 801130a:	e037      	b.n	801137c <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	2b01      	cmp	r3, #1
 8011310:	d006      	beq.n	8011320 <DbgTraceWrite+0x3c>
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2b02      	cmp	r3, #2
 8011316:	d003      	beq.n	8011320 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8011318:	f04f 33ff 	mov.w	r3, #4294967295
 801131c:	627b      	str	r3, [r7, #36]	@ 0x24
 801131e:	e02d      	b.n	801137c <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d02a      	beq.n	801137c <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 801132a:	b672      	cpsid	i
}
 801132c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	b29a      	uxth	r2, r3
 8011332:	2301      	movs	r3, #1
 8011334:	68b9      	ldr	r1, [r7, #8]
 8011336:	4814      	ldr	r0, [pc, #80]	@ (8011388 <DbgTraceWrite+0xa4>)
 8011338:	f000 f944 	bl	80115c4 <CircularQueue_Add>
 801133c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 801133e:	69fb      	ldr	r3, [r7, #28]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d015      	beq.n	8011370 <DbgTraceWrite+0x8c>
 8011344:	4b11      	ldr	r3, [pc, #68]	@ (801138c <DbgTraceWrite+0xa8>)
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	b2db      	uxtb	r3, r3
 801134a:	2b00      	cmp	r3, #0
 801134c:	d010      	beq.n	8011370 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 801134e:	4b0f      	ldr	r3, [pc, #60]	@ (801138c <DbgTraceWrite+0xa8>)
 8011350:	2200      	movs	r2, #0
 8011352:	701a      	strb	r2, [r3, #0]
 8011354:	6a3b      	ldr	r3, [r7, #32]
 8011356:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	f383 8810 	msr	PRIMASK, r3
}
 801135e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	b29b      	uxth	r3, r3
 8011364:	4a0a      	ldr	r2, [pc, #40]	@ (8011390 <DbgTraceWrite+0xac>)
 8011366:	4619      	mov	r1, r3
 8011368:	69f8      	ldr	r0, [r7, #28]
 801136a:	f7ef fe02 	bl	8000f72 <DbgOutputTraces>
 801136e:	e005      	b.n	801137c <DbgTraceWrite+0x98>
 8011370:	6a3b      	ldr	r3, [r7, #32]
 8011372:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011374:	693b      	ldr	r3, [r7, #16]
 8011376:	f383 8810 	msr	PRIMASK, r3
}
 801137a:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 801137c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801137e:	4618      	mov	r0, r3
 8011380:	3728      	adds	r7, #40	@ 0x28
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}
 8011386:	bf00      	nop
 8011388:	200005a8 	.word	0x200005a8
 801138c:	2000009e 	.word	0x2000009e
 8011390:	08011229 	.word	0x08011229

08011394 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8011394:	b480      	push	{r7}
 8011396:	b085      	sub	sp, #20
 8011398:	af00      	add	r7, sp, #0
 801139a:	4603      	mov	r3, r0
 801139c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 801139e:	4b0f      	ldr	r3, [pc, #60]	@ (80113dc <OTP_Read+0x48>)
 80113a0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80113a2:	e002      	b.n	80113aa <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	3b08      	subs	r3, #8
 80113a8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	3307      	adds	r3, #7
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	79fa      	ldrb	r2, [r7, #7]
 80113b2:	429a      	cmp	r2, r3
 80113b4:	d003      	beq.n	80113be <OTP_Read+0x2a>
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	4a09      	ldr	r2, [pc, #36]	@ (80113e0 <OTP_Read+0x4c>)
 80113ba:	4293      	cmp	r3, r2
 80113bc:	d1f2      	bne.n	80113a4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	3307      	adds	r3, #7
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	79fa      	ldrb	r2, [r7, #7]
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d001      	beq.n	80113ce <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80113ca:	2300      	movs	r3, #0
 80113cc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80113ce:	68fb      	ldr	r3, [r7, #12]
}
 80113d0:	4618      	mov	r0, r3
 80113d2:	3714      	adds	r7, #20
 80113d4:	46bd      	mov	sp, r7
 80113d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113da:	4770      	bx	lr
 80113dc:	1fff73f8 	.word	0x1fff73f8
 80113e0:	1fff7000 	.word	0x1fff7000

080113e4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80113e4:	b480      	push	{r7}
 80113e6:	b083      	sub	sp, #12
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	687a      	ldr	r2, [r7, #4]
 80113f0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	687a      	ldr	r2, [r7, #4]
 80113f6:	605a      	str	r2, [r3, #4]
}
 80113f8:	bf00      	nop
 80113fa:	370c      	adds	r7, #12
 80113fc:	46bd      	mov	sp, r7
 80113fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011402:	4770      	bx	lr

08011404 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8011404:	b480      	push	{r7}
 8011406:	b087      	sub	sp, #28
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801140c:	f3ef 8310 	mrs	r3, PRIMASK
 8011410:	60fb      	str	r3, [r7, #12]
  return(result);
 8011412:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011414:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8011416:	b672      	cpsid	i
}
 8011418:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	429a      	cmp	r2, r3
 8011422:	d102      	bne.n	801142a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8011424:	2301      	movs	r3, #1
 8011426:	75fb      	strb	r3, [r7, #23]
 8011428:	e001      	b.n	801142e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 801142a:	2300      	movs	r3, #0
 801142c:	75fb      	strb	r3, [r7, #23]
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	f383 8810 	msr	PRIMASK, r3
}
 8011438:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 801143a:	7dfb      	ldrb	r3, [r7, #23]
}
 801143c:	4618      	mov	r0, r3
 801143e:	371c      	adds	r7, #28
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr

08011448 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8011448:	b480      	push	{r7}
 801144a:	b087      	sub	sp, #28
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011452:	f3ef 8310 	mrs	r3, PRIMASK
 8011456:	60fb      	str	r3, [r7, #12]
  return(result);
 8011458:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801145a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801145c:	b672      	cpsid	i
}
 801145e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681a      	ldr	r2, [r3, #0]
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	683a      	ldr	r2, [r7, #0]
 8011472:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	683a      	ldr	r2, [r7, #0]
 801147a:	605a      	str	r2, [r3, #4]
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	f383 8810 	msr	PRIMASK, r3
}
 8011486:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011488:	bf00      	nop
 801148a:	371c      	adds	r7, #28
 801148c:	46bd      	mov	sp, r7
 801148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011492:	4770      	bx	lr

08011494 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8011494:	b480      	push	{r7}
 8011496:	b087      	sub	sp, #28
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801149e:	f3ef 8310 	mrs	r3, PRIMASK
 80114a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80114a4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80114a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80114a8:	b672      	cpsid	i
}
 80114aa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	685a      	ldr	r2, [r3, #4]
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	683a      	ldr	r2, [r7, #0]
 80114be:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	683a      	ldr	r2, [r7, #0]
 80114c6:	601a      	str	r2, [r3, #0]
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	f383 8810 	msr	PRIMASK, r3
}
 80114d2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80114d4:	bf00      	nop
 80114d6:	371c      	adds	r7, #28
 80114d8:	46bd      	mov	sp, r7
 80114da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114de:	4770      	bx	lr

080114e0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80114e0:	b480      	push	{r7}
 80114e2:	b087      	sub	sp, #28
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114e8:	f3ef 8310 	mrs	r3, PRIMASK
 80114ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80114ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80114f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80114f2:	b672      	cpsid	i
}
 80114f4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	685b      	ldr	r3, [r3, #4]
 80114fa:	687a      	ldr	r2, [r7, #4]
 80114fc:	6812      	ldr	r2, [r2, #0]
 80114fe:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	687a      	ldr	r2, [r7, #4]
 8011506:	6852      	ldr	r2, [r2, #4]
 8011508:	605a      	str	r2, [r3, #4]
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	f383 8810 	msr	PRIMASK, r3
}
 8011514:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011516:	bf00      	nop
 8011518:	371c      	adds	r7, #28
 801151a:	46bd      	mov	sp, r7
 801151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011520:	4770      	bx	lr

08011522 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8011522:	b580      	push	{r7, lr}
 8011524:	b086      	sub	sp, #24
 8011526:	af00      	add	r7, sp, #0
 8011528:	6078      	str	r0, [r7, #4]
 801152a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801152c:	f3ef 8310 	mrs	r3, PRIMASK
 8011530:	60fb      	str	r3, [r7, #12]
  return(result);
 8011532:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011534:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011536:	b672      	cpsid	i
}
 8011538:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681a      	ldr	r2, [r3, #0]
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	4618      	mov	r0, r3
 8011548:	f7ff ffca 	bl	80114e0 <LST_remove_node>
 801154c:	697b      	ldr	r3, [r7, #20]
 801154e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	f383 8810 	msr	PRIMASK, r3
}
 8011556:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011558:	bf00      	nop
 801155a:	3718      	adds	r7, #24
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8011560:	b480      	push	{r7}
 8011562:	b085      	sub	sp, #20
 8011564:	af00      	add	r7, sp, #0
 8011566:	60f8      	str	r0, [r7, #12]
 8011568:	60b9      	str	r1, [r7, #8]
 801156a:	607a      	str	r2, [r7, #4]
 801156c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	68ba      	ldr	r2, [r7, #8]
 8011572:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	2200      	movs	r2, #0
 8011578:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	2200      	movs	r2, #0
 801157e:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	2200      	movs	r2, #0
 8011584:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	2200      	movs	r2, #0
 801158a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	687a      	ldr	r2, [r7, #4]
 8011590:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	887a      	ldrh	r2, [r7, #2]
 8011596:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	7e3a      	ldrb	r2, [r7, #24]
 801159c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 801159e:	7e3b      	ldrb	r3, [r7, #24]
 80115a0:	f003 0302 	and.w	r3, r3, #2
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d006      	beq.n	80115b6 <CircularQueue_Init+0x56>
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	891b      	ldrh	r3, [r3, #8]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d002      	beq.n	80115b6 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 80115b0:	f04f 33ff 	mov.w	r3, #4294967295
 80115b4:	e000      	b.n	80115b8 <CircularQueue_Init+0x58>
  }
  return 0;
 80115b6:	2300      	movs	r3, #0
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3714      	adds	r7, #20
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr

080115c4 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b08e      	sub	sp, #56	@ 0x38
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	60f8      	str	r0, [r7, #12]
 80115cc:	60b9      	str	r1, [r7, #8]
 80115ce:	603b      	str	r3, [r7, #0]
 80115d0:	4613      	mov	r3, r2
 80115d2:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 80115d4:	2300      	movs	r3, #0
 80115d6:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 80115d8:	2300      	movs	r3, #0
 80115da:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 80115dc:	2300      	movs	r3, #0
 80115de:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 80115e0:	2300      	movs	r3, #0
 80115e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80115e4:	2300      	movs	r3, #0
 80115e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 80115e8:	2300      	movs	r3, #0
 80115ea:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 80115ec:	2300      	movs	r3, #0
 80115ee:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	891b      	ldrh	r3, [r3, #8]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d101      	bne.n	80115fc <CircularQueue_Add+0x38>
 80115f8:	2302      	movs	r3, #2
 80115fa:	e000      	b.n	80115fe <CircularQueue_Add+0x3a>
 80115fc:	2300      	movs	r3, #0
 80115fe:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	695b      	ldr	r3, [r3, #20]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d029      	beq.n	801165c <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	891b      	ldrh	r3, [r3, #8]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d122      	bne.n	8011656 <CircularQueue_Add+0x92>
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	681a      	ldr	r2, [r3, #0]
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	691b      	ldr	r3, [r3, #16]
 8011618:	4413      	add	r3, r2
 801161a:	781b      	ldrb	r3, [r3, #0]
 801161c:	4618      	mov	r0, r3
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	681a      	ldr	r2, [r3, #0]
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	691b      	ldr	r3, [r3, #16]
 8011626:	1c59      	adds	r1, r3, #1
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	685b      	ldr	r3, [r3, #4]
 801162c:	4299      	cmp	r1, r3
 801162e:	d306      	bcc.n	801163e <CircularQueue_Add+0x7a>
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	6919      	ldr	r1, [r3, #16]
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	685b      	ldr	r3, [r3, #4]
 8011638:	1acb      	subs	r3, r1, r3
 801163a:	3301      	adds	r3, #1
 801163c:	e002      	b.n	8011644 <CircularQueue_Add+0x80>
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	691b      	ldr	r3, [r3, #16]
 8011642:	3301      	adds	r3, #1
 8011644:	4413      	add	r3, r2
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	021b      	lsls	r3, r3, #8
 801164a:	b29b      	uxth	r3, r3
 801164c:	4403      	add	r3, r0
 801164e:	b29b      	uxth	r3, r3
 8011650:	3302      	adds	r3, #2
 8011652:	b29b      	uxth	r3, r3
 8011654:	e001      	b.n	801165a <CircularQueue_Add+0x96>
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	891b      	ldrh	r3, [r3, #8]
 801165a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	891b      	ldrh	r3, [r3, #8]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d002      	beq.n	801166a <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	891b      	ldrh	r3, [r3, #8]
 8011668:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	691a      	ldr	r2, [r3, #16]
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	68db      	ldr	r3, [r3, #12]
 8011672:	429a      	cmp	r2, r3
 8011674:	d307      	bcc.n	8011686 <CircularQueue_Add+0xc2>
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	685a      	ldr	r2, [r3, #4]
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	6919      	ldr	r1, [r3, #16]
 801167e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011680:	440b      	add	r3, r1
 8011682:	1ad3      	subs	r3, r2, r3
 8011684:	e000      	b.n	8011688 <CircularQueue_Add+0xc4>
 8011686:	2300      	movs	r3, #0
 8011688:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 801168a:	88fa      	ldrh	r2, [r7, #6]
 801168c:	7ffb      	ldrb	r3, [r7, #31]
 801168e:	4413      	add	r3, r2
 8011690:	461a      	mov	r2, r3
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	fb02 f303 	mul.w	r3, r2, r3
 8011698:	69ba      	ldr	r2, [r7, #24]
 801169a:	429a      	cmp	r2, r3
 801169c:	d80b      	bhi.n	80116b6 <CircularQueue_Add+0xf2>
 801169e:	88fa      	ldrh	r2, [r7, #6]
 80116a0:	7ffb      	ldrb	r3, [r7, #31]
 80116a2:	4413      	add	r3, r2
 80116a4:	461a      	mov	r2, r3
 80116a6:	69bb      	ldr	r3, [r7, #24]
 80116a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80116ac:	fb01 f202 	mul.w	r2, r1, r2
 80116b0:	1a9b      	subs	r3, r3, r2
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	e000      	b.n	80116b8 <CircularQueue_Add+0xf4>
 80116b6:	2300      	movs	r3, #0
 80116b8:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 80116ba:	7dfa      	ldrb	r2, [r7, #23]
 80116bc:	7ffb      	ldrb	r3, [r7, #31]
 80116be:	429a      	cmp	r2, r3
 80116c0:	bf8c      	ite	hi
 80116c2:	2301      	movhi	r3, #1
 80116c4:	2300      	movls	r3, #0
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 80116ca:	7fbb      	ldrb	r3, [r7, #30]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d008      	beq.n	80116e2 <CircularQueue_Add+0x11e>
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	7f1b      	ldrb	r3, [r3, #28]
 80116d4:	f003 0301 	and.w	r3, r3, #1
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d002      	beq.n	80116e2 <CircularQueue_Add+0x11e>
 80116dc:	7dfb      	ldrb	r3, [r7, #23]
 80116de:	b29b      	uxth	r3, r3
 80116e0:	e000      	b.n	80116e4 <CircularQueue_Add+0x120>
 80116e2:	8bbb      	ldrh	r3, [r7, #28]
 80116e4:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 80116e6:	7fbb      	ldrb	r3, [r7, #30]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d008      	beq.n	80116fe <CircularQueue_Add+0x13a>
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	7f1b      	ldrb	r3, [r3, #28]
 80116f0:	f003 0302 	and.w	r3, r3, #2
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d002      	beq.n	80116fe <CircularQueue_Add+0x13a>
 80116f8:	7ffb      	ldrb	r3, [r7, #31]
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	e000      	b.n	8011700 <CircularQueue_Add+0x13c>
 80116fe:	8bbb      	ldrh	r3, [r7, #28]
 8011700:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8011702:	88fb      	ldrh	r3, [r7, #6]
 8011704:	2b00      	cmp	r3, #0
 8011706:	f000 817e 	beq.w	8011a06 <CircularQueue_Add+0x442>
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	695a      	ldr	r2, [r3, #20]
 801170e:	88f9      	ldrh	r1, [r7, #6]
 8011710:	7ffb      	ldrb	r3, [r7, #31]
 8011712:	440b      	add	r3, r1
 8011714:	4619      	mov	r1, r3
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	fb01 f303 	mul.w	r3, r1, r3
 801171c:	441a      	add	r2, r3
 801171e:	8bbb      	ldrh	r3, [r7, #28]
 8011720:	441a      	add	r2, r3
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	429a      	cmp	r2, r3
 8011728:	f200 816d 	bhi.w	8011a06 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 801172c:	2300      	movs	r3, #0
 801172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011730:	e14a      	b.n	80119c8 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	691a      	ldr	r2, [r3, #16]
 8011736:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011738:	441a      	add	r2, r3
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	429a      	cmp	r2, r3
 8011740:	d307      	bcc.n	8011752 <CircularQueue_Add+0x18e>
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	691a      	ldr	r2, [r3, #16]
 8011746:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011748:	441a      	add	r2, r3
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	1ad3      	subs	r3, r2, r3
 8011750:	e003      	b.n	801175a <CircularQueue_Add+0x196>
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	691a      	ldr	r2, [r3, #16]
 8011756:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011758:	4413      	add	r3, r2
 801175a:	68fa      	ldr	r2, [r7, #12]
 801175c:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	691b      	ldr	r3, [r3, #16]
 8011762:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	891b      	ldrh	r3, [r3, #8]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d130      	bne.n	80117ce <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	681a      	ldr	r2, [r3, #0]
 8011770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011772:	1c59      	adds	r1, r3, #1
 8011774:	6339      	str	r1, [r7, #48]	@ 0x30
 8011776:	4413      	add	r3, r2
 8011778:	88fa      	ldrh	r2, [r7, #6]
 801177a:	b2d2      	uxtb	r2, r2
 801177c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011784:	429a      	cmp	r2, r3
 8011786:	d304      	bcc.n	8011792 <CircularQueue_Add+0x1ce>
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	685b      	ldr	r3, [r3, #4]
 801178c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801178e:	1ad3      	subs	r3, r2, r3
 8011790:	e000      	b.n	8011794 <CircularQueue_Add+0x1d0>
 8011792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011794:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8011796:	88fb      	ldrh	r3, [r7, #6]
 8011798:	0a1b      	lsrs	r3, r3, #8
 801179a:	b298      	uxth	r0, r3
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	681a      	ldr	r2, [r3, #0]
 80117a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117a2:	1c59      	adds	r1, r3, #1
 80117a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80117a6:	4413      	add	r3, r2
 80117a8:	b2c2      	uxtb	r2, r0
 80117aa:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117b2:	429a      	cmp	r2, r3
 80117b4:	d304      	bcc.n	80117c0 <CircularQueue_Add+0x1fc>
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117bc:	1ad3      	subs	r3, r2, r3
 80117be:	e000      	b.n	80117c2 <CircularQueue_Add+0x1fe>
 80117c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117c2:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	695b      	ldr	r3, [r3, #20]
 80117c8:	1c9a      	adds	r2, r3, #2
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80117ce:	88fa      	ldrh	r2, [r7, #6]
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	6859      	ldr	r1, [r3, #4]
 80117d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117d6:	1acb      	subs	r3, r1, r3
 80117d8:	4293      	cmp	r3, r2
 80117da:	bf28      	it	cs
 80117dc:	4613      	movcs	r3, r2
 80117de:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 80117e0:	88fb      	ldrh	r3, [r7, #6]
 80117e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d007      	beq.n	80117f8 <CircularQueue_Add+0x234>
 80117e8:	88fb      	ldrh	r3, [r7, #6]
 80117ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d225      	bcs.n	801183c <CircularQueue_Add+0x278>
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	7f1b      	ldrb	r3, [r3, #28]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d121      	bne.n	801183c <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117fe:	18d0      	adds	r0, r2, r3
 8011800:	88fb      	ldrh	r3, [r7, #6]
 8011802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011804:	fb02 f303 	mul.w	r3, r2, r3
 8011808:	68ba      	ldr	r2, [r7, #8]
 801180a:	4413      	add	r3, r2
 801180c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801180e:	4619      	mov	r1, r3
 8011810:	f002 ffe1 	bl	80147d6 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	695a      	ldr	r2, [r3, #20]
 8011818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801181a:	441a      	add	r2, r3
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8011820:	2300      	movs	r3, #0
 8011822:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8011824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011826:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8011828:	88fa      	ldrh	r2, [r7, #6]
 801182a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801182c:	1ad3      	subs	r3, r2, r3
 801182e:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8011830:	7ffb      	ldrb	r3, [r7, #31]
 8011832:	b29a      	uxth	r2, r3
 8011834:	88fb      	ldrh	r3, [r7, #6]
 8011836:	4413      	add	r3, r2
 8011838:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801183a:	e0a4      	b.n	8011986 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 801183c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801183e:	2b00      	cmp	r3, #0
 8011840:	f000 80a1 	beq.w	8011986 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	7f1b      	ldrb	r3, [r3, #28]
 8011848:	f003 0301 	and.w	r3, r3, #1
 801184c:	2b00      	cmp	r3, #0
 801184e:	d03a      	beq.n	80118c6 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	891b      	ldrh	r3, [r3, #8]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d10d      	bne.n	8011874 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	681a      	ldr	r2, [r3, #0]
 801185c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801185e:	3b02      	subs	r3, #2
 8011860:	4413      	add	r3, r2
 8011862:	22ff      	movs	r2, #255	@ 0xff
 8011864:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	681a      	ldr	r2, [r3, #0]
 801186a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801186c:	3b01      	subs	r3, #1
 801186e:	4413      	add	r3, r2
 8011870:	22ff      	movs	r2, #255	@ 0xff
 8011872:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	695a      	ldr	r2, [r3, #20]
 8011878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801187a:	441a      	add	r2, r3
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8011880:	2300      	movs	r3, #0
 8011882:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8011884:	88fb      	ldrh	r3, [r7, #6]
 8011886:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8011888:	2300      	movs	r3, #0
 801188a:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	891b      	ldrh	r3, [r3, #8]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d16f      	bne.n	8011974 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	681a      	ldr	r2, [r3, #0]
 8011898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801189a:	1c59      	adds	r1, r3, #1
 801189c:	6339      	str	r1, [r7, #48]	@ 0x30
 801189e:	4413      	add	r3, r2
 80118a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80118a2:	b2d2      	uxtb	r2, r2
 80118a4:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80118a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118a8:	0a18      	lsrs	r0, r3, #8
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	681a      	ldr	r2, [r3, #0]
 80118ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118b0:	1c59      	adds	r1, r3, #1
 80118b2:	6339      	str	r1, [r7, #48]	@ 0x30
 80118b4:	4413      	add	r3, r2
 80118b6:	b2c2      	uxtb	r2, r0
 80118b8:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	695b      	ldr	r3, [r3, #20]
 80118be:	1c9a      	adds	r2, r3, #2
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	615a      	str	r2, [r3, #20]
 80118c4:	e056      	b.n	8011974 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	7f1b      	ldrb	r3, [r3, #28]
 80118ca:	f003 0302 	and.w	r3, r3, #2
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d050      	beq.n	8011974 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	891b      	ldrh	r3, [r3, #8]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d14a      	bne.n	8011970 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	681a      	ldr	r2, [r3, #0]
 80118de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118e0:	3b02      	subs	r3, #2
 80118e2:	4413      	add	r3, r2
 80118e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80118e6:	b2d2      	uxtb	r2, r2
 80118e8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80118ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118ec:	0a19      	lsrs	r1, r3, #8
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	681a      	ldr	r2, [r3, #0]
 80118f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118f4:	3b01      	subs	r3, #1
 80118f6:	4413      	add	r3, r2
 80118f8:	b2ca      	uxtb	r2, r1
 80118fa:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	681a      	ldr	r2, [r3, #0]
 8011900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011902:	18d0      	adds	r0, r2, r3
 8011904:	88fb      	ldrh	r3, [r7, #6]
 8011906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011908:	fb02 f303 	mul.w	r3, r2, r3
 801190c:	68ba      	ldr	r2, [r7, #8]
 801190e:	4413      	add	r3, r2
 8011910:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011912:	4619      	mov	r1, r3
 8011914:	f002 ff5f 	bl	80147d6 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	695a      	ldr	r2, [r3, #20]
 801191c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801191e:	441a      	add	r2, r3
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8011924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011926:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8011928:	88fa      	ldrh	r2, [r7, #6]
 801192a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801192c:	1ad3      	subs	r3, r2, r3
 801192e:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	699b      	ldr	r3, [r3, #24]
 8011934:	1c5a      	adds	r2, r3, #1
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 801193a:	2300      	movs	r3, #0
 801193c:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	681a      	ldr	r2, [r3, #0]
 8011942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011944:	1c59      	adds	r1, r3, #1
 8011946:	6339      	str	r1, [r7, #48]	@ 0x30
 8011948:	4413      	add	r3, r2
 801194a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801194c:	b2d2      	uxtb	r2, r2
 801194e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8011950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011952:	0a18      	lsrs	r0, r3, #8
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	681a      	ldr	r2, [r3, #0]
 8011958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801195a:	1c59      	adds	r1, r3, #1
 801195c:	6339      	str	r1, [r7, #48]	@ 0x30
 801195e:	4413      	add	r3, r2
 8011960:	b2c2      	uxtb	r2, r0
 8011962:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	695b      	ldr	r3, [r3, #20]
 8011968:	1c9a      	adds	r2, r3, #2
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	615a      	str	r2, [r3, #20]
 801196e:	e001      	b.n	8011974 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8011970:	2300      	movs	r3, #0
 8011972:	e049      	b.n	8011a08 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8011974:	7ffb      	ldrb	r3, [r7, #31]
 8011976:	b29a      	uxth	r2, r3
 8011978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801197a:	b29b      	uxth	r3, r3
 801197c:	4413      	add	r3, r2
 801197e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2200      	movs	r2, #0
 8011984:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8011986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011988:	2b00      	cmp	r3, #0
 801198a:	d015      	beq.n	80119b8 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	681a      	ldr	r2, [r3, #0]
 8011990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011992:	18d0      	adds	r0, r2, r3
 8011994:	88fb      	ldrh	r3, [r7, #6]
 8011996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011998:	fb03 f202 	mul.w	r2, r3, r2
 801199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801199e:	4413      	add	r3, r2
 80119a0:	68ba      	ldr	r2, [r7, #8]
 80119a2:	4413      	add	r3, r2
 80119a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80119a6:	4619      	mov	r1, r3
 80119a8:	f002 ff15 	bl	80147d6 <memcpy>
        q->byteCount += NbBytesToCopy;
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	695a      	ldr	r2, [r3, #20]
 80119b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119b2:	441a      	add	r2, r3
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	699b      	ldr	r3, [r3, #24]
 80119bc:	1c5a      	adds	r2, r3, #1
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 80119c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119c4:	3301      	adds	r3, #1
 80119c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80119c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	f4ff aeb0 	bcc.w	8011732 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	6919      	ldr	r1, [r3, #16]
 80119da:	7ffb      	ldrb	r3, [r7, #31]
 80119dc:	4419      	add	r1, r3
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	4299      	cmp	r1, r3
 80119e4:	d307      	bcc.n	80119f6 <CircularQueue_Add+0x432>
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	6919      	ldr	r1, [r3, #16]
 80119ea:	7ffb      	ldrb	r3, [r7, #31]
 80119ec:	4419      	add	r1, r3
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	685b      	ldr	r3, [r3, #4]
 80119f2:	1acb      	subs	r3, r1, r3
 80119f4:	e003      	b.n	80119fe <CircularQueue_Add+0x43a>
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	6919      	ldr	r1, [r3, #16]
 80119fa:	7ffb      	ldrb	r3, [r7, #31]
 80119fc:	440b      	add	r3, r1
 80119fe:	4413      	add	r3, r2
 8011a00:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8011a02:	6a3b      	ldr	r3, [r7, #32]
 8011a04:	e000      	b.n	8011a08 <CircularQueue_Add+0x444>
    return NULL;
 8011a06:	2300      	movs	r3, #0
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	3738      	adds	r7, #56	@ 0x38
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}

08011a10 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8011a10:	b480      	push	{r7}
 8011a12:	b085      	sub	sp, #20
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
 8011a18:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	891b      	ldrh	r3, [r3, #8]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d101      	bne.n	8011a2e <CircularQueue_Remove+0x1e>
 8011a2a:	2302      	movs	r3, #2
 8011a2c:	e000      	b.n	8011a30 <CircularQueue_Remove+0x20>
 8011a2e:	2300      	movs	r3, #0
 8011a30:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8011a32:	2300      	movs	r3, #0
 8011a34:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	695b      	ldr	r3, [r3, #20]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	f000 80ca 	beq.w	8011bd4 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	891b      	ldrh	r3, [r3, #8]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d120      	bne.n	8011a8a <CircularQueue_Remove+0x7a>
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681a      	ldr	r2, [r3, #0]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	68db      	ldr	r3, [r3, #12]
 8011a50:	4413      	add	r3, r2
 8011a52:	781b      	ldrb	r3, [r3, #0]
 8011a54:	4618      	mov	r0, r3
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681a      	ldr	r2, [r3, #0]
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	68db      	ldr	r3, [r3, #12]
 8011a5e:	1c59      	adds	r1, r3, #1
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	4299      	cmp	r1, r3
 8011a66:	d306      	bcc.n	8011a76 <CircularQueue_Remove+0x66>
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	68d9      	ldr	r1, [r3, #12]
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	1acb      	subs	r3, r1, r3
 8011a72:	3301      	adds	r3, #1
 8011a74:	e002      	b.n	8011a7c <CircularQueue_Remove+0x6c>
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	68db      	ldr	r3, [r3, #12]
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	4413      	add	r3, r2
 8011a7e:	781b      	ldrb	r3, [r3, #0]
 8011a80:	021b      	lsls	r3, r3, #8
 8011a82:	b29b      	uxth	r3, r3
 8011a84:	4403      	add	r3, r0
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	e001      	b.n	8011a8e <CircularQueue_Remove+0x7e>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	891b      	ldrh	r3, [r3, #8]
 8011a8e:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	7f1b      	ldrb	r3, [r3, #28]
 8011a94:	f003 0301 	and.w	r3, r3, #1
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d056      	beq.n	8011b4a <CircularQueue_Remove+0x13a>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	7f1b      	ldrb	r3, [r3, #28]
 8011aa0:	f003 0302 	and.w	r3, r3, #2
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d150      	bne.n	8011b4a <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8011aa8:	897b      	ldrh	r3, [r7, #10]
 8011aaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	d103      	bne.n	8011aba <CircularQueue_Remove+0xaa>
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	891b      	ldrh	r3, [r3, #8]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d012      	beq.n	8011ae0 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	68da      	ldr	r2, [r3, #12]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d941      	bls.n	8011b4a <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	891b      	ldrh	r3, [r3, #8]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d03d      	beq.n	8011b4a <CircularQueue_Remove+0x13a>
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	685a      	ldr	r2, [r3, #4]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	68db      	ldr	r3, [r3, #12]
 8011ad6:	1ad3      	subs	r3, r2, r3
 8011ad8:	687a      	ldr	r2, [r7, #4]
 8011ada:	8912      	ldrh	r2, [r2, #8]
 8011adc:	4293      	cmp	r3, r2
 8011ade:	d234      	bcs.n	8011b4a <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	695a      	ldr	r2, [r3, #20]
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	68d9      	ldr	r1, [r3, #12]
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	685b      	ldr	r3, [r3, #4]
 8011aec:	1acb      	subs	r3, r1, r3
 8011aee:	441a      	add	r2, r3
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2200      	movs	r2, #0
 8011af8:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	891b      	ldrh	r3, [r3, #8]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d120      	bne.n	8011b44 <CircularQueue_Remove+0x134>
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681a      	ldr	r2, [r3, #0]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	68db      	ldr	r3, [r3, #12]
 8011b0a:	4413      	add	r3, r2
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	4618      	mov	r0, r3
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681a      	ldr	r2, [r3, #0]
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	1c59      	adds	r1, r3, #1
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	4299      	cmp	r1, r3
 8011b20:	d306      	bcc.n	8011b30 <CircularQueue_Remove+0x120>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	68d9      	ldr	r1, [r3, #12]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	1acb      	subs	r3, r1, r3
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	e002      	b.n	8011b36 <CircularQueue_Remove+0x126>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	68db      	ldr	r3, [r3, #12]
 8011b34:	3301      	adds	r3, #1
 8011b36:	4413      	add	r3, r2
 8011b38:	781b      	ldrb	r3, [r3, #0]
 8011b3a:	021b      	lsls	r3, r3, #8
 8011b3c:	b29b      	uxth	r3, r3
 8011b3e:	4403      	add	r3, r0
 8011b40:	b29b      	uxth	r3, r3
 8011b42:	e001      	b.n	8011b48 <CircularQueue_Remove+0x138>
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	891b      	ldrh	r3, [r3, #8]
 8011b48:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	68d9      	ldr	r1, [r3, #12]
 8011b52:	7a7b      	ldrb	r3, [r7, #9]
 8011b54:	4419      	add	r1, r3
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	4299      	cmp	r1, r3
 8011b5c:	d307      	bcc.n	8011b6e <CircularQueue_Remove+0x15e>
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	68d9      	ldr	r1, [r3, #12]
 8011b62:	7a7b      	ldrb	r3, [r7, #9]
 8011b64:	4419      	add	r1, r3
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	685b      	ldr	r3, [r3, #4]
 8011b6a:	1acb      	subs	r3, r1, r3
 8011b6c:	e003      	b.n	8011b76 <CircularQueue_Remove+0x166>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	68d9      	ldr	r1, [r3, #12]
 8011b72:	7a7b      	ldrb	r3, [r7, #9]
 8011b74:	440b      	add	r3, r1
 8011b76:	4413      	add	r3, r2
 8011b78:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	695b      	ldr	r3, [r3, #20]
 8011b7e:	8979      	ldrh	r1, [r7, #10]
 8011b80:	7a7a      	ldrb	r2, [r7, #9]
 8011b82:	440a      	add	r2, r1
 8011b84:	1a9a      	subs	r2, r3, r2
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	695b      	ldr	r3, [r3, #20]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d01b      	beq.n	8011bca <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	68da      	ldr	r2, [r3, #12]
 8011b96:	897b      	ldrh	r3, [r7, #10]
 8011b98:	441a      	add	r2, r3
 8011b9a:	7a7b      	ldrb	r3, [r7, #9]
 8011b9c:	441a      	add	r2, r3
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	685b      	ldr	r3, [r3, #4]
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d309      	bcc.n	8011bba <CircularQueue_Remove+0x1aa>
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	68da      	ldr	r2, [r3, #12]
 8011baa:	897b      	ldrh	r3, [r7, #10]
 8011bac:	441a      	add	r2, r3
 8011bae:	7a7b      	ldrb	r3, [r7, #9]
 8011bb0:	441a      	add	r2, r3
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	685b      	ldr	r3, [r3, #4]
 8011bb6:	1ad3      	subs	r3, r2, r3
 8011bb8:	e005      	b.n	8011bc6 <CircularQueue_Remove+0x1b6>
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	68da      	ldr	r2, [r3, #12]
 8011bbe:	897b      	ldrh	r3, [r7, #10]
 8011bc0:	441a      	add	r2, r3
 8011bc2:	7a7b      	ldrb	r3, [r7, #9]
 8011bc4:	4413      	add	r3, r2
 8011bc6:	687a      	ldr	r2, [r7, #4]
 8011bc8:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	699b      	ldr	r3, [r3, #24]
 8011bce:	1e5a      	subs	r2, r3, #1
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d002      	beq.n	8011be0 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	897a      	ldrh	r2, [r7, #10]
 8011bde:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8011be0:	68fb      	ldr	r3, [r7, #12]
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3714      	adds	r7, #20
 8011be6:	46bd      	mov	sp, r7
 8011be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bec:	4770      	bx	lr

08011bee <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8011bee:	b480      	push	{r7}
 8011bf0:	b087      	sub	sp, #28
 8011bf2:	af00      	add	r7, sp, #0
 8011bf4:	6078      	str	r0, [r7, #4]
 8011bf6:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	891b      	ldrh	r3, [r3, #8]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d101      	bne.n	8011c0c <CircularQueue_Sense+0x1e>
 8011c08:	2302      	movs	r3, #2
 8011c0a:	e000      	b.n	8011c0e <CircularQueue_Sense+0x20>
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8011c10:	2300      	movs	r3, #0
 8011c12:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8011c14:	2300      	movs	r3, #0
 8011c16:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	695b      	ldr	r3, [r3, #20]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	f000 808e 	beq.w	8011d3e <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	68db      	ldr	r3, [r3, #12]
 8011c26:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	891b      	ldrh	r3, [r3, #8]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d120      	bne.n	8011c72 <CircularQueue_Sense+0x84>
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681a      	ldr	r2, [r3, #0]
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	4413      	add	r3, r2
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681a      	ldr	r2, [r3, #0]
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	68db      	ldr	r3, [r3, #12]
 8011c46:	1c59      	adds	r1, r3, #1
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	685b      	ldr	r3, [r3, #4]
 8011c4c:	4299      	cmp	r1, r3
 8011c4e:	d306      	bcc.n	8011c5e <CircularQueue_Sense+0x70>
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	68d9      	ldr	r1, [r3, #12]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	1acb      	subs	r3, r1, r3
 8011c5a:	3301      	adds	r3, #1
 8011c5c:	e002      	b.n	8011c64 <CircularQueue_Sense+0x76>
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	68db      	ldr	r3, [r3, #12]
 8011c62:	3301      	adds	r3, #1
 8011c64:	4413      	add	r3, r2
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	021b      	lsls	r3, r3, #8
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	4403      	add	r3, r0
 8011c6e:	b29b      	uxth	r3, r3
 8011c70:	e001      	b.n	8011c76 <CircularQueue_Sense+0x88>
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	891b      	ldrh	r3, [r3, #8]
 8011c76:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	7f1b      	ldrb	r3, [r3, #28]
 8011c7c:	f003 0301 	and.w	r3, r3, #1
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d047      	beq.n	8011d14 <CircularQueue_Sense+0x126>
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	7f1b      	ldrb	r3, [r3, #28]
 8011c88:	f003 0302 	and.w	r3, r3, #2
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d141      	bne.n	8011d14 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8011c90:	8a7b      	ldrh	r3, [r7, #18]
 8011c92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011c96:	4293      	cmp	r3, r2
 8011c98:	d103      	bne.n	8011ca2 <CircularQueue_Sense+0xb4>
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	891b      	ldrh	r3, [r3, #8]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d012      	beq.n	8011cc8 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	68da      	ldr	r2, [r3, #12]
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d932      	bls.n	8011d14 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	891b      	ldrh	r3, [r3, #8]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d02e      	beq.n	8011d14 <CircularQueue_Sense+0x126>
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	685a      	ldr	r2, [r3, #4]
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	68db      	ldr	r3, [r3, #12]
 8011cbe:	1ad3      	subs	r3, r2, r3
 8011cc0:	687a      	ldr	r2, [r7, #4]
 8011cc2:	8912      	ldrh	r2, [r2, #8]
 8011cc4:	4293      	cmp	r3, r2
 8011cc6:	d225      	bcs.n	8011d14 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8011cc8:	2300      	movs	r3, #0
 8011cca:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	891b      	ldrh	r3, [r3, #8]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d11c      	bne.n	8011d0e <CircularQueue_Sense+0x120>
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681a      	ldr	r2, [r3, #0]
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	4413      	add	r3, r2
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	4618      	mov	r0, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681a      	ldr	r2, [r3, #0]
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	1c59      	adds	r1, r3, #1
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	685b      	ldr	r3, [r3, #4]
 8011cec:	4299      	cmp	r1, r3
 8011cee:	d305      	bcc.n	8011cfc <CircularQueue_Sense+0x10e>
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	685b      	ldr	r3, [r3, #4]
 8011cf4:	68f9      	ldr	r1, [r7, #12]
 8011cf6:	1acb      	subs	r3, r1, r3
 8011cf8:	3301      	adds	r3, #1
 8011cfa:	e001      	b.n	8011d00 <CircularQueue_Sense+0x112>
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	3301      	adds	r3, #1
 8011d00:	4413      	add	r3, r2
 8011d02:	781b      	ldrb	r3, [r3, #0]
 8011d04:	021b      	lsls	r3, r3, #8
 8011d06:	b29b      	uxth	r3, r3
 8011d08:	4403      	add	r3, r0
 8011d0a:	b29b      	uxth	r3, r3
 8011d0c:	e001      	b.n	8011d12 <CircularQueue_Sense+0x124>
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	891b      	ldrh	r3, [r3, #8]
 8011d12:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681a      	ldr	r2, [r3, #0]
 8011d18:	7af9      	ldrb	r1, [r7, #11]
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	4419      	add	r1, r3
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	4299      	cmp	r1, r3
 8011d24:	d306      	bcc.n	8011d34 <CircularQueue_Sense+0x146>
 8011d26:	7af9      	ldrb	r1, [r7, #11]
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	4419      	add	r1, r3
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	685b      	ldr	r3, [r3, #4]
 8011d30:	1acb      	subs	r3, r1, r3
 8011d32:	e002      	b.n	8011d3a <CircularQueue_Sense+0x14c>
 8011d34:	7af9      	ldrb	r1, [r7, #11]
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	440b      	add	r3, r1
 8011d3a:	4413      	add	r3, r2
 8011d3c:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d002      	beq.n	8011d4a <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	8a7a      	ldrh	r2, [r7, #18]
 8011d48:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8011d4a:	697b      	ldr	r3, [r7, #20]
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	371c      	adds	r7, #28
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr

08011d58 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8011d5c:	4b03      	ldr	r3, [pc, #12]	@ (8011d6c <LL_FLASH_GetUDN+0x14>)
 8011d5e:	681b      	ldr	r3, [r3, #0]
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	46bd      	mov	sp, r7
 8011d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d68:	4770      	bx	lr
 8011d6a:	bf00      	nop
 8011d6c:	1fff7580 	.word	0x1fff7580

08011d70 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8011d70:	b480      	push	{r7}
 8011d72:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8011d74:	4b03      	ldr	r3, [pc, #12]	@ (8011d84 <LL_FLASH_GetDeviceID+0x14>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	b2db      	uxtb	r3, r3
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d82:	4770      	bx	lr
 8011d84:	1fff7584 	.word	0x1fff7584

08011d88 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8011d88:	b480      	push	{r7}
 8011d8a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8011d8c:	4b03      	ldr	r3, [pc, #12]	@ (8011d9c <LL_FLASH_GetSTCompanyID+0x14>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	0a1b      	lsrs	r3, r3, #8
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr
 8011d9c:	1fff7584 	.word	0x1fff7584

08011da0 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8011da0:	b5b0      	push	{r4, r5, r7, lr}
 8011da2:	b090      	sub	sp, #64	@ 0x40
 8011da4:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011da6:	2392      	movs	r3, #146	@ 0x92
 8011da8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8011dac:	4b4e      	ldr	r3, [pc, #312]	@ (8011ee8 <APP_BLE_Init+0x148>)
 8011dae:	1d3c      	adds	r4, r7, #4
 8011db0:	461d      	mov	r5, r3
 8011db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011dbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011dc2:	c403      	stmia	r4!, {r0, r1}
 8011dc4:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8011dc6:	f000 faf9 	bl	80123bc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8011dca:	2101      	movs	r1, #1
 8011dcc:	2002      	movs	r0, #2
 8011dce:	f001 ffc7 	bl	8013d60 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8011dd2:	4a46      	ldr	r2, [pc, #280]	@ (8011eec <APP_BLE_Init+0x14c>)
 8011dd4:	2100      	movs	r1, #0
 8011dd6:	2002      	movs	r0, #2
 8011dd8:	f002 f8ee 	bl	8013fb8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8011ddc:	1d3b      	adds	r3, r7, #4
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7fe fbec 	bl	80105bc <SHCI_C2_BLE_Init>
 8011de4:	4603      	mov	r3, r0
 8011de6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8011dea:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d012      	beq.n	8011e18 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8011df2:	483f      	ldr	r0, [pc, #252]	@ (8011ef0 <APP_BLE_Init+0x150>)
 8011df4:	f7ff f9f0 	bl	80111d8 <DbgTraceGetFileName>
 8011df8:	4601      	mov	r1, r0
 8011dfa:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8011dfe:	4a3d      	ldr	r2, [pc, #244]	@ (8011ef4 <APP_BLE_Init+0x154>)
 8011e00:	483d      	ldr	r0, [pc, #244]	@ (8011ef8 <APP_BLE_Init+0x158>)
 8011e02:	f002 fad9 	bl	80143b8 <iprintf>
 8011e06:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8011e0a:	4619      	mov	r1, r3
 8011e0c:	483b      	ldr	r0, [pc, #236]	@ (8011efc <APP_BLE_Init+0x15c>)
 8011e0e:	f002 fad3 	bl	80143b8 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8011e12:	f7f0 fdcb 	bl	80029ac <Error_Handler>
 8011e16:	e00c      	b.n	8011e32 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8011e18:	4835      	ldr	r0, [pc, #212]	@ (8011ef0 <APP_BLE_Init+0x150>)
 8011e1a:	f7ff f9dd 	bl	80111d8 <DbgTraceGetFileName>
 8011e1e:	4601      	mov	r1, r0
 8011e20:	f44f 73e3 	mov.w	r3, #454	@ 0x1c6
 8011e24:	4a33      	ldr	r2, [pc, #204]	@ (8011ef4 <APP_BLE_Init+0x154>)
 8011e26:	4834      	ldr	r0, [pc, #208]	@ (8011ef8 <APP_BLE_Init+0x158>)
 8011e28:	f002 fac6 	bl	80143b8 <iprintf>
 8011e2c:	4834      	ldr	r0, [pc, #208]	@ (8011f00 <APP_BLE_Init+0x160>)
 8011e2e:	f002 fac3 	bl	80143b8 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8011e32:	f000 fad9 	bl	80123e8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8011e36:	f7fe fb1b 	bl	8010470 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8011e3a:	4b32      	ldr	r3, [pc, #200]	@ (8011f04 <APP_BLE_Init+0x164>)
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8011e42:	4b30      	ldr	r3, [pc, #192]	@ (8011f04 <APP_BLE_Init+0x164>)
 8011e44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011e48:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8011e4a:	4a2f      	ldr	r2, [pc, #188]	@ (8011f08 <APP_BLE_Init+0x168>)
 8011e4c:	2100      	movs	r1, #0
 8011e4e:	2001      	movs	r0, #1
 8011e50:	f002 f8b2 	bl	8013fb8 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8011e54:	2006      	movs	r0, #6
 8011e56:	f7fd ff4b 	bl	800fcf0 <aci_hal_set_radio_activity_mask>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 8011e60:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d010      	beq.n	8011e8a <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8011e68:	4821      	ldr	r0, [pc, #132]	@ (8011ef0 <APP_BLE_Init+0x150>)
 8011e6a:	f7ff f9b5 	bl	80111d8 <DbgTraceGetFileName>
 8011e6e:	4601      	mov	r1, r0
 8011e70:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8011e74:	4a1f      	ldr	r2, [pc, #124]	@ (8011ef4 <APP_BLE_Init+0x154>)
 8011e76:	4820      	ldr	r0, [pc, #128]	@ (8011ef8 <APP_BLE_Init+0x158>)
 8011e78:	f002 fa9e 	bl	80143b8 <iprintf>
 8011e7c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011e80:	4619      	mov	r1, r3
 8011e82:	4822      	ldr	r0, [pc, #136]	@ (8011f0c <APP_BLE_Init+0x16c>)
 8011e84:	f002 fa98 	bl	80143b8 <iprintf>
 8011e88:	e00c      	b.n	8011ea4 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8011e8a:	4819      	ldr	r0, [pc, #100]	@ (8011ef0 <APP_BLE_Init+0x150>)
 8011e8c:	f7ff f9a4 	bl	80111d8 <DbgTraceGetFileName>
 8011e90:	4601      	mov	r1, r0
 8011e92:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8011e96:	4a17      	ldr	r2, [pc, #92]	@ (8011ef4 <APP_BLE_Init+0x154>)
 8011e98:	4817      	ldr	r0, [pc, #92]	@ (8011ef8 <APP_BLE_Init+0x158>)
 8011e9a:	f002 fa8d 	bl	80143b8 <iprintf>
 8011e9e:	481c      	ldr	r0, [pc, #112]	@ (8011f10 <APP_BLE_Init+0x170>)
 8011ea0:	f002 fa8a 	bl	80143b8 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8011ea4:	f000 ffaa 	bl	8012dfc <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8011ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8011f14 <APP_BLE_Init+0x174>)
 8011eaa:	2200      	movs	r2, #0
 8011eac:	491a      	ldr	r1, [pc, #104]	@ (8011f18 <APP_BLE_Init+0x178>)
 8011eae:	2000      	movs	r0, #0
 8011eb0:	f7f0 f9be 	bl	8002230 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8011eb4:	4b19      	ldr	r3, [pc, #100]	@ (8011f1c <APP_BLE_Init+0x17c>)
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	4919      	ldr	r1, [pc, #100]	@ (8011f20 <APP_BLE_Init+0x180>)
 8011eba:	2000      	movs	r0, #0
 8011ebc:	f7f0 f9b8 	bl	8002230 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8011ec0:	4b10      	ldr	r3, [pc, #64]	@ (8011f04 <APP_BLE_Init+0x164>)
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8011ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8011f04 <APP_BLE_Init+0x164>)
 8011ec8:	2200      	movs	r2, #0
 8011eca:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8011ecc:	4b15      	ldr	r3, [pc, #84]	@ (8011f24 <APP_BLE_Init+0x184>)
 8011ece:	2280      	movs	r2, #128	@ 0x80
 8011ed0:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8011ed2:	4b15      	ldr	r3, [pc, #84]	@ (8011f28 <APP_BLE_Init+0x188>)
 8011ed4:	22a0      	movs	r2, #160	@ 0xa0
 8011ed6:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8011ed8:	2001      	movs	r0, #1
 8011eda:	f000 fd39 	bl	8012950 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8011ede:	bf00      	nop
}
 8011ee0:	3740      	adds	r7, #64	@ 0x40
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	08015a70 	.word	0x08015a70
 8011eec:	080107d9 	.word	0x080107d9
 8011ef0:	08015964 	.word	0x08015964
 8011ef4:	080167fc 	.word	0x080167fc
 8011ef8:	08015980 	.word	0x08015980
 8011efc:	08015994 	.word	0x08015994
 8011f00:	080159cc 	.word	0x080159cc
 8011f04:	200015d0 	.word	0x200015d0
 8011f08:	08012bdd 	.word	0x08012bdd
 8011f0c:	080159f4 	.word	0x080159f4
 8011f10:	08015a38 	.word	0x08015a38
 8011f14:	08012c7d 	.word	0x08012c7d
 8011f18:	20001651 	.word	0x20001651
 8011f1c:	08012c8d 	.word	0x08012c8d
 8011f20:	20001652 	.word	0x20001652
 8011f24:	20001654 	.word	0x20001654
 8011f28:	20001656 	.word	0x20001656

08011f2c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8011f2c:	b5b0      	push	{r4, r5, r7, lr}
 8011f2e:	b090      	sub	sp, #64	@ 0x40
 8011f30:	af04      	add	r7, sp, #16
 8011f32:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8011f34:	2392      	movs	r3, #146	@ 0x92
 8011f36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	3301      	adds	r3, #1
 8011f3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8011f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	2bff      	cmp	r3, #255	@ 0xff
 8011f46:	f000 81db 	beq.w	8012300 <SVCCTL_App_Notification+0x3d4>
 8011f4a:	2bff      	cmp	r3, #255	@ 0xff
 8011f4c:	f300 8218 	bgt.w	8012380 <SVCCTL_App_Notification+0x454>
 8011f50:	2b05      	cmp	r3, #5
 8011f52:	d002      	beq.n	8011f5a <SVCCTL_App_Notification+0x2e>
 8011f54:	2b3e      	cmp	r3, #62	@ 0x3e
 8011f56:	d042      	beq.n	8011fde <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8011f58:	e212      	b.n	8012380 <SVCCTL_App_Notification+0x454>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8011f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f5c:	3302      	adds	r3, #2
 8011f5e:	613b      	str	r3, [r7, #16]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011f66:	b29a      	uxth	r2, r3
 8011f68:	4b87      	ldr	r3, [pc, #540]	@ (8012188 <SVCCTL_App_Notification+0x25c>)
 8011f6a:	8adb      	ldrh	r3, [r3, #22]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d128      	bne.n	8011fc2 <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8011f70:	4b85      	ldr	r3, [pc, #532]	@ (8012188 <SVCCTL_App_Notification+0x25c>)
 8011f72:	2200      	movs	r2, #0
 8011f74:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8011f76:	4b84      	ldr	r3, [pc, #528]	@ (8012188 <SVCCTL_App_Notification+0x25c>)
 8011f78:	2200      	movs	r2, #0
 8011f7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8011f7e:	4883      	ldr	r0, [pc, #524]	@ (801218c <SVCCTL_App_Notification+0x260>)
 8011f80:	f7ff f92a 	bl	80111d8 <DbgTraceGetFileName>
 8011f84:	4601      	mov	r1, r0
 8011f86:	f240 233f 	movw	r3, #575	@ 0x23f
 8011f8a:	4a81      	ldr	r2, [pc, #516]	@ (8012190 <SVCCTL_App_Notification+0x264>)
 8011f8c:	4881      	ldr	r0, [pc, #516]	@ (8012194 <SVCCTL_App_Notification+0x268>)
 8011f8e:	f002 fa13 	bl	80143b8 <iprintf>
 8011f92:	4881      	ldr	r0, [pc, #516]	@ (8012198 <SVCCTL_App_Notification+0x26c>)
 8011f94:	f002 fa78 	bl	8014488 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8011f98:	487c      	ldr	r0, [pc, #496]	@ (801218c <SVCCTL_App_Notification+0x260>)
 8011f9a:	f7ff f91d 	bl	80111d8 <DbgTraceGetFileName>
 8011f9e:	4601      	mov	r1, r0
 8011fa0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8011fa4:	4a7a      	ldr	r2, [pc, #488]	@ (8012190 <SVCCTL_App_Notification+0x264>)
 8011fa6:	487b      	ldr	r0, [pc, #492]	@ (8012194 <SVCCTL_App_Notification+0x268>)
 8011fa8:	f002 fa06 	bl	80143b8 <iprintf>
 8011fac:	693b      	ldr	r3, [r7, #16]
 8011fae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011fb2:	b29b      	uxth	r3, r3
 8011fb4:	4619      	mov	r1, r3
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	78db      	ldrb	r3, [r3, #3]
 8011fba:	461a      	mov	r2, r3
 8011fbc:	4877      	ldr	r0, [pc, #476]	@ (801219c <SVCCTL_App_Notification+0x270>)
 8011fbe:	f002 f9fb 	bl	80143b8 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8011fc2:	2001      	movs	r0, #1
 8011fc4:	f000 fcc4 	bl	8012950 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8011fc8:	4b75      	ldr	r3, [pc, #468]	@ (80121a0 <SVCCTL_App_Notification+0x274>)
 8011fca:	2201      	movs	r2, #1
 8011fcc:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8011fce:	4b6e      	ldr	r3, [pc, #440]	@ (8012188 <SVCCTL_App_Notification+0x25c>)
 8011fd0:	8ada      	ldrh	r2, [r3, #22]
 8011fd2:	4b73      	ldr	r3, [pc, #460]	@ (80121a0 <SVCCTL_App_Notification+0x274>)
 8011fd4:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 8011fd6:	4872      	ldr	r0, [pc, #456]	@ (80121a0 <SVCCTL_App_Notification+0x274>)
 8011fd8:	f000 fefc 	bl	8012dd4 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8011fdc:	e1d3      	b.n	8012386 <SVCCTL_App_Notification+0x45a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8011fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fe0:	3302      	adds	r3, #2
 8011fe2:	623b      	str	r3, [r7, #32]
      switch (p_meta_evt->subevent)
 8011fe4:	6a3b      	ldr	r3, [r7, #32]
 8011fe6:	781b      	ldrb	r3, [r3, #0]
 8011fe8:	2b0c      	cmp	r3, #12
 8011fea:	d048      	beq.n	801207e <SVCCTL_App_Notification+0x152>
 8011fec:	2b0c      	cmp	r3, #12
 8011fee:	f300 8185 	bgt.w	80122fc <SVCCTL_App_Notification+0x3d0>
 8011ff2:	2b01      	cmp	r3, #1
 8011ff4:	f000 80e8 	beq.w	80121c8 <SVCCTL_App_Notification+0x29c>
 8011ff8:	2b03      	cmp	r3, #3
 8011ffa:	f040 817f 	bne.w	80122fc <SVCCTL_App_Notification+0x3d0>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8011ffe:	6a3b      	ldr	r3, [r7, #32]
 8012000:	3301      	adds	r3, #1
 8012002:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8012004:	4861      	ldr	r0, [pc, #388]	@ (801218c <SVCCTL_App_Notification+0x260>)
 8012006:	f7ff f8e7 	bl	80111d8 <DbgTraceGetFileName>
 801200a:	4601      	mov	r1, r0
 801200c:	f240 2367 	movw	r3, #615	@ 0x267
 8012010:	4a5f      	ldr	r2, [pc, #380]	@ (8012190 <SVCCTL_App_Notification+0x264>)
 8012012:	4860      	ldr	r0, [pc, #384]	@ (8012194 <SVCCTL_App_Notification+0x268>)
 8012014:	f002 f9d0 	bl	80143b8 <iprintf>
 8012018:	4862      	ldr	r0, [pc, #392]	@ (80121a4 <SVCCTL_App_Notification+0x278>)
 801201a:	f002 fa35 	bl	8014488 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 801201e:	485b      	ldr	r0, [pc, #364]	@ (801218c <SVCCTL_App_Notification+0x260>)
 8012020:	f7ff f8da 	bl	80111d8 <DbgTraceGetFileName>
 8012024:	4601      	mov	r1, r0
 8012026:	f44f 731a 	mov.w	r3, #616	@ 0x268
 801202a:	4a59      	ldr	r2, [pc, #356]	@ (8012190 <SVCCTL_App_Notification+0x264>)
 801202c:	4859      	ldr	r0, [pc, #356]	@ (8012194 <SVCCTL_App_Notification+0x268>)
 801202e:	f002 f9c3 	bl	80143b8 <iprintf>
 8012032:	69bb      	ldr	r3, [r7, #24]
 8012034:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8012038:	b29b      	uxth	r3, r3
 801203a:	4618      	mov	r0, r3
 801203c:	f7ee fb74 	bl	8000728 <__aeabi_i2d>
 8012040:	f04f 0200 	mov.w	r2, #0
 8012044:	4b58      	ldr	r3, [pc, #352]	@ (80121a8 <SVCCTL_App_Notification+0x27c>)
 8012046:	f7ee f8f3 	bl	8000230 <__aeabi_dmul>
 801204a:	4602      	mov	r2, r0
 801204c:	460b      	mov	r3, r1
 801204e:	4610      	mov	r0, r2
 8012050:	4619      	mov	r1, r3
 8012052:	69bb      	ldr	r3, [r7, #24]
 8012054:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8012058:	b29b      	uxth	r3, r3
 801205a:	461c      	mov	r4, r3
 801205c:	69bb      	ldr	r3, [r7, #24]
 801205e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8012062:	b29b      	uxth	r3, r3
 8012064:	461a      	mov	r2, r3
 8012066:	4613      	mov	r3, r2
 8012068:	009b      	lsls	r3, r3, #2
 801206a:	4413      	add	r3, r2
 801206c:	005b      	lsls	r3, r3, #1
 801206e:	9301      	str	r3, [sp, #4]
 8012070:	9400      	str	r4, [sp, #0]
 8012072:	4602      	mov	r2, r0
 8012074:	460b      	mov	r3, r1
 8012076:	484d      	ldr	r0, [pc, #308]	@ (80121ac <SVCCTL_App_Notification+0x280>)
 8012078:	f002 f99e 	bl	80143b8 <iprintf>
          break;
 801207c:	e13f      	b.n	80122fe <SVCCTL_App_Notification+0x3d2>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 801207e:	6a3b      	ldr	r3, [r7, #32]
 8012080:	3301      	adds	r3, #1
 8012082:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 8012084:	4841      	ldr	r0, [pc, #260]	@ (801218c <SVCCTL_App_Notification+0x260>)
 8012086:	f7ff f8a7 	bl	80111d8 <DbgTraceGetFileName>
 801208a:	4601      	mov	r1, r0
 801208c:	f240 2375 	movw	r3, #629	@ 0x275
 8012090:	4a3f      	ldr	r2, [pc, #252]	@ (8012190 <SVCCTL_App_Notification+0x264>)
 8012092:	4840      	ldr	r0, [pc, #256]	@ (8012194 <SVCCTL_App_Notification+0x268>)
 8012094:	f002 f990 	bl	80143b8 <iprintf>
 8012098:	4845      	ldr	r0, [pc, #276]	@ (80121b0 <SVCCTL_App_Notification+0x284>)
 801209a:	f002 f98d 	bl	80143b8 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 801209e:	69fb      	ldr	r3, [r7, #28]
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d10d      	bne.n	80120c2 <SVCCTL_App_Notification+0x196>
            APP_DBG_MSG("status ok \n");
 80120a6:	4839      	ldr	r0, [pc, #228]	@ (801218c <SVCCTL_App_Notification+0x260>)
 80120a8:	f7ff f896 	bl	80111d8 <DbgTraceGetFileName>
 80120ac:	4601      	mov	r1, r0
 80120ae:	f44f 731e 	mov.w	r3, #632	@ 0x278
 80120b2:	4a37      	ldr	r2, [pc, #220]	@ (8012190 <SVCCTL_App_Notification+0x264>)
 80120b4:	4837      	ldr	r0, [pc, #220]	@ (8012194 <SVCCTL_App_Notification+0x268>)
 80120b6:	f002 f97f 	bl	80143b8 <iprintf>
 80120ba:	483e      	ldr	r0, [pc, #248]	@ (80121b4 <SVCCTL_App_Notification+0x288>)
 80120bc:	f002 f9e4 	bl	8014488 <puts>
 80120c0:	e00c      	b.n	80120dc <SVCCTL_App_Notification+0x1b0>
            APP_DBG_MSG("status nok \n");
 80120c2:	4832      	ldr	r0, [pc, #200]	@ (801218c <SVCCTL_App_Notification+0x260>)
 80120c4:	f7ff f888 	bl	80111d8 <DbgTraceGetFileName>
 80120c8:	4601      	mov	r1, r0
 80120ca:	f44f 731f 	mov.w	r3, #636	@ 0x27c
 80120ce:	4a30      	ldr	r2, [pc, #192]	@ (8012190 <SVCCTL_App_Notification+0x264>)
 80120d0:	4830      	ldr	r0, [pc, #192]	@ (8012194 <SVCCTL_App_Notification+0x268>)
 80120d2:	f002 f971 	bl	80143b8 <iprintf>
 80120d6:	4838      	ldr	r0, [pc, #224]	@ (80121b8 <SVCCTL_App_Notification+0x28c>)
 80120d8:	f002 f9d6 	bl	8014488 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 80120dc:	4b2a      	ldr	r3, [pc, #168]	@ (8012188 <SVCCTL_App_Notification+0x25c>)
 80120de:	8adb      	ldrh	r3, [r3, #22]
 80120e0:	f107 020e 	add.w	r2, r7, #14
 80120e4:	f107 010f 	add.w	r1, r7, #15
 80120e8:	4618      	mov	r0, r3
 80120ea:	f7fd ff00 	bl	800feee <hci_le_read_phy>
 80120ee:	4603      	mov	r3, r0
 80120f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 80120f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d00d      	beq.n	8012118 <SVCCTL_App_Notification+0x1ec>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 80120fc:	4823      	ldr	r0, [pc, #140]	@ (801218c <SVCCTL_App_Notification+0x260>)
 80120fe:	f7ff f86b 	bl	80111d8 <DbgTraceGetFileName>
 8012102:	4601      	mov	r1, r0
 8012104:	f240 2382 	movw	r3, #642	@ 0x282
 8012108:	4a21      	ldr	r2, [pc, #132]	@ (8012190 <SVCCTL_App_Notification+0x264>)
 801210a:	4822      	ldr	r0, [pc, #136]	@ (8012194 <SVCCTL_App_Notification+0x268>)
 801210c:	f002 f954 	bl	80143b8 <iprintf>
 8012110:	482a      	ldr	r0, [pc, #168]	@ (80121bc <SVCCTL_App_Notification+0x290>)
 8012112:	f002 f951 	bl	80143b8 <iprintf>
          break;
 8012116:	e0f2      	b.n	80122fe <SVCCTL_App_Notification+0x3d2>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 8012118:	481c      	ldr	r0, [pc, #112]	@ (801218c <SVCCTL_App_Notification+0x260>)
 801211a:	f7ff f85d 	bl	80111d8 <DbgTraceGetFileName>
 801211e:	4601      	mov	r1, r0
 8012120:	f240 2386 	movw	r3, #646	@ 0x286
 8012124:	4a1a      	ldr	r2, [pc, #104]	@ (8012190 <SVCCTL_App_Notification+0x264>)
 8012126:	481b      	ldr	r0, [pc, #108]	@ (8012194 <SVCCTL_App_Notification+0x268>)
 8012128:	f002 f946 	bl	80143b8 <iprintf>
 801212c:	4824      	ldr	r0, [pc, #144]	@ (80121c0 <SVCCTL_App_Notification+0x294>)
 801212e:	f002 f9ab 	bl	8014488 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8012132:	7bfb      	ldrb	r3, [r7, #15]
 8012134:	2b02      	cmp	r3, #2
 8012136:	d114      	bne.n	8012162 <SVCCTL_App_Notification+0x236>
 8012138:	7bbb      	ldrb	r3, [r7, #14]
 801213a:	2b02      	cmp	r3, #2
 801213c:	d111      	bne.n	8012162 <SVCCTL_App_Notification+0x236>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 801213e:	4813      	ldr	r0, [pc, #76]	@ (801218c <SVCCTL_App_Notification+0x260>)
 8012140:	f7ff f84a 	bl	80111d8 <DbgTraceGetFileName>
 8012144:	4601      	mov	r1, r0
 8012146:	f240 238a 	movw	r3, #650	@ 0x28a
 801214a:	4a11      	ldr	r2, [pc, #68]	@ (8012190 <SVCCTL_App_Notification+0x264>)
 801214c:	4811      	ldr	r0, [pc, #68]	@ (8012194 <SVCCTL_App_Notification+0x268>)
 801214e:	f002 f933 	bl	80143b8 <iprintf>
 8012152:	7bfb      	ldrb	r3, [r7, #15]
 8012154:	4619      	mov	r1, r3
 8012156:	7bbb      	ldrb	r3, [r7, #14]
 8012158:	461a      	mov	r2, r3
 801215a:	481a      	ldr	r0, [pc, #104]	@ (80121c4 <SVCCTL_App_Notification+0x298>)
 801215c:	f002 f92c 	bl	80143b8 <iprintf>
          break;
 8012160:	e0cd      	b.n	80122fe <SVCCTL_App_Notification+0x3d2>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 8012162:	480a      	ldr	r0, [pc, #40]	@ (801218c <SVCCTL_App_Notification+0x260>)
 8012164:	f7ff f838 	bl	80111d8 <DbgTraceGetFileName>
 8012168:	4601      	mov	r1, r0
 801216a:	f240 238e 	movw	r3, #654	@ 0x28e
 801216e:	4a08      	ldr	r2, [pc, #32]	@ (8012190 <SVCCTL_App_Notification+0x264>)
 8012170:	4808      	ldr	r0, [pc, #32]	@ (8012194 <SVCCTL_App_Notification+0x268>)
 8012172:	f002 f921 	bl	80143b8 <iprintf>
 8012176:	7bfb      	ldrb	r3, [r7, #15]
 8012178:	4619      	mov	r1, r3
 801217a:	7bbb      	ldrb	r3, [r7, #14]
 801217c:	461a      	mov	r2, r3
 801217e:	4811      	ldr	r0, [pc, #68]	@ (80121c4 <SVCCTL_App_Notification+0x298>)
 8012180:	f002 f91a 	bl	80143b8 <iprintf>
          break;
 8012184:	e0bb      	b.n	80122fe <SVCCTL_App_Notification+0x3d2>
 8012186:	bf00      	nop
 8012188:	200015d0 	.word	0x200015d0
 801218c:	08015964 	.word	0x08015964
 8012190:	0801680c 	.word	0x0801680c
 8012194:	08015980 	.word	0x08015980
 8012198:	08015aac 	.word	0x08015aac
 801219c:	08015ad8 	.word	0x08015ad8
 80121a0:	20001658 	.word	0x20001658
 80121a4:	08015b14 	.word	0x08015b14
 80121a8:	3ff40000 	.word	0x3ff40000
 80121ac:	08015b48 	.word	0x08015b48
 80121b0:	08015bb4 	.word	0x08015bb4
 80121b4:	08015be4 	.word	0x08015be4
 80121b8:	08015bf0 	.word	0x08015bf0
 80121bc:	08015bfc 	.word	0x08015bfc
 80121c0:	08015c1c 	.word	0x08015c1c
 80121c4:	08015c3c 	.word	0x08015c3c
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80121c8:	6a3b      	ldr	r3, [r7, #32]
 80121ca:	3301      	adds	r3, #1
 80121cc:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80121ce:	4b70      	ldr	r3, [pc, #448]	@ (8012390 <SVCCTL_App_Notification+0x464>)
 80121d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7f0 f8a5 	bl	8002324 <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 80121da:	486e      	ldr	r0, [pc, #440]	@ (8012394 <SVCCTL_App_Notification+0x468>)
 80121dc:	f7fe fffc 	bl	80111d8 <DbgTraceGetFileName>
 80121e0:	4601      	mov	r1, r0
 80121e2:	f240 239f 	movw	r3, #671	@ 0x29f
 80121e6:	4a6c      	ldr	r2, [pc, #432]	@ (8012398 <SVCCTL_App_Notification+0x46c>)
 80121e8:	486c      	ldr	r0, [pc, #432]	@ (801239c <SVCCTL_App_Notification+0x470>)
 80121ea:	f002 f8e5 	bl	80143b8 <iprintf>
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80121f4:	b29b      	uxth	r3, r3
 80121f6:	4619      	mov	r1, r3
 80121f8:	4869      	ldr	r0, [pc, #420]	@ (80123a0 <SVCCTL_App_Notification+0x474>)
 80121fa:	f002 f8dd 	bl	80143b8 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80121fe:	4865      	ldr	r0, [pc, #404]	@ (8012394 <SVCCTL_App_Notification+0x468>)
 8012200:	f7fe ffea 	bl	80111d8 <DbgTraceGetFileName>
 8012204:	4601      	mov	r1, r0
 8012206:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 801220a:	4a63      	ldr	r2, [pc, #396]	@ (8012398 <SVCCTL_App_Notification+0x46c>)
 801220c:	4863      	ldr	r0, [pc, #396]	@ (801239c <SVCCTL_App_Notification+0x470>)
 801220e:	f002 f8d3 	bl	80143b8 <iprintf>
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	7a9b      	ldrb	r3, [r3, #10]
 8012216:	4618      	mov	r0, r3
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	7a5b      	ldrb	r3, [r3, #9]
 801221c:	461c      	mov	r4, r3
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	7a1b      	ldrb	r3, [r3, #8]
 8012222:	461d      	mov	r5, r3
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	79db      	ldrb	r3, [r3, #7]
 8012228:	461a      	mov	r2, r3
 801222a:	697b      	ldr	r3, [r7, #20]
 801222c:	799b      	ldrb	r3, [r3, #6]
 801222e:	4619      	mov	r1, r3
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	795b      	ldrb	r3, [r3, #5]
 8012234:	9302      	str	r3, [sp, #8]
 8012236:	9101      	str	r1, [sp, #4]
 8012238:	9200      	str	r2, [sp, #0]
 801223a:	462b      	mov	r3, r5
 801223c:	4622      	mov	r2, r4
 801223e:	4601      	mov	r1, r0
 8012240:	4858      	ldr	r0, [pc, #352]	@ (80123a4 <SVCCTL_App_Notification+0x478>)
 8012242:	f002 f8b9 	bl	80143b8 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8012246:	4853      	ldr	r0, [pc, #332]	@ (8012394 <SVCCTL_App_Notification+0x468>)
 8012248:	f7fe ffc6 	bl	80111d8 <DbgTraceGetFileName>
 801224c:	4601      	mov	r1, r0
 801224e:	f240 23a7 	movw	r3, #679	@ 0x2a7
 8012252:	4a51      	ldr	r2, [pc, #324]	@ (8012398 <SVCCTL_App_Notification+0x46c>)
 8012254:	4851      	ldr	r0, [pc, #324]	@ (801239c <SVCCTL_App_Notification+0x470>)
 8012256:	f002 f8af 	bl	80143b8 <iprintf>
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8012260:	b29b      	uxth	r3, r3
 8012262:	4618      	mov	r0, r3
 8012264:	f7ee fa60 	bl	8000728 <__aeabi_i2d>
 8012268:	f04f 0200 	mov.w	r2, #0
 801226c:	4b4e      	ldr	r3, [pc, #312]	@ (80123a8 <SVCCTL_App_Notification+0x47c>)
 801226e:	f7ed ffdf 	bl	8000230 <__aeabi_dmul>
 8012272:	4602      	mov	r2, r0
 8012274:	460b      	mov	r3, r1
 8012276:	4610      	mov	r0, r2
 8012278:	4619      	mov	r1, r3
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8012280:	b29b      	uxth	r3, r3
 8012282:	461c      	mov	r4, r3
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 801228a:	b29b      	uxth	r3, r3
 801228c:	461a      	mov	r2, r3
 801228e:	4613      	mov	r3, r2
 8012290:	009b      	lsls	r3, r3, #2
 8012292:	4413      	add	r3, r2
 8012294:	005b      	lsls	r3, r3, #1
 8012296:	9301      	str	r3, [sp, #4]
 8012298:	9400      	str	r4, [sp, #0]
 801229a:	4602      	mov	r2, r0
 801229c:	460b      	mov	r3, r1
 801229e:	4843      	ldr	r0, [pc, #268]	@ (80123ac <SVCCTL_App_Notification+0x480>)
 80122a0:	f002 f88a 	bl	80143b8 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80122a4:	4b3a      	ldr	r3, [pc, #232]	@ (8012390 <SVCCTL_App_Notification+0x464>)
 80122a6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80122aa:	2b04      	cmp	r3, #4
 80122ac:	d104      	bne.n	80122b8 <SVCCTL_App_Notification+0x38c>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80122ae:	4b38      	ldr	r3, [pc, #224]	@ (8012390 <SVCCTL_App_Notification+0x464>)
 80122b0:	2206      	movs	r2, #6
 80122b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80122b6:	e003      	b.n	80122c0 <SVCCTL_App_Notification+0x394>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80122b8:	4b35      	ldr	r3, [pc, #212]	@ (8012390 <SVCCTL_App_Notification+0x464>)
 80122ba:	2205      	movs	r2, #5
 80122bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80122c6:	b29a      	uxth	r2, r3
 80122c8:	4b31      	ldr	r3, [pc, #196]	@ (8012390 <SVCCTL_App_Notification+0x464>)
 80122ca:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80122cc:	4b38      	ldr	r3, [pc, #224]	@ (80123b0 <SVCCTL_App_Notification+0x484>)
 80122ce:	2200      	movs	r2, #0
 80122d0:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80122d2:	4b2f      	ldr	r3, [pc, #188]	@ (8012390 <SVCCTL_App_Notification+0x464>)
 80122d4:	8ada      	ldrh	r2, [r3, #22]
 80122d6:	4b36      	ldr	r3, [pc, #216]	@ (80123b0 <SVCCTL_App_Notification+0x484>)
 80122d8:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 80122da:	4835      	ldr	r0, [pc, #212]	@ (80123b0 <SVCCTL_App_Notification+0x484>)
 80122dc:	f000 fd7a 	bl	8012dd4 <P2PS_APP_Notification>
					aci_gatt_exchange_config(HandleNotification.ConnectionHandle);
 80122e0:	4b33      	ldr	r3, [pc, #204]	@ (80123b0 <SVCCTL_App_Notification+0x484>)
 80122e2:	885b      	ldrh	r3, [r3, #2]
 80122e4:	4618      	mov	r0, r3
 80122e6:	f7fd fb6a 	bl	800f9be <aci_gatt_exchange_config>
					hci_le_set_data_length(HandleNotification.ConnectionHandle, 156, 2120);
 80122ea:	4b31      	ldr	r3, [pc, #196]	@ (80123b0 <SVCCTL_App_Notification+0x484>)
 80122ec:	885b      	ldrh	r3, [r3, #2]
 80122ee:	f640 0248 	movw	r2, #2120	@ 0x848
 80122f2:	219c      	movs	r1, #156	@ 0x9c
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7fd fd73 	bl	800fde0 <hci_le_set_data_length>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80122fa:	e000      	b.n	80122fe <SVCCTL_App_Notification+0x3d2>
          break;
 80122fc:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80122fe:	e042      	b.n	8012386 <SVCCTL_App_Notification+0x45a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8012300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012302:	3302      	adds	r3, #2
 8012304:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8012306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012308:	881b      	ldrh	r3, [r3, #0]
 801230a:	b29b      	uxth	r3, r3
 801230c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8012310:	4293      	cmp	r3, r2
 8012312:	d01e      	beq.n	8012352 <SVCCTL_App_Notification+0x426>
 8012314:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8012318:	4293      	cmp	r3, r2
 801231a:	dc33      	bgt.n	8012384 <SVCCTL_App_Notification+0x458>
 801231c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012320:	d02a      	beq.n	8012378 <SVCCTL_App_Notification+0x44c>
 8012322:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012326:	dc2d      	bgt.n	8012384 <SVCCTL_App_Notification+0x458>
 8012328:	2b04      	cmp	r3, #4
 801232a:	d027      	beq.n	801237c <SVCCTL_App_Notification+0x450>
 801232c:	f240 4207 	movw	r2, #1031	@ 0x407
 8012330:	4293      	cmp	r3, r2
 8012332:	d000      	beq.n	8012336 <SVCCTL_App_Notification+0x40a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8012334:	e026      	b.n	8012384 <SVCCTL_App_Notification+0x458>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8012336:	4817      	ldr	r0, [pc, #92]	@ (8012394 <SVCCTL_App_Notification+0x468>)
 8012338:	f7fe ff4e 	bl	80111d8 <DbgTraceGetFileName>
 801233c:	4601      	mov	r1, r0
 801233e:	f44f 733b 	mov.w	r3, #748	@ 0x2ec
 8012342:	4a15      	ldr	r2, [pc, #84]	@ (8012398 <SVCCTL_App_Notification+0x46c>)
 8012344:	4815      	ldr	r0, [pc, #84]	@ (801239c <SVCCTL_App_Notification+0x470>)
 8012346:	f002 f837 	bl	80143b8 <iprintf>
 801234a:	481a      	ldr	r0, [pc, #104]	@ (80123b4 <SVCCTL_App_Notification+0x488>)
 801234c:	f002 f834 	bl	80143b8 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8012350:	e015      	b.n	801237e <SVCCTL_App_Notification+0x452>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 8012352:	4810      	ldr	r0, [pc, #64]	@ (8012394 <SVCCTL_App_Notification+0x468>)
 8012354:	f7fe ff40 	bl	80111d8 <DbgTraceGetFileName>
 8012358:	4601      	mov	r1, r0
 801235a:	f44f 733f 	mov.w	r3, #764	@ 0x2fc
 801235e:	4a0e      	ldr	r2, [pc, #56]	@ (8012398 <SVCCTL_App_Notification+0x46c>)
 8012360:	480e      	ldr	r0, [pc, #56]	@ (801239c <SVCCTL_App_Notification+0x470>)
 8012362:	f002 f829 	bl	80143b8 <iprintf>
 8012366:	4814      	ldr	r0, [pc, #80]	@ (80123b8 <SVCCTL_App_Notification+0x48c>)
 8012368:	f002 f826 	bl	80143b8 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 801236c:	4b08      	ldr	r3, [pc, #32]	@ (8012390 <SVCCTL_App_Notification+0x464>)
 801236e:	8adb      	ldrh	r3, [r3, #22]
 8012370:	4618      	mov	r0, r3
 8012372:	f7fd fb7c 	bl	800fa6e <aci_gatt_confirm_indication>
        break;
 8012376:	e002      	b.n	801237e <SVCCTL_App_Notification+0x452>
          break;
 8012378:	bf00      	nop
 801237a:	e003      	b.n	8012384 <SVCCTL_App_Notification+0x458>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 801237c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801237e:	e001      	b.n	8012384 <SVCCTL_App_Notification+0x458>
      break;
 8012380:	bf00      	nop
 8012382:	e000      	b.n	8012386 <SVCCTL_App_Notification+0x45a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8012384:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8012386:	2301      	movs	r3, #1
}
 8012388:	4618      	mov	r0, r3
 801238a:	3730      	adds	r7, #48	@ 0x30
 801238c:	46bd      	mov	sp, r7
 801238e:	bdb0      	pop	{r4, r5, r7, pc}
 8012390:	200015d0 	.word	0x200015d0
 8012394:	08015964 	.word	0x08015964
 8012398:	0801680c 	.word	0x0801680c
 801239c:	08015980 	.word	0x08015980
 80123a0:	08015c60 	.word	0x08015c60
 80123a4:	08015ca8 	.word	0x08015ca8
 80123a8:	3ff40000 	.word	0x3ff40000
 80123ac:	08015b48 	.word	0x08015b48
 80123b0:	20001658 	.word	0x20001658
 80123b4:	08015cf8 	.word	0x08015cf8
 80123b8:	08015d20 	.word	0x08015d20

080123bc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b082      	sub	sp, #8
 80123c0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80123c2:	4b06      	ldr	r3, [pc, #24]	@ (80123dc <Ble_Tl_Init+0x20>)
 80123c4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80123c6:	4b06      	ldr	r3, [pc, #24]	@ (80123e0 <Ble_Tl_Init+0x24>)
 80123c8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80123ca:	463b      	mov	r3, r7
 80123cc:	4619      	mov	r1, r3
 80123ce:	4805      	ldr	r0, [pc, #20]	@ (80123e4 <Ble_Tl_Init+0x28>)
 80123d0:	f7fe f9e6 	bl	80107a0 <hci_init>

  return;
 80123d4:	bf00      	nop
}
 80123d6:	3708      	adds	r7, #8
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}
 80123dc:	200300d8 	.word	0x200300d8
 80123e0:	08012d17 	.word	0x08012d17
 80123e4:	08012cdf 	.word	0x08012cdf

080123e8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80123e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123ea:	b08d      	sub	sp, #52	@ 0x34
 80123ec:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80123ee:	2300      	movs	r3, #0
 80123f0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80123f2:	2392      	movs	r3, #146	@ 0x92
 80123f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 80123f6:	48b2      	ldr	r0, [pc, #712]	@ (80126c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 80123f8:	f7fe feee 	bl	80111d8 <DbgTraceGetFileName>
 80123fc:	4601      	mov	r1, r0
 80123fe:	f240 3339 	movw	r3, #825	@ 0x339
 8012402:	4ab0      	ldr	r2, [pc, #704]	@ (80126c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8012404:	48b0      	ldr	r0, [pc, #704]	@ (80126c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8012406:	f001 ffd7 	bl	80143b8 <iprintf>
 801240a:	48b0      	ldr	r0, [pc, #704]	@ (80126cc <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 801240c:	f002 f83c 	bl	8014488 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8012410:	f7fd fcc2 	bl	800fd98 <hci_reset>
 8012414:	4603      	mov	r3, r0
 8012416:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012418:	7dfb      	ldrb	r3, [r7, #23]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d00f      	beq.n	801243e <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 801241e:	48a8      	ldr	r0, [pc, #672]	@ (80126c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8012420:	f7fe feda 	bl	80111d8 <DbgTraceGetFileName>
 8012424:	4601      	mov	r1, r0
 8012426:	f240 3342 	movw	r3, #834	@ 0x342
 801242a:	4aa6      	ldr	r2, [pc, #664]	@ (80126c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 801242c:	48a6      	ldr	r0, [pc, #664]	@ (80126c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 801242e:	f001 ffc3 	bl	80143b8 <iprintf>
 8012432:	7dfb      	ldrb	r3, [r7, #23]
 8012434:	4619      	mov	r1, r3
 8012436:	48a6      	ldr	r0, [pc, #664]	@ (80126d0 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8012438:	f001 ffbe 	bl	80143b8 <iprintf>
 801243c:	e00c      	b.n	8012458 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 801243e:	48a0      	ldr	r0, [pc, #640]	@ (80126c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8012440:	f7fe feca 	bl	80111d8 <DbgTraceGetFileName>
 8012444:	4601      	mov	r1, r0
 8012446:	f240 3346 	movw	r3, #838	@ 0x346
 801244a:	4a9e      	ldr	r2, [pc, #632]	@ (80126c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 801244c:	489e      	ldr	r0, [pc, #632]	@ (80126c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 801244e:	f001 ffb3 	bl	80143b8 <iprintf>
 8012452:	48a0      	ldr	r0, [pc, #640]	@ (80126d4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8012454:	f002 f818 	bl	8014488 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8012458:	f000 fb7c 	bl	8012b54 <BleGetBdAddress>
 801245c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 801245e:	693a      	ldr	r2, [r7, #16]
 8012460:	2106      	movs	r1, #6
 8012462:	2000      	movs	r0, #0
 8012464:	f7fd fb58 	bl	800fb18 <aci_hal_write_config_data>
 8012468:	4603      	mov	r3, r0
 801246a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801246c:	7dfb      	ldrb	r3, [r7, #23]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d00f      	beq.n	8012492 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8012472:	4893      	ldr	r0, [pc, #588]	@ (80126c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8012474:	f7fe feb0 	bl	80111d8 <DbgTraceGetFileName>
 8012478:	4601      	mov	r1, r0
 801247a:	f44f 7354 	mov.w	r3, #848	@ 0x350
 801247e:	4a91      	ldr	r2, [pc, #580]	@ (80126c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8012480:	4891      	ldr	r0, [pc, #580]	@ (80126c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8012482:	f001 ff99 	bl	80143b8 <iprintf>
 8012486:	7dfb      	ldrb	r3, [r7, #23]
 8012488:	4619      	mov	r1, r3
 801248a:	4893      	ldr	r0, [pc, #588]	@ (80126d8 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 801248c:	f001 ff94 	bl	80143b8 <iprintf>
 8012490:	e035      	b.n	80124fe <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8012492:	488b      	ldr	r0, [pc, #556]	@ (80126c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8012494:	f7fe fea0 	bl	80111d8 <DbgTraceGetFileName>
 8012498:	4601      	mov	r1, r0
 801249a:	f44f 7355 	mov.w	r3, #852	@ 0x354
 801249e:	4a89      	ldr	r2, [pc, #548]	@ (80126c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 80124a0:	4889      	ldr	r0, [pc, #548]	@ (80126c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 80124a2:	f001 ff89 	bl	80143b8 <iprintf>
 80124a6:	488d      	ldr	r0, [pc, #564]	@ (80126dc <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 80124a8:	f001 ffee 	bl	8014488 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 80124ac:	4884      	ldr	r0, [pc, #528]	@ (80126c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 80124ae:	f7fe fe93 	bl	80111d8 <DbgTraceGetFileName>
 80124b2:	4601      	mov	r1, r0
 80124b4:	f240 3355 	movw	r3, #853	@ 0x355
 80124b8:	4a82      	ldr	r2, [pc, #520]	@ (80126c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 80124ba:	4883      	ldr	r0, [pc, #524]	@ (80126c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 80124bc:	f001 ff7c 	bl	80143b8 <iprintf>
 80124c0:	693b      	ldr	r3, [r7, #16]
 80124c2:	3305      	adds	r3, #5
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	4618      	mov	r0, r3
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	3304      	adds	r3, #4
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	461c      	mov	r4, r3
 80124d0:	693b      	ldr	r3, [r7, #16]
 80124d2:	3303      	adds	r3, #3
 80124d4:	781b      	ldrb	r3, [r3, #0]
 80124d6:	461d      	mov	r5, r3
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	3302      	adds	r3, #2
 80124dc:	781b      	ldrb	r3, [r3, #0]
 80124de:	461a      	mov	r2, r3
 80124e0:	693b      	ldr	r3, [r7, #16]
 80124e2:	3301      	adds	r3, #1
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	4619      	mov	r1, r3
 80124e8:	693b      	ldr	r3, [r7, #16]
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	9302      	str	r3, [sp, #8]
 80124ee:	9101      	str	r1, [sp, #4]
 80124f0:	9200      	str	r2, [sp, #0]
 80124f2:	462b      	mov	r3, r5
 80124f4:	4622      	mov	r2, r4
 80124f6:	4601      	mov	r1, r0
 80124f8:	4879      	ldr	r0, [pc, #484]	@ (80126e0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 80124fa:	f001 ff5d 	bl	80143b8 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 80124fe:	693b      	ldr	r3, [r7, #16]
 8012500:	3305      	adds	r3, #5
 8012502:	781a      	ldrb	r2, [r3, #0]
 8012504:	4b77      	ldr	r3, [pc, #476]	@ (80126e4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8012506:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	3304      	adds	r3, #4
 801250c:	781a      	ldrb	r2, [r3, #0]
 801250e:	4b75      	ldr	r3, [pc, #468]	@ (80126e4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8012510:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	3303      	adds	r3, #3
 8012516:	781a      	ldrb	r2, [r3, #0]
 8012518:	4b72      	ldr	r3, [pc, #456]	@ (80126e4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 801251a:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 801251c:	693b      	ldr	r3, [r7, #16]
 801251e:	3302      	adds	r3, #2
 8012520:	781a      	ldrb	r2, [r3, #0]
 8012522:	4b70      	ldr	r3, [pc, #448]	@ (80126e4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8012524:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	3301      	adds	r3, #1
 801252a:	781a      	ldrb	r2, [r3, #0]
 801252c:	4b6d      	ldr	r3, [pc, #436]	@ (80126e4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 801252e:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	781a      	ldrb	r2, [r3, #0]
 8012534:	4b6b      	ldr	r3, [pc, #428]	@ (80126e4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8012536:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8012538:	4a6b      	ldr	r2, [pc, #428]	@ (80126e8 <Ble_Hci_Gap_Gatt_Init+0x300>)
 801253a:	2110      	movs	r1, #16
 801253c:	2018      	movs	r0, #24
 801253e:	f7fd faeb 	bl	800fb18 <aci_hal_write_config_data>
 8012542:	4603      	mov	r3, r0
 8012544:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012546:	7dfb      	ldrb	r3, [r7, #23]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d00f      	beq.n	801256c <Ble_Hci_Gap_Gatt_Init+0x184>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 801254c:	485c      	ldr	r0, [pc, #368]	@ (80126c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 801254e:	f7fe fe43 	bl	80111d8 <DbgTraceGetFileName>
 8012552:	4601      	mov	r1, r0
 8012554:	f44f 7362 	mov.w	r3, #904	@ 0x388
 8012558:	4a5a      	ldr	r2, [pc, #360]	@ (80126c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 801255a:	485b      	ldr	r0, [pc, #364]	@ (80126c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 801255c:	f001 ff2c 	bl	80143b8 <iprintf>
 8012560:	7dfb      	ldrb	r3, [r7, #23]
 8012562:	4619      	mov	r1, r3
 8012564:	4861      	ldr	r0, [pc, #388]	@ (80126ec <Ble_Hci_Gap_Gatt_Init+0x304>)
 8012566:	f001 ff27 	bl	80143b8 <iprintf>
 801256a:	e00c      	b.n	8012586 <Ble_Hci_Gap_Gatt_Init+0x19e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 801256c:	4854      	ldr	r0, [pc, #336]	@ (80126c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 801256e:	f7fe fe33 	bl	80111d8 <DbgTraceGetFileName>
 8012572:	4601      	mov	r1, r0
 8012574:	f44f 7363 	mov.w	r3, #908	@ 0x38c
 8012578:	4a52      	ldr	r2, [pc, #328]	@ (80126c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 801257a:	4853      	ldr	r0, [pc, #332]	@ (80126c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 801257c:	f001 ff1c 	bl	80143b8 <iprintf>
 8012580:	485b      	ldr	r0, [pc, #364]	@ (80126f0 <Ble_Hci_Gap_Gatt_Init+0x308>)
 8012582:	f001 ff81 	bl	8014488 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8012586:	4a5b      	ldr	r2, [pc, #364]	@ (80126f4 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 8012588:	2110      	movs	r1, #16
 801258a:	2008      	movs	r0, #8
 801258c:	f7fd fac4 	bl	800fb18 <aci_hal_write_config_data>
 8012590:	4603      	mov	r3, r0
 8012592:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012594:	7dfb      	ldrb	r3, [r7, #23]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d00f      	beq.n	80125ba <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 801259a:	4849      	ldr	r0, [pc, #292]	@ (80126c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 801259c:	f7fe fe1c 	bl	80111d8 <DbgTraceGetFileName>
 80125a0:	4601      	mov	r1, r0
 80125a2:	f240 3395 	movw	r3, #917	@ 0x395
 80125a6:	4a47      	ldr	r2, [pc, #284]	@ (80126c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 80125a8:	4847      	ldr	r0, [pc, #284]	@ (80126c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 80125aa:	f001 ff05 	bl	80143b8 <iprintf>
 80125ae:	7dfb      	ldrb	r3, [r7, #23]
 80125b0:	4619      	mov	r1, r3
 80125b2:	4851      	ldr	r0, [pc, #324]	@ (80126f8 <Ble_Hci_Gap_Gatt_Init+0x310>)
 80125b4:	f001 ff00 	bl	80143b8 <iprintf>
 80125b8:	e00c      	b.n	80125d4 <Ble_Hci_Gap_Gatt_Init+0x1ec>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 80125ba:	4841      	ldr	r0, [pc, #260]	@ (80126c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 80125bc:	f7fe fe0c 	bl	80111d8 <DbgTraceGetFileName>
 80125c0:	4601      	mov	r1, r0
 80125c2:	f240 3399 	movw	r3, #921	@ 0x399
 80125c6:	4a3f      	ldr	r2, [pc, #252]	@ (80126c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 80125c8:	483f      	ldr	r0, [pc, #252]	@ (80126c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 80125ca:	f001 fef5 	bl	80143b8 <iprintf>
 80125ce:	484b      	ldr	r0, [pc, #300]	@ (80126fc <Ble_Hci_Gap_Gatt_Init+0x314>)
 80125d0:	f001 ff5a 	bl	8014488 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80125d4:	2119      	movs	r1, #25
 80125d6:	2001      	movs	r0, #1
 80125d8:	f7fd fb23 	bl	800fc22 <aci_hal_set_tx_power_level>
 80125dc:	4603      	mov	r3, r0
 80125de:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80125e0:	7dfb      	ldrb	r3, [r7, #23]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d00f      	beq.n	8012606 <Ble_Hci_Gap_Gatt_Init+0x21e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 80125e6:	4836      	ldr	r0, [pc, #216]	@ (80126c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 80125e8:	f7fe fdf6 	bl	80111d8 <DbgTraceGetFileName>
 80125ec:	4601      	mov	r1, r0
 80125ee:	f240 33a2 	movw	r3, #930	@ 0x3a2
 80125f2:	4a34      	ldr	r2, [pc, #208]	@ (80126c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 80125f4:	4834      	ldr	r0, [pc, #208]	@ (80126c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 80125f6:	f001 fedf 	bl	80143b8 <iprintf>
 80125fa:	7dfb      	ldrb	r3, [r7, #23]
 80125fc:	4619      	mov	r1, r3
 80125fe:	4840      	ldr	r0, [pc, #256]	@ (8012700 <Ble_Hci_Gap_Gatt_Init+0x318>)
 8012600:	f001 feda 	bl	80143b8 <iprintf>
 8012604:	e00c      	b.n	8012620 <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8012606:	482e      	ldr	r0, [pc, #184]	@ (80126c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8012608:	f7fe fde6 	bl	80111d8 <DbgTraceGetFileName>
 801260c:	4601      	mov	r1, r0
 801260e:	f240 33a6 	movw	r3, #934	@ 0x3a6
 8012612:	4a2c      	ldr	r2, [pc, #176]	@ (80126c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8012614:	482c      	ldr	r0, [pc, #176]	@ (80126c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8012616:	f001 fecf 	bl	80143b8 <iprintf>
 801261a:	483a      	ldr	r0, [pc, #232]	@ (8012704 <Ble_Hci_Gap_Gatt_Init+0x31c>)
 801261c:	f001 ff34 	bl	8014488 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8012620:	f7fc ff21 	bl	800f466 <aci_gatt_init>
 8012624:	4603      	mov	r3, r0
 8012626:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012628:	7dfb      	ldrb	r3, [r7, #23]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d00f      	beq.n	801264e <Ble_Hci_Gap_Gatt_Init+0x266>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 801262e:	4824      	ldr	r0, [pc, #144]	@ (80126c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8012630:	f7fe fdd2 	bl	80111d8 <DbgTraceGetFileName>
 8012634:	4601      	mov	r1, r0
 8012636:	f240 33af 	movw	r3, #943	@ 0x3af
 801263a:	4a22      	ldr	r2, [pc, #136]	@ (80126c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 801263c:	4822      	ldr	r0, [pc, #136]	@ (80126c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 801263e:	f001 febb 	bl	80143b8 <iprintf>
 8012642:	7dfb      	ldrb	r3, [r7, #23]
 8012644:	4619      	mov	r1, r3
 8012646:	4830      	ldr	r0, [pc, #192]	@ (8012708 <Ble_Hci_Gap_Gatt_Init+0x320>)
 8012648:	f001 feb6 	bl	80143b8 <iprintf>
 801264c:	e00c      	b.n	8012668 <Ble_Hci_Gap_Gatt_Init+0x280>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 801264e:	481c      	ldr	r0, [pc, #112]	@ (80126c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8012650:	f7fe fdc2 	bl	80111d8 <DbgTraceGetFileName>
 8012654:	4601      	mov	r1, r0
 8012656:	f240 33b3 	movw	r3, #947	@ 0x3b3
 801265a:	4a1a      	ldr	r2, [pc, #104]	@ (80126c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 801265c:	481a      	ldr	r0, [pc, #104]	@ (80126c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 801265e:	f001 feab 	bl	80143b8 <iprintf>
 8012662:	482a      	ldr	r0, [pc, #168]	@ (801270c <Ble_Hci_Gap_Gatt_Init+0x324>)
 8012664:	f001 ff10 	bl	8014488 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8012668:	2300      	movs	r3, #0
 801266a:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 801266c:	7bfb      	ldrb	r3, [r7, #15]
 801266e:	f043 0301 	orr.w	r3, r3, #1
 8012672:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8012674:	7bfb      	ldrb	r3, [r7, #15]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d06c      	beq.n	8012754 <Ble_Hci_Gap_Gatt_Init+0x36c>
  {
    const char *name = "WeAct";
 801267a:	4b25      	ldr	r3, [pc, #148]	@ (8012710 <Ble_Hci_Gap_Gatt_Init+0x328>)
 801267c:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 801267e:	1dba      	adds	r2, r7, #6
 8012680:	7bf8      	ldrb	r0, [r7, #15]
 8012682:	1cbb      	adds	r3, r7, #2
 8012684:	9301      	str	r3, [sp, #4]
 8012686:	1d3b      	adds	r3, r7, #4
 8012688:	9300      	str	r3, [sp, #0]
 801268a:	4613      	mov	r3, r2
 801268c:	2207      	movs	r2, #7
 801268e:	2100      	movs	r1, #0
 8012690:	f7fc fda6 	bl	800f1e0 <aci_gap_init>
 8012694:	4603      	mov	r3, r0
 8012696:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8012698:	7dfb      	ldrb	r3, [r7, #23]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d03c      	beq.n	8012718 <Ble_Hci_Gap_Gatt_Init+0x330>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 801269e:	4808      	ldr	r0, [pc, #32]	@ (80126c0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 80126a0:	f7fe fd9a 	bl	80111d8 <DbgTraceGetFileName>
 80126a4:	4601      	mov	r1, r0
 80126a6:	f240 33d3 	movw	r3, #979	@ 0x3d3
 80126aa:	4a06      	ldr	r2, [pc, #24]	@ (80126c4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 80126ac:	4806      	ldr	r0, [pc, #24]	@ (80126c8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 80126ae:	f001 fe83 	bl	80143b8 <iprintf>
 80126b2:	7dfb      	ldrb	r3, [r7, #23]
 80126b4:	4619      	mov	r1, r3
 80126b6:	4817      	ldr	r0, [pc, #92]	@ (8012714 <Ble_Hci_Gap_Gatt_Init+0x32c>)
 80126b8:	f001 fe7e 	bl	80143b8 <iprintf>
 80126bc:	e039      	b.n	8012732 <Ble_Hci_Gap_Gatt_Init+0x34a>
 80126be:	bf00      	nop
 80126c0:	08015964 	.word	0x08015964
 80126c4:	08016824 	.word	0x08016824
 80126c8:	08015980 	.word	0x08015980
 80126cc:	08015d48 	.word	0x08015d48
 80126d0:	08015d74 	.word	0x08015d74
 80126d4:	08015da4 	.word	0x08015da4
 80126d8:	08015dc4 	.word	0x08015dc4
 80126dc:	08015e20 	.word	0x08015e20
 80126e0:	08015e6c 	.word	0x08015e6c
 80126e4:	200000a0 	.word	0x200000a0
 80126e8:	080167d4 	.word	0x080167d4
 80126ec:	08015ea8 	.word	0x08015ea8
 80126f0:	08015f00 	.word	0x08015f00
 80126f4:	080167e4 	.word	0x080167e4
 80126f8:	08015f48 	.word	0x08015f48
 80126fc:	08015fa0 	.word	0x08015fa0
 8012700:	08015fe8 	.word	0x08015fe8
 8012704:	08016028 	.word	0x08016028
 8012708:	08016058 	.word	0x08016058
 801270c:	0801608c 	.word	0x0801608c
 8012710:	080160b0 	.word	0x080160b0
 8012714:	080160b8 	.word	0x080160b8
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8012718:	487e      	ldr	r0, [pc, #504]	@ (8012914 <Ble_Hci_Gap_Gatt_Init+0x52c>)
 801271a:	f7fe fd5d 	bl	80111d8 <DbgTraceGetFileName>
 801271e:	4601      	mov	r1, r0
 8012720:	f240 33d7 	movw	r3, #983	@ 0x3d7
 8012724:	4a7c      	ldr	r2, [pc, #496]	@ (8012918 <Ble_Hci_Gap_Gatt_Init+0x530>)
 8012726:	487d      	ldr	r0, [pc, #500]	@ (801291c <Ble_Hci_Gap_Gatt_Init+0x534>)
 8012728:	f001 fe46 	bl	80143b8 <iprintf>
 801272c:	487c      	ldr	r0, [pc, #496]	@ (8012920 <Ble_Hci_Gap_Gatt_Init+0x538>)
 801272e:	f001 feab 	bl	8014488 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8012732:	88fc      	ldrh	r4, [r7, #6]
 8012734:	88bd      	ldrh	r5, [r7, #4]
 8012736:	68b8      	ldr	r0, [r7, #8]
 8012738:	f7ed fd22 	bl	8000180 <strlen>
 801273c:	4603      	mov	r3, r0
 801273e:	b2da      	uxtb	r2, r3
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	9300      	str	r3, [sp, #0]
 8012744:	4613      	mov	r3, r2
 8012746:	2200      	movs	r2, #0
 8012748:	4629      	mov	r1, r5
 801274a:	4620      	mov	r0, r4
 801274c:	f7fd f88e 	bl	800f86c <aci_gatt_update_char_value>
 8012750:	4603      	mov	r3, r0
 8012752:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8012754:	88f8      	ldrh	r0, [r7, #6]
 8012756:	8879      	ldrh	r1, [r7, #2]
 8012758:	463b      	mov	r3, r7
 801275a:	9300      	str	r3, [sp, #0]
 801275c:	2302      	movs	r3, #2
 801275e:	2200      	movs	r2, #0
 8012760:	f7fd f884 	bl	800f86c <aci_gatt_update_char_value>
 8012764:	4603      	mov	r3, r0
 8012766:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8012768:	2202      	movs	r2, #2
 801276a:	2102      	movs	r1, #2
 801276c:	2000      	movs	r0, #0
 801276e:	f7fd fc3c 	bl	800ffea <hci_le_set_default_phy>
 8012772:	4603      	mov	r3, r0
 8012774:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012776:	7dfb      	ldrb	r3, [r7, #23]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d00f      	beq.n	801279c <Ble_Hci_Gap_Gatt_Init+0x3b4>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 801277c:	4865      	ldr	r0, [pc, #404]	@ (8012914 <Ble_Hci_Gap_Gatt_Init+0x52c>)
 801277e:	f7fe fd2b 	bl	80111d8 <DbgTraceGetFileName>
 8012782:	4601      	mov	r1, r0
 8012784:	f240 33f9 	movw	r3, #1017	@ 0x3f9
 8012788:	4a63      	ldr	r2, [pc, #396]	@ (8012918 <Ble_Hci_Gap_Gatt_Init+0x530>)
 801278a:	4864      	ldr	r0, [pc, #400]	@ (801291c <Ble_Hci_Gap_Gatt_Init+0x534>)
 801278c:	f001 fe14 	bl	80143b8 <iprintf>
 8012790:	7dfb      	ldrb	r3, [r7, #23]
 8012792:	4619      	mov	r1, r3
 8012794:	4863      	ldr	r0, [pc, #396]	@ (8012924 <Ble_Hci_Gap_Gatt_Init+0x53c>)
 8012796:	f001 fe0f 	bl	80143b8 <iprintf>
 801279a:	e00c      	b.n	80127b6 <Ble_Hci_Gap_Gatt_Init+0x3ce>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 801279c:	485d      	ldr	r0, [pc, #372]	@ (8012914 <Ble_Hci_Gap_Gatt_Init+0x52c>)
 801279e:	f7fe fd1b 	bl	80111d8 <DbgTraceGetFileName>
 80127a2:	4601      	mov	r1, r0
 80127a4:	f240 33fd 	movw	r3, #1021	@ 0x3fd
 80127a8:	4a5b      	ldr	r2, [pc, #364]	@ (8012918 <Ble_Hci_Gap_Gatt_Init+0x530>)
 80127aa:	485c      	ldr	r0, [pc, #368]	@ (801291c <Ble_Hci_Gap_Gatt_Init+0x534>)
 80127ac:	f001 fe04 	bl	80143b8 <iprintf>
 80127b0:	485d      	ldr	r0, [pc, #372]	@ (8012928 <Ble_Hci_Gap_Gatt_Init+0x540>)
 80127b2:	f001 fe69 	bl	8014488 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80127b6:	4b5d      	ldr	r3, [pc, #372]	@ (801292c <Ble_Hci_Gap_Gatt_Init+0x544>)
 80127b8:	2201      	movs	r2, #1
 80127ba:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80127bc:	4b5b      	ldr	r3, [pc, #364]	@ (801292c <Ble_Hci_Gap_Gatt_Init+0x544>)
 80127be:	781b      	ldrb	r3, [r3, #0]
 80127c0:	4618      	mov	r0, r3
 80127c2:	f7fc fbf5 	bl	800efb0 <aci_gap_set_io_capability>
 80127c6:	4603      	mov	r3, r0
 80127c8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80127ca:	7dfb      	ldrb	r3, [r7, #23]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d00f      	beq.n	80127f0 <Ble_Hci_Gap_Gatt_Init+0x408>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 80127d0:	4850      	ldr	r0, [pc, #320]	@ (8012914 <Ble_Hci_Gap_Gatt_Init+0x52c>)
 80127d2:	f7fe fd01 	bl	80111d8 <DbgTraceGetFileName>
 80127d6:	4601      	mov	r1, r0
 80127d8:	f240 4307 	movw	r3, #1031	@ 0x407
 80127dc:	4a4e      	ldr	r2, [pc, #312]	@ (8012918 <Ble_Hci_Gap_Gatt_Init+0x530>)
 80127de:	484f      	ldr	r0, [pc, #316]	@ (801291c <Ble_Hci_Gap_Gatt_Init+0x534>)
 80127e0:	f001 fdea 	bl	80143b8 <iprintf>
 80127e4:	7dfb      	ldrb	r3, [r7, #23]
 80127e6:	4619      	mov	r1, r3
 80127e8:	4851      	ldr	r0, [pc, #324]	@ (8012930 <Ble_Hci_Gap_Gatt_Init+0x548>)
 80127ea:	f001 fde5 	bl	80143b8 <iprintf>
 80127ee:	e00c      	b.n	801280a <Ble_Hci_Gap_Gatt_Init+0x422>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 80127f0:	4848      	ldr	r0, [pc, #288]	@ (8012914 <Ble_Hci_Gap_Gatt_Init+0x52c>)
 80127f2:	f7fe fcf1 	bl	80111d8 <DbgTraceGetFileName>
 80127f6:	4601      	mov	r1, r0
 80127f8:	f240 430b 	movw	r3, #1035	@ 0x40b
 80127fc:	4a46      	ldr	r2, [pc, #280]	@ (8012918 <Ble_Hci_Gap_Gatt_Init+0x530>)
 80127fe:	4847      	ldr	r0, [pc, #284]	@ (801291c <Ble_Hci_Gap_Gatt_Init+0x534>)
 8012800:	f001 fdda 	bl	80143b8 <iprintf>
 8012804:	484b      	ldr	r0, [pc, #300]	@ (8012934 <Ble_Hci_Gap_Gatt_Init+0x54c>)
 8012806:	f001 fe3f 	bl	8014488 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 801280a:	4b48      	ldr	r3, [pc, #288]	@ (801292c <Ble_Hci_Gap_Gatt_Init+0x544>)
 801280c:	2201      	movs	r2, #1
 801280e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8012810:	4b46      	ldr	r3, [pc, #280]	@ (801292c <Ble_Hci_Gap_Gatt_Init+0x544>)
 8012812:	2208      	movs	r2, #8
 8012814:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8012816:	4b45      	ldr	r3, [pc, #276]	@ (801292c <Ble_Hci_Gap_Gatt_Init+0x544>)
 8012818:	2210      	movs	r2, #16
 801281a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 801281c:	4b43      	ldr	r3, [pc, #268]	@ (801292c <Ble_Hci_Gap_Gatt_Init+0x544>)
 801281e:	2200      	movs	r2, #0
 8012820:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8012822:	4b42      	ldr	r3, [pc, #264]	@ (801292c <Ble_Hci_Gap_Gatt_Init+0x544>)
 8012824:	4a44      	ldr	r2, [pc, #272]	@ (8012938 <Ble_Hci_Gap_Gatt_Init+0x550>)
 8012826:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8012828:	4b40      	ldr	r3, [pc, #256]	@ (801292c <Ble_Hci_Gap_Gatt_Init+0x544>)
 801282a:	2201      	movs	r2, #1
 801282c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 801282e:	4b3f      	ldr	r3, [pc, #252]	@ (801292c <Ble_Hci_Gap_Gatt_Init+0x544>)
 8012830:	789c      	ldrb	r4, [r3, #2]
 8012832:	4b3e      	ldr	r3, [pc, #248]	@ (801292c <Ble_Hci_Gap_Gatt_Init+0x544>)
 8012834:	785d      	ldrb	r5, [r3, #1]
 8012836:	4b3d      	ldr	r3, [pc, #244]	@ (801292c <Ble_Hci_Gap_Gatt_Init+0x544>)
 8012838:	791b      	ldrb	r3, [r3, #4]
 801283a:	4a3c      	ldr	r2, [pc, #240]	@ (801292c <Ble_Hci_Gap_Gatt_Init+0x544>)
 801283c:	7952      	ldrb	r2, [r2, #5]
 801283e:	493b      	ldr	r1, [pc, #236]	@ (801292c <Ble_Hci_Gap_Gatt_Init+0x544>)
 8012840:	78c9      	ldrb	r1, [r1, #3]
 8012842:	483a      	ldr	r0, [pc, #232]	@ (801292c <Ble_Hci_Gap_Gatt_Init+0x544>)
 8012844:	6880      	ldr	r0, [r0, #8]
 8012846:	2600      	movs	r6, #0
 8012848:	9604      	str	r6, [sp, #16]
 801284a:	9003      	str	r0, [sp, #12]
 801284c:	9102      	str	r1, [sp, #8]
 801284e:	9201      	str	r2, [sp, #4]
 8012850:	9300      	str	r3, [sp, #0]
 8012852:	2300      	movs	r3, #0
 8012854:	2201      	movs	r2, #1
 8012856:	4629      	mov	r1, r5
 8012858:	4620      	mov	r0, r4
 801285a:	f7fc fbfd 	bl	800f058 <aci_gap_set_authentication_requirement>
 801285e:	4603      	mov	r3, r0
 8012860:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8012862:	7dfb      	ldrb	r3, [r7, #23]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d00f      	beq.n	8012888 <Ble_Hci_Gap_Gatt_Init+0x4a0>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8012868:	482a      	ldr	r0, [pc, #168]	@ (8012914 <Ble_Hci_Gap_Gatt_Init+0x52c>)
 801286a:	f7fe fcb5 	bl	80111d8 <DbgTraceGetFileName>
 801286e:	4601      	mov	r1, r0
 8012870:	f240 4326 	movw	r3, #1062	@ 0x426
 8012874:	4a28      	ldr	r2, [pc, #160]	@ (8012918 <Ble_Hci_Gap_Gatt_Init+0x530>)
 8012876:	4829      	ldr	r0, [pc, #164]	@ (801291c <Ble_Hci_Gap_Gatt_Init+0x534>)
 8012878:	f001 fd9e 	bl	80143b8 <iprintf>
 801287c:	7dfb      	ldrb	r3, [r7, #23]
 801287e:	4619      	mov	r1, r3
 8012880:	482e      	ldr	r0, [pc, #184]	@ (801293c <Ble_Hci_Gap_Gatt_Init+0x554>)
 8012882:	f001 fd99 	bl	80143b8 <iprintf>
 8012886:	e00c      	b.n	80128a2 <Ble_Hci_Gap_Gatt_Init+0x4ba>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8012888:	4822      	ldr	r0, [pc, #136]	@ (8012914 <Ble_Hci_Gap_Gatt_Init+0x52c>)
 801288a:	f7fe fca5 	bl	80111d8 <DbgTraceGetFileName>
 801288e:	4601      	mov	r1, r0
 8012890:	f240 432a 	movw	r3, #1066	@ 0x42a
 8012894:	4a20      	ldr	r2, [pc, #128]	@ (8012918 <Ble_Hci_Gap_Gatt_Init+0x530>)
 8012896:	4821      	ldr	r0, [pc, #132]	@ (801291c <Ble_Hci_Gap_Gatt_Init+0x534>)
 8012898:	f001 fd8e 	bl	80143b8 <iprintf>
 801289c:	4828      	ldr	r0, [pc, #160]	@ (8012940 <Ble_Hci_Gap_Gatt_Init+0x558>)
 801289e:	f001 fdf3 	bl	8014488 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80128a2:	4b22      	ldr	r3, [pc, #136]	@ (801292c <Ble_Hci_Gap_Gatt_Init+0x544>)
 80128a4:	789b      	ldrb	r3, [r3, #2]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d023      	beq.n	80128f2 <Ble_Hci_Gap_Gatt_Init+0x50a>
  {
    ret = aci_gap_configure_whitelist();
 80128aa:	f7fc fdb8 	bl	800f41e <aci_gap_configure_filter_accept_list>
 80128ae:	4603      	mov	r3, r0
 80128b0:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 80128b2:	7dfb      	ldrb	r3, [r7, #23]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d00f      	beq.n	80128d8 <Ble_Hci_Gap_Gatt_Init+0x4f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 80128b8:	4816      	ldr	r0, [pc, #88]	@ (8012914 <Ble_Hci_Gap_Gatt_Init+0x52c>)
 80128ba:	f7fe fc8d 	bl	80111d8 <DbgTraceGetFileName>
 80128be:	4601      	mov	r1, r0
 80128c0:	f240 4335 	movw	r3, #1077	@ 0x435
 80128c4:	4a14      	ldr	r2, [pc, #80]	@ (8012918 <Ble_Hci_Gap_Gatt_Init+0x530>)
 80128c6:	4815      	ldr	r0, [pc, #84]	@ (801291c <Ble_Hci_Gap_Gatt_Init+0x534>)
 80128c8:	f001 fd76 	bl	80143b8 <iprintf>
 80128cc:	7dfb      	ldrb	r3, [r7, #23]
 80128ce:	4619      	mov	r1, r3
 80128d0:	481c      	ldr	r0, [pc, #112]	@ (8012944 <Ble_Hci_Gap_Gatt_Init+0x55c>)
 80128d2:	f001 fd71 	bl	80143b8 <iprintf>
 80128d6:	e00c      	b.n	80128f2 <Ble_Hci_Gap_Gatt_Init+0x50a>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 80128d8:	480e      	ldr	r0, [pc, #56]	@ (8012914 <Ble_Hci_Gap_Gatt_Init+0x52c>)
 80128da:	f7fe fc7d 	bl	80111d8 <DbgTraceGetFileName>
 80128de:	4601      	mov	r1, r0
 80128e0:	f240 4339 	movw	r3, #1081	@ 0x439
 80128e4:	4a0c      	ldr	r2, [pc, #48]	@ (8012918 <Ble_Hci_Gap_Gatt_Init+0x530>)
 80128e6:	480d      	ldr	r0, [pc, #52]	@ (801291c <Ble_Hci_Gap_Gatt_Init+0x534>)
 80128e8:	f001 fd66 	bl	80143b8 <iprintf>
 80128ec:	4816      	ldr	r0, [pc, #88]	@ (8012948 <Ble_Hci_Gap_Gatt_Init+0x560>)
 80128ee:	f001 fdcb 	bl	8014488 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 80128f2:	4808      	ldr	r0, [pc, #32]	@ (8012914 <Ble_Hci_Gap_Gatt_Init+0x52c>)
 80128f4:	f7fe fc70 	bl	80111d8 <DbgTraceGetFileName>
 80128f8:	4601      	mov	r1, r0
 80128fa:	f240 433c 	movw	r3, #1084	@ 0x43c
 80128fe:	4a06      	ldr	r2, [pc, #24]	@ (8012918 <Ble_Hci_Gap_Gatt_Init+0x530>)
 8012900:	4806      	ldr	r0, [pc, #24]	@ (801291c <Ble_Hci_Gap_Gatt_Init+0x534>)
 8012902:	f001 fd59 	bl	80143b8 <iprintf>
 8012906:	4811      	ldr	r0, [pc, #68]	@ (801294c <Ble_Hci_Gap_Gatt_Init+0x564>)
 8012908:	f001 fd56 	bl	80143b8 <iprintf>
}
 801290c:	bf00      	nop
 801290e:	371c      	adds	r7, #28
 8012910:	46bd      	mov	sp, r7
 8012912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012914:	08015964 	.word	0x08015964
 8012918:	08016824 	.word	0x08016824
 801291c:	08015980 	.word	0x08015980
 8012920:	080160e8 	.word	0x080160e8
 8012924:	08016108 	.word	0x08016108
 8012928:	08016144 	.word	0x08016144
 801292c:	200015d0 	.word	0x200015d0
 8012930:	08016170 	.word	0x08016170
 8012934:	080161b0 	.word	0x080161b0
 8012938:	0001b207 	.word	0x0001b207
 801293c:	080161e0 	.word	0x080161e0
 8012940:	0801622c 	.word	0x0801622c
 8012944:	08016268 	.word	0x08016268
 8012948:	080162a8 	.word	0x080162a8
 801294c:	080162d8 	.word	0x080162d8

08012950 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b08c      	sub	sp, #48	@ 0x30
 8012954:	af08      	add	r7, sp, #32
 8012956:	4603      	mov	r3, r0
 8012958:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801295a:	2392      	movs	r3, #146	@ 0x92
 801295c:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 801295e:	79fb      	ldrb	r3, [r7, #7]
 8012960:	2b01      	cmp	r3, #1
 8012962:	d106      	bne.n	8012972 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8012964:	4b69      	ldr	r3, [pc, #420]	@ (8012b0c <Adv_Request+0x1bc>)
 8012966:	881b      	ldrh	r3, [r3, #0]
 8012968:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 801296a:	4b69      	ldr	r3, [pc, #420]	@ (8012b10 <Adv_Request+0x1c0>)
 801296c:	881b      	ldrh	r3, [r3, #0]
 801296e:	81bb      	strh	r3, [r7, #12]
 8012970:	e005      	b.n	801297e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8012972:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8012976:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8012978:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 801297c:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 801297e:	4b65      	ldr	r3, [pc, #404]	@ (8012b14 <Adv_Request+0x1c4>)
 8012980:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012984:	4618      	mov	r0, r3
 8012986:	f7ef fccd 	bl	8002324 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 801298a:	79fb      	ldrb	r3, [r7, #7]
 801298c:	2b02      	cmp	r3, #2
 801298e:	d12d      	bne.n	80129ec <Adv_Request+0x9c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8012990:	4b60      	ldr	r3, [pc, #384]	@ (8012b14 <Adv_Request+0x1c4>)
 8012992:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012996:	2b01      	cmp	r3, #1
 8012998:	d004      	beq.n	80129a4 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 801299a:	4b5e      	ldr	r3, [pc, #376]	@ (8012b14 <Adv_Request+0x1c4>)
 801299c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80129a0:	2b02      	cmp	r3, #2
 80129a2:	d123      	bne.n	80129ec <Adv_Request+0x9c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 80129a4:	f7fc f9e6 	bl	800ed74 <aci_gap_set_non_discoverable>
 80129a8:	4603      	mov	r3, r0
 80129aa:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 80129ac:	7afb      	ldrb	r3, [r7, #11]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d00f      	beq.n	80129d2 <Adv_Request+0x82>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 80129b2:	4859      	ldr	r0, [pc, #356]	@ (8012b18 <Adv_Request+0x1c8>)
 80129b4:	f7fe fc10 	bl	80111d8 <DbgTraceGetFileName>
 80129b8:	4601      	mov	r1, r0
 80129ba:	f240 435d 	movw	r3, #1117	@ 0x45d
 80129be:	4a57      	ldr	r2, [pc, #348]	@ (8012b1c <Adv_Request+0x1cc>)
 80129c0:	4857      	ldr	r0, [pc, #348]	@ (8012b20 <Adv_Request+0x1d0>)
 80129c2:	f001 fcf9 	bl	80143b8 <iprintf>
 80129c6:	7afb      	ldrb	r3, [r7, #11]
 80129c8:	4619      	mov	r1, r3
 80129ca:	4856      	ldr	r0, [pc, #344]	@ (8012b24 <Adv_Request+0x1d4>)
 80129cc:	f001 fcf4 	bl	80143b8 <iprintf>
 80129d0:	e00c      	b.n	80129ec <Adv_Request+0x9c>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 80129d2:	4851      	ldr	r0, [pc, #324]	@ (8012b18 <Adv_Request+0x1c8>)
 80129d4:	f7fe fc00 	bl	80111d8 <DbgTraceGetFileName>
 80129d8:	4601      	mov	r1, r0
 80129da:	f240 4361 	movw	r3, #1121	@ 0x461
 80129de:	4a4f      	ldr	r2, [pc, #316]	@ (8012b1c <Adv_Request+0x1cc>)
 80129e0:	484f      	ldr	r0, [pc, #316]	@ (8012b20 <Adv_Request+0x1d0>)
 80129e2:	f001 fce9 	bl	80143b8 <iprintf>
 80129e6:	4850      	ldr	r0, [pc, #320]	@ (8012b28 <Adv_Request+0x1d8>)
 80129e8:	f001 fd4e 	bl	8014488 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80129ec:	4a49      	ldr	r2, [pc, #292]	@ (8012b14 <Adv_Request+0x1c4>)
 80129ee:	79fb      	ldrb	r3, [r7, #7]
 80129f0:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 80129f4:	4b47      	ldr	r3, [pc, #284]	@ (8012b14 <Adv_Request+0x1c4>)
 80129f6:	7e1b      	ldrb	r3, [r3, #24]
 80129f8:	89ba      	ldrh	r2, [r7, #12]
 80129fa:	89f9      	ldrh	r1, [r7, #14]
 80129fc:	2000      	movs	r0, #0
 80129fe:	9006      	str	r0, [sp, #24]
 8012a00:	2000      	movs	r0, #0
 8012a02:	9005      	str	r0, [sp, #20]
 8012a04:	4849      	ldr	r0, [pc, #292]	@ (8012b2c <Adv_Request+0x1dc>)
 8012a06:	9004      	str	r0, [sp, #16]
 8012a08:	9303      	str	r3, [sp, #12]
 8012a0a:	4b49      	ldr	r3, [pc, #292]	@ (8012b30 <Adv_Request+0x1e0>)
 8012a0c:	9302      	str	r3, [sp, #8]
 8012a0e:	2306      	movs	r3, #6
 8012a10:	9301      	str	r3, [sp, #4]
 8012a12:	2300      	movs	r3, #0
 8012a14:	9300      	str	r3, [sp, #0]
 8012a16:	2300      	movs	r3, #0
 8012a18:	2000      	movs	r0, #0
 8012a1a:	f7fc f9cf 	bl	800edbc <aci_gap_set_discoverable>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8012a22:	7afb      	ldrb	r3, [r7, #11]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d00f      	beq.n	8012a48 <Adv_Request+0xf8>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8012a28:	483b      	ldr	r0, [pc, #236]	@ (8012b18 <Adv_Request+0x1c8>)
 8012a2a:	f7fe fbd5 	bl	80111d8 <DbgTraceGetFileName>
 8012a2e:	4601      	mov	r1, r0
 8012a30:	f240 4374 	movw	r3, #1140	@ 0x474
 8012a34:	4a39      	ldr	r2, [pc, #228]	@ (8012b1c <Adv_Request+0x1cc>)
 8012a36:	483a      	ldr	r0, [pc, #232]	@ (8012b20 <Adv_Request+0x1d0>)
 8012a38:	f001 fcbe 	bl	80143b8 <iprintf>
 8012a3c:	7afb      	ldrb	r3, [r7, #11]
 8012a3e:	4619      	mov	r1, r3
 8012a40:	483c      	ldr	r0, [pc, #240]	@ (8012b34 <Adv_Request+0x1e4>)
 8012a42:	f001 fcb9 	bl	80143b8 <iprintf>
 8012a46:	e00c      	b.n	8012a62 <Adv_Request+0x112>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8012a48:	4833      	ldr	r0, [pc, #204]	@ (8012b18 <Adv_Request+0x1c8>)
 8012a4a:	f7fe fbc5 	bl	80111d8 <DbgTraceGetFileName>
 8012a4e:	4601      	mov	r1, r0
 8012a50:	f44f 638f 	mov.w	r3, #1144	@ 0x478
 8012a54:	4a31      	ldr	r2, [pc, #196]	@ (8012b1c <Adv_Request+0x1cc>)
 8012a56:	4832      	ldr	r0, [pc, #200]	@ (8012b20 <Adv_Request+0x1d0>)
 8012a58:	f001 fcae 	bl	80143b8 <iprintf>
 8012a5c:	4836      	ldr	r0, [pc, #216]	@ (8012b38 <Adv_Request+0x1e8>)
 8012a5e:	f001 fd13 	bl	8014488 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 8012a62:	4936      	ldr	r1, [pc, #216]	@ (8012b3c <Adv_Request+0x1ec>)
 8012a64:	200e      	movs	r0, #14
 8012a66:	f7fc fc68 	bl	800f33a <aci_gap_update_adv_data>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 8012a6e:	7afb      	ldrb	r3, [r7, #11]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d022      	beq.n	8012aba <Adv_Request+0x16a>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 8012a74:	79fb      	ldrb	r3, [r7, #7]
 8012a76:	2b01      	cmp	r3, #1
 8012a78:	d10f      	bne.n	8012a9a <Adv_Request+0x14a>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8012a7a:	4827      	ldr	r0, [pc, #156]	@ (8012b18 <Adv_Request+0x1c8>)
 8012a7c:	f7fe fbac 	bl	80111d8 <DbgTraceGetFileName>
 8012a80:	4601      	mov	r1, r0
 8012a82:	f240 4381 	movw	r3, #1153	@ 0x481
 8012a86:	4a25      	ldr	r2, [pc, #148]	@ (8012b1c <Adv_Request+0x1cc>)
 8012a88:	4825      	ldr	r0, [pc, #148]	@ (8012b20 <Adv_Request+0x1d0>)
 8012a8a:	f001 fc95 	bl	80143b8 <iprintf>
 8012a8e:	7afb      	ldrb	r3, [r7, #11]
 8012a90:	4619      	mov	r1, r3
 8012a92:	482b      	ldr	r0, [pc, #172]	@ (8012b40 <Adv_Request+0x1f0>)
 8012a94:	f001 fc90 	bl	80143b8 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 8012a98:	e035      	b.n	8012b06 <Adv_Request+0x1b6>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 8012a9a:	481f      	ldr	r0, [pc, #124]	@ (8012b18 <Adv_Request+0x1c8>)
 8012a9c:	f7fe fb9c 	bl	80111d8 <DbgTraceGetFileName>
 8012aa0:	4601      	mov	r1, r0
 8012aa2:	f240 4385 	movw	r3, #1157	@ 0x485
 8012aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8012b1c <Adv_Request+0x1cc>)
 8012aa8:	481d      	ldr	r0, [pc, #116]	@ (8012b20 <Adv_Request+0x1d0>)
 8012aaa:	f001 fc85 	bl	80143b8 <iprintf>
 8012aae:	7afb      	ldrb	r3, [r7, #11]
 8012ab0:	4619      	mov	r1, r3
 8012ab2:	4824      	ldr	r0, [pc, #144]	@ (8012b44 <Adv_Request+0x1f4>)
 8012ab4:	f001 fc80 	bl	80143b8 <iprintf>
  return;
 8012ab8:	e025      	b.n	8012b06 <Adv_Request+0x1b6>
    if (NewStatus == APP_BLE_FAST_ADV)
 8012aba:	79fb      	ldrb	r3, [r7, #7]
 8012abc:	2b01      	cmp	r3, #1
 8012abe:	d114      	bne.n	8012aea <Adv_Request+0x19a>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8012ac0:	4815      	ldr	r0, [pc, #84]	@ (8012b18 <Adv_Request+0x1c8>)
 8012ac2:	f7fe fb89 	bl	80111d8 <DbgTraceGetFileName>
 8012ac6:	4601      	mov	r1, r0
 8012ac8:	f240 438c 	movw	r3, #1164	@ 0x48c
 8012acc:	4a13      	ldr	r2, [pc, #76]	@ (8012b1c <Adv_Request+0x1cc>)
 8012ace:	4814      	ldr	r0, [pc, #80]	@ (8012b20 <Adv_Request+0x1d0>)
 8012ad0:	f001 fc72 	bl	80143b8 <iprintf>
 8012ad4:	481c      	ldr	r0, [pc, #112]	@ (8012b48 <Adv_Request+0x1f8>)
 8012ad6:	f001 fc6f 	bl	80143b8 <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8012ada:	4b0e      	ldr	r3, [pc, #56]	@ (8012b14 <Adv_Request+0x1c4>)
 8012adc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012ae0:	491a      	ldr	r1, [pc, #104]	@ (8012b4c <Adv_Request+0x1fc>)
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f7ef fca2 	bl	800242c <HW_TS_Start>
  return;
 8012ae8:	e00d      	b.n	8012b06 <Adv_Request+0x1b6>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 8012aea:	480b      	ldr	r0, [pc, #44]	@ (8012b18 <Adv_Request+0x1c8>)
 8012aec:	f7fe fb74 	bl	80111d8 <DbgTraceGetFileName>
 8012af0:	4601      	mov	r1, r0
 8012af2:	f240 4392 	movw	r3, #1170	@ 0x492
 8012af6:	4a09      	ldr	r2, [pc, #36]	@ (8012b1c <Adv_Request+0x1cc>)
 8012af8:	4809      	ldr	r0, [pc, #36]	@ (8012b20 <Adv_Request+0x1d0>)
 8012afa:	f001 fc5d 	bl	80143b8 <iprintf>
 8012afe:	4814      	ldr	r0, [pc, #80]	@ (8012b50 <Adv_Request+0x200>)
 8012b00:	f001 fc5a 	bl	80143b8 <iprintf>
  return;
 8012b04:	bf00      	nop
}
 8012b06:	3710      	adds	r7, #16
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}
 8012b0c:	20001654 	.word	0x20001654
 8012b10:	20001656 	.word	0x20001656
 8012b14:	200015d0 	.word	0x200015d0
 8012b18:	08015964 	.word	0x08015964
 8012b1c:	0801683c 	.word	0x0801683c
 8012b20:	08015980 	.word	0x08015980
 8012b24:	08016304 	.word	0x08016304
 8012b28:	08016350 	.word	0x08016350
 8012b2c:	200015e9 	.word	0x200015e9
 8012b30:	080167f4 	.word	0x080167f4
 8012b34:	08016398 	.word	0x08016398
 8012b38:	080163d0 	.word	0x080163d0
 8012b3c:	200000a0 	.word	0x200000a0
 8012b40:	080163f8 	.word	0x080163f8
 8012b44:	0801642c 	.word	0x0801642c
 8012b48:	08016464 	.word	0x08016464
 8012b4c:	0001e046 	.word	0x0001e046
 8012b50:	0801648c 	.word	0x0801648c

08012b54 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b086      	sub	sp, #24
 8012b58:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8012b5a:	f7ff f8fd 	bl	8011d58 <LL_FLASH_GetUDN>
 8012b5e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8012b60:	693b      	ldr	r3, [r7, #16]
 8012b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b66:	d023      	beq.n	8012bb0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8012b68:	f7ff f90e 	bl	8011d88 <LL_FLASH_GetSTCompanyID>
 8012b6c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8012b6e:	f7ff f8ff 	bl	8011d70 <LL_FLASH_GetDeviceID>
 8012b72:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8012b74:	693b      	ldr	r3, [r7, #16]
 8012b76:	b2da      	uxtb	r2, r3
 8012b78:	4b16      	ldr	r3, [pc, #88]	@ (8012bd4 <BleGetBdAddress+0x80>)
 8012b7a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	0a1b      	lsrs	r3, r3, #8
 8012b80:	b2da      	uxtb	r2, r3
 8012b82:	4b14      	ldr	r3, [pc, #80]	@ (8012bd4 <BleGetBdAddress+0x80>)
 8012b84:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	b2da      	uxtb	r2, r3
 8012b8a:	4b12      	ldr	r3, [pc, #72]	@ (8012bd4 <BleGetBdAddress+0x80>)
 8012b8c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8012b8e:	68bb      	ldr	r3, [r7, #8]
 8012b90:	b2da      	uxtb	r2, r3
 8012b92:	4b10      	ldr	r3, [pc, #64]	@ (8012bd4 <BleGetBdAddress+0x80>)
 8012b94:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	0a1b      	lsrs	r3, r3, #8
 8012b9a:	b2da      	uxtb	r2, r3
 8012b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8012bd4 <BleGetBdAddress+0x80>)
 8012b9e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	0c1b      	lsrs	r3, r3, #16
 8012ba4:	b2da      	uxtb	r2, r3
 8012ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8012bd4 <BleGetBdAddress+0x80>)
 8012ba8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8012baa:	4b0a      	ldr	r3, [pc, #40]	@ (8012bd4 <BleGetBdAddress+0x80>)
 8012bac:	617b      	str	r3, [r7, #20]
 8012bae:	e00b      	b.n	8012bc8 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8012bb0:	2000      	movs	r0, #0
 8012bb2:	f7fe fbef 	bl	8011394 <OTP_Read>
 8012bb6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d002      	beq.n	8012bc4 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	617b      	str	r3, [r7, #20]
 8012bc2:	e001      	b.n	8012bc8 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8012bc4:	4b04      	ldr	r3, [pc, #16]	@ (8012bd8 <BleGetBdAddress+0x84>)
 8012bc6:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8012bc8:	697b      	ldr	r3, [r7, #20]
}
 8012bca:	4618      	mov	r0, r3
 8012bcc:	3718      	adds	r7, #24
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	bd80      	pop	{r7, pc}
 8012bd2:	bf00      	nop
 8012bd4:	200015c8 	.word	0x200015c8
 8012bd8:	080167cc 	.word	0x080167cc

08012bdc <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b082      	sub	sp, #8
 8012be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8012be2:	4b1f      	ldr	r3, [pc, #124]	@ (8012c60 <Adv_Cancel+0x84>)
 8012be4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012be8:	2b05      	cmp	r3, #5
 8012bea:	d035      	beq.n	8012c58 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012bec:	2392      	movs	r3, #146	@ 0x92
 8012bee:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8012bf0:	f7fc f8c0 	bl	800ed74 <aci_gap_set_non_discoverable>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8012bf8:	4b19      	ldr	r3, [pc, #100]	@ (8012c60 <Adv_Cancel+0x84>)
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 8012c00:	79fb      	ldrb	r3, [r7, #7]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d00d      	beq.n	8012c22 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8012c06:	4817      	ldr	r0, [pc, #92]	@ (8012c64 <Adv_Cancel+0x88>)
 8012c08:	f7fe fae6 	bl	80111d8 <DbgTraceGetFileName>
 8012c0c:	4601      	mov	r1, r0
 8012c0e:	f240 43e1 	movw	r3, #1249	@ 0x4e1
 8012c12:	4a15      	ldr	r2, [pc, #84]	@ (8012c68 <Adv_Cancel+0x8c>)
 8012c14:	4815      	ldr	r0, [pc, #84]	@ (8012c6c <Adv_Cancel+0x90>)
 8012c16:	f001 fbcf 	bl	80143b8 <iprintf>
 8012c1a:	4815      	ldr	r0, [pc, #84]	@ (8012c70 <Adv_Cancel+0x94>)
 8012c1c:	f001 fbcc 	bl	80143b8 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8012c20:	e01a      	b.n	8012c58 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 8012c22:	4810      	ldr	r0, [pc, #64]	@ (8012c64 <Adv_Cancel+0x88>)
 8012c24:	f7fe fad8 	bl	80111d8 <DbgTraceGetFileName>
 8012c28:	4601      	mov	r1, r0
 8012c2a:	f240 43e5 	movw	r3, #1253	@ 0x4e5
 8012c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8012c68 <Adv_Cancel+0x8c>)
 8012c30:	480e      	ldr	r0, [pc, #56]	@ (8012c6c <Adv_Cancel+0x90>)
 8012c32:	f001 fbc1 	bl	80143b8 <iprintf>
 8012c36:	480f      	ldr	r0, [pc, #60]	@ (8012c74 <Adv_Cancel+0x98>)
 8012c38:	f001 fbbe 	bl	80143b8 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8012c3c:	4809      	ldr	r0, [pc, #36]	@ (8012c64 <Adv_Cancel+0x88>)
 8012c3e:	f7fe facb 	bl	80111d8 <DbgTraceGetFileName>
 8012c42:	4601      	mov	r1, r0
 8012c44:	f240 43e6 	movw	r3, #1254	@ 0x4e6
 8012c48:	4a07      	ldr	r2, [pc, #28]	@ (8012c68 <Adv_Cancel+0x8c>)
 8012c4a:	4808      	ldr	r0, [pc, #32]	@ (8012c6c <Adv_Cancel+0x90>)
 8012c4c:	f001 fbb4 	bl	80143b8 <iprintf>
 8012c50:	4809      	ldr	r0, [pc, #36]	@ (8012c78 <Adv_Cancel+0x9c>)
 8012c52:	f001 fbb1 	bl	80143b8 <iprintf>
  return;
 8012c56:	bf00      	nop
 8012c58:	bf00      	nop
}
 8012c5a:	3708      	adds	r7, #8
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}
 8012c60:	200015d0 	.word	0x200015d0
 8012c64:	08015964 	.word	0x08015964
 8012c68:	08016848 	.word	0x08016848
 8012c6c:	08015980 	.word	0x08015980
 8012c70:	080164bc 	.word	0x080164bc
 8012c74:	080164e0 	.word	0x080164e0
 8012c78:	080164e8 	.word	0x080164e8

08012c7c <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8012c80:	2100      	movs	r1, #0
 8012c82:	2001      	movs	r0, #1
 8012c84:	f001 f9ba 	bl	8013ffc <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 8012c88:	bf00      	nop
}
 8012c8a:	bd80      	pop	{r7, pc}

08012c8c <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 8012c90:	bf00      	nop
 8012c92:	46bd      	mov	sp, r7
 8012c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c98:	4770      	bx	lr

08012c9a <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8012c9a:	b580      	push	{r7, lr}
 8012c9c:	b082      	sub	sp, #8
 8012c9e:	af00      	add	r7, sp, #0
 8012ca0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8012ca2:	2100      	movs	r1, #0
 8012ca4:	2002      	movs	r0, #2
 8012ca6:	f001 f9a9 	bl	8013ffc <UTIL_SEQ_SetTask>

  return;
 8012caa:	bf00      	nop
}
 8012cac:	3708      	adds	r7, #8
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}

08012cb2 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8012cb2:	b580      	push	{r7, lr}
 8012cb4:	b082      	sub	sp, #8
 8012cb6:	af00      	add	r7, sp, #0
 8012cb8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8012cba:	2001      	movs	r0, #1
 8012cbc:	f001 fa0a 	bl	80140d4 <UTIL_SEQ_SetEvt>

  return;
 8012cc0:	bf00      	nop
}
 8012cc2:	3708      	adds	r7, #8
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}

08012cc8 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b082      	sub	sp, #8
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8012cd0:	2001      	movs	r0, #1
 8012cd2:	f001 fa1f 	bl	8014114 <UTIL_SEQ_WaitEvt>

  return;
 8012cd6:	bf00      	nop
}
 8012cd8:	3708      	adds	r7, #8
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}

08012cde <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8012cde:	b580      	push	{r7, lr}
 8012ce0:	b084      	sub	sp, #16
 8012ce2:	af00      	add	r7, sp, #0
 8012ce4:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	685b      	ldr	r3, [r3, #4]
 8012cee:	3308      	adds	r3, #8
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f7fd fc0f 	bl	8010514 <SVCCTL_UserEvtRx>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8012cfa:	7afb      	ldrb	r3, [r7, #11]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d003      	beq.n	8012d08 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	2201      	movs	r2, #1
 8012d04:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8012d06:	e003      	b.n	8012d10 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	701a      	strb	r2, [r3, #0]
  return;
 8012d0e:	bf00      	nop
}
 8012d10:	3710      	adds	r7, #16
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}

08012d16 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8012d16:	b580      	push	{r7, lr}
 8012d18:	b084      	sub	sp, #16
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8012d20:	79fb      	ldrb	r3, [r7, #7]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d002      	beq.n	8012d2c <BLE_StatusNot+0x16>
 8012d26:	2b01      	cmp	r3, #1
 8012d28:	d006      	beq.n	8012d38 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8012d2a:	e00b      	b.n	8012d44 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8012d2c:	2303      	movs	r3, #3
 8012d2e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8012d30:	68f8      	ldr	r0, [r7, #12]
 8012d32:	f001 f98f 	bl	8014054 <UTIL_SEQ_PauseTask>
      break;
 8012d36:	e005      	b.n	8012d44 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8012d38:	2303      	movs	r3, #3
 8012d3a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8012d3c:	68f8      	ldr	r0, [r7, #12]
 8012d3e:	f001 f9a9 	bl	8014094 <UTIL_SEQ_ResumeTask>
      break;
 8012d42:	bf00      	nop
  }

  return;
 8012d44:	bf00      	nop
}
 8012d46:	3710      	adds	r7, #16
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd80      	pop	{r7, pc}

08012d4c <P2PS_STM_App_Notification>:
uint8_t Notification_Status = 0;
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b082      	sub	sp, #8
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	2b03      	cmp	r3, #3
 8012d5a:	d00e      	beq.n	8012d7a <P2PS_STM_App_Notification+0x2e>
 8012d5c:	2b03      	cmp	r3, #3
 8012d5e:	dc27      	bgt.n	8012db0 <P2PS_STM_App_Notification+0x64>
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d002      	beq.n	8012d6a <P2PS_STM_App_Notification+0x1e>
 8012d64:	2b01      	cmp	r3, #1
 8012d66:	d004      	beq.n	8012d72 <P2PS_STM_App_Notification+0x26>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8012d68:	e022      	b.n	8012db0 <P2PS_STM_App_Notification+0x64>
			Notification_Status = 1;
 8012d6a:	4b14      	ldr	r3, [pc, #80]	@ (8012dbc <P2PS_STM_App_Notification+0x70>)
 8012d6c:	2201      	movs	r2, #1
 8012d6e:	701a      	strb	r2, [r3, #0]
      break;
 8012d70:	e01f      	b.n	8012db2 <P2PS_STM_App_Notification+0x66>
			Notification_Status = 0;
 8012d72:	4b12      	ldr	r3, [pc, #72]	@ (8012dbc <P2PS_STM_App_Notification+0x70>)
 8012d74:	2200      	movs	r2, #0
 8012d76:	701a      	strb	r2, [r3, #0]
      break;
 8012d78:	e01b      	b.n	8012db2 <P2PS_STM_App_Notification+0x66>
		led_blink_en = pNotification->DataTransfered.pPayload[0];
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	781a      	ldrb	r2, [r3, #0]
 8012d80:	4b0f      	ldr	r3, [pc, #60]	@ (8012dc0 <P2PS_STM_App_Notification+0x74>)
 8012d82:	701a      	strb	r2, [r3, #0]
		APP_DBG_MSG("0x%x%x\r\n",pNotification->DataTransfered.pPayload[0],pNotification->DataTransfered.pPayload[1]);
 8012d84:	480f      	ldr	r0, [pc, #60]	@ (8012dc4 <P2PS_STM_App_Notification+0x78>)
 8012d86:	f7fe fa27 	bl	80111d8 <DbgTraceGetFileName>
 8012d8a:	4601      	mov	r1, r0
 8012d8c:	2357      	movs	r3, #87	@ 0x57
 8012d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8012dc8 <P2PS_STM_App_Notification+0x7c>)
 8012d90:	480e      	ldr	r0, [pc, #56]	@ (8012dcc <P2PS_STM_App_Notification+0x80>)
 8012d92:	f001 fb11 	bl	80143b8 <iprintf>
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	685b      	ldr	r3, [r3, #4]
 8012d9a:	781b      	ldrb	r3, [r3, #0]
 8012d9c:	4619      	mov	r1, r3
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	685b      	ldr	r3, [r3, #4]
 8012da2:	3301      	adds	r3, #1
 8012da4:	781b      	ldrb	r3, [r3, #0]
 8012da6:	461a      	mov	r2, r3
 8012da8:	4809      	ldr	r0, [pc, #36]	@ (8012dd0 <P2PS_STM_App_Notification+0x84>)
 8012daa:	f001 fb05 	bl	80143b8 <iprintf>
      break;
 8012dae:	e000      	b.n	8012db2 <P2PS_STM_App_Notification+0x66>
      break;
 8012db0:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8012db2:	bf00      	nop
}
 8012db4:	3708      	adds	r7, #8
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
 8012dba:	bf00      	nop
 8012dbc:	2000165c 	.word	0x2000165c
 8012dc0:	200000ae 	.word	0x200000ae
 8012dc4:	08016504 	.word	0x08016504
 8012dc8:	08016854 	.word	0x08016854
 8012dcc:	08016528 	.word	0x08016528
 8012dd0:	0801653c 	.word	0x0801653c

08012dd4 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b083      	sub	sp, #12
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	781b      	ldrb	r3, [r3, #0]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d002      	beq.n	8012dea <P2PS_APP_Notification+0x16>
 8012de4:	2b01      	cmp	r3, #1
 8012de6:	d002      	beq.n	8012dee <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8012de8:	e002      	b.n	8012df0 <P2PS_APP_Notification+0x1c>
    break;
 8012dea:	bf00      	nop
 8012dec:	e000      	b.n	8012df0 <P2PS_APP_Notification+0x1c>
    break;
 8012dee:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8012df0:	bf00      	nop
}
 8012df2:	370c      	adds	r7, #12
 8012df4:	46bd      	mov	sp, r7
 8012df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfa:	4770      	bx	lr

08012dfc <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8012dfc:	b480      	push	{r7}
 8012dfe:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 8012e00:	bf00      	nop
}
 8012e02:	46bd      	mov	sp, r7
 8012e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e08:	4770      	bx	lr
	...

08012e0c <LL_PWR_EnableBootC2>:
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8012e10:	4b05      	ldr	r3, [pc, #20]	@ (8012e28 <LL_PWR_EnableBootC2+0x1c>)
 8012e12:	68db      	ldr	r3, [r3, #12]
 8012e14:	4a04      	ldr	r2, [pc, #16]	@ (8012e28 <LL_PWR_EnableBootC2+0x1c>)
 8012e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012e1a:	60d3      	str	r3, [r2, #12]
}
 8012e1c:	bf00      	nop
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e24:	4770      	bx	lr
 8012e26:	bf00      	nop
 8012e28:	58000400 	.word	0x58000400

08012e2c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8012e2c:	b480      	push	{r7}
 8012e2e:	b083      	sub	sp, #12
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8012e34:	4b06      	ldr	r3, [pc, #24]	@ (8012e50 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8012e36:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8012e3a:	4905      	ldr	r1, [pc, #20]	@ (8012e50 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	4313      	orrs	r3, r2
 8012e40:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8012e44:	bf00      	nop
 8012e46:	370c      	adds	r7, #12
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr
 8012e50:	58000800 	.word	0x58000800

08012e54 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8012e54:	b480      	push	{r7}
 8012e56:	b083      	sub	sp, #12
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8012e5c:	4b05      	ldr	r3, [pc, #20]	@ (8012e74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8012e5e:	6a1a      	ldr	r2, [r3, #32]
 8012e60:	4904      	ldr	r1, [pc, #16]	@ (8012e74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	4313      	orrs	r3, r2
 8012e66:	620b      	str	r3, [r1, #32]
}
 8012e68:	bf00      	nop
 8012e6a:	370c      	adds	r7, #12
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e72:	4770      	bx	lr
 8012e74:	58000800 	.word	0x58000800

08012e78 <LL_AHB3_GRP1_EnableClock>:
{
 8012e78:	b480      	push	{r7}
 8012e7a:	b085      	sub	sp, #20
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8012e80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012e84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012e86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	4313      	orrs	r3, r2
 8012e8e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8012e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012e94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	4013      	ands	r3, r2
 8012e9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
}
 8012e9e:	bf00      	nop
 8012ea0:	3714      	adds	r7, #20
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea8:	4770      	bx	lr

08012eaa <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8012eaa:	b480      	push	{r7}
 8012eac:	b085      	sub	sp, #20
 8012eae:	af00      	add	r7, sp, #0
 8012eb0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8012eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012eb6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8012eba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	4313      	orrs	r3, r2
 8012ec2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8012ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012eca:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	4013      	ands	r3, r2
 8012ed2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
}
 8012ed6:	bf00      	nop
 8012ed8:	3714      	adds	r7, #20
 8012eda:	46bd      	mov	sp, r7
 8012edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee0:	4770      	bx	lr

08012ee2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8012ee2:	b480      	push	{r7}
 8012ee4:	b083      	sub	sp, #12
 8012ee6:	af00      	add	r7, sp, #0
 8012ee8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	601a      	str	r2, [r3, #0]
}
 8012ef6:	bf00      	nop
 8012ef8:	370c      	adds	r7, #12
 8012efa:	46bd      	mov	sp, r7
 8012efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f00:	4770      	bx	lr

08012f02 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8012f02:	b480      	push	{r7}
 8012f04:	b083      	sub	sp, #12
 8012f06:	af00      	add	r7, sp, #0
 8012f08:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	f043 0201 	orr.w	r2, r3, #1
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	601a      	str	r2, [r3, #0]
}
 8012f16:	bf00      	nop
 8012f18:	370c      	adds	r7, #12
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f20:	4770      	bx	lr

08012f22 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8012f22:	b480      	push	{r7}
 8012f24:	b083      	sub	sp, #12
 8012f26:	af00      	add	r7, sp, #0
 8012f28:	6078      	str	r0, [r7, #4]
 8012f2a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	685a      	ldr	r2, [r3, #4]
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	041b      	lsls	r3, r3, #16
 8012f34:	43db      	mvns	r3, r3
 8012f36:	401a      	ands	r2, r3
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	605a      	str	r2, [r3, #4]
}
 8012f3c:	bf00      	nop
 8012f3e:	370c      	adds	r7, #12
 8012f40:	46bd      	mov	sp, r7
 8012f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f46:	4770      	bx	lr

08012f48 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8012f48:	b480      	push	{r7}
 8012f4a:	b083      	sub	sp, #12
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	685a      	ldr	r2, [r3, #4]
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	041b      	lsls	r3, r3, #16
 8012f5a:	431a      	orrs	r2, r3
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	605a      	str	r2, [r3, #4]
}
 8012f60:	bf00      	nop
 8012f62:	370c      	adds	r7, #12
 8012f64:	46bd      	mov	sp, r7
 8012f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6a:	4770      	bx	lr

08012f6c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	b083      	sub	sp, #12
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	685a      	ldr	r2, [r3, #4]
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	43db      	mvns	r3, r3
 8012f7e:	401a      	ands	r2, r3
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	605a      	str	r2, [r3, #4]
}
 8012f84:	bf00      	nop
 8012f86:	370c      	adds	r7, #12
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8e:	4770      	bx	lr

08012f90 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8012f90:	b480      	push	{r7}
 8012f92:	b083      	sub	sp, #12
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	683a      	ldr	r2, [r7, #0]
 8012f9e:	609a      	str	r2, [r3, #8]
}
 8012fa0:	bf00      	nop
 8012fa2:	370c      	adds	r7, #12
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012faa:	4770      	bx	lr

08012fac <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8012fac:	b480      	push	{r7}
 8012fae:	b083      	sub	sp, #12
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
 8012fb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	041a      	lsls	r2, r3, #16
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	609a      	str	r2, [r3, #8]
}
 8012fbe:	bf00      	nop
 8012fc0:	370c      	adds	r7, #12
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc8:	4770      	bx	lr

08012fca <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8012fca:	b480      	push	{r7}
 8012fcc:	b083      	sub	sp, #12
 8012fce:	af00      	add	r7, sp, #0
 8012fd0:	6078      	str	r0, [r7, #4]
 8012fd2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	68da      	ldr	r2, [r3, #12]
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	4013      	ands	r3, r2
 8012fdc:	683a      	ldr	r2, [r7, #0]
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	d101      	bne.n	8012fe6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8012fe2:	2301      	movs	r3, #1
 8012fe4:	e000      	b.n	8012fe8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8012fe6:	2300      	movs	r3, #0
}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	370c      	adds	r7, #12
 8012fec:	46bd      	mov	sp, r7
 8012fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff2:	4770      	bx	lr

08012ff4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b083      	sub	sp, #12
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
 8012ffc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	69da      	ldr	r2, [r3, #28]
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	4013      	ands	r3, r2
 8013006:	683a      	ldr	r2, [r7, #0]
 8013008:	429a      	cmp	r2, r3
 801300a:	d101      	bne.n	8013010 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 801300c:	2301      	movs	r3, #1
 801300e:	e000      	b.n	8013012 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8013010:	2300      	movs	r3, #0
}
 8013012:	4618      	mov	r0, r3
 8013014:	370c      	adds	r7, #12
 8013016:	46bd      	mov	sp, r7
 8013018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301c:	4770      	bx	lr
	...

08013020 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8013020:	b580      	push	{r7, lr}
 8013022:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8013024:	2102      	movs	r1, #2
 8013026:	4818      	ldr	r0, [pc, #96]	@ (8013088 <HW_IPCC_Rx_Handler+0x68>)
 8013028:	f7ff ffe4 	bl	8012ff4 <LL_C2_IPCC_IsActiveFlag_CHx>
 801302c:	4603      	mov	r3, r0
 801302e:	2b00      	cmp	r3, #0
 8013030:	d008      	beq.n	8013044 <HW_IPCC_Rx_Handler+0x24>
 8013032:	4b15      	ldr	r3, [pc, #84]	@ (8013088 <HW_IPCC_Rx_Handler+0x68>)
 8013034:	685b      	ldr	r3, [r3, #4]
 8013036:	f003 0302 	and.w	r3, r3, #2
 801303a:	2b00      	cmp	r3, #0
 801303c:	d102      	bne.n	8013044 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 801303e:	f000 f8d5 	bl	80131ec <HW_IPCC_SYS_EvtHandler>
 8013042:	e01e      	b.n	8013082 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8013044:	2101      	movs	r1, #1
 8013046:	4810      	ldr	r0, [pc, #64]	@ (8013088 <HW_IPCC_Rx_Handler+0x68>)
 8013048:	f7ff ffd4 	bl	8012ff4 <LL_C2_IPCC_IsActiveFlag_CHx>
 801304c:	4603      	mov	r3, r0
 801304e:	2b00      	cmp	r3, #0
 8013050:	d008      	beq.n	8013064 <HW_IPCC_Rx_Handler+0x44>
 8013052:	4b0d      	ldr	r3, [pc, #52]	@ (8013088 <HW_IPCC_Rx_Handler+0x68>)
 8013054:	685b      	ldr	r3, [r3, #4]
 8013056:	f003 0301 	and.w	r3, r3, #1
 801305a:	2b00      	cmp	r3, #0
 801305c:	d102      	bne.n	8013064 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 801305e:	f000 f889 	bl	8013174 <HW_IPCC_BLE_EvtHandler>
 8013062:	e00e      	b.n	8013082 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8013064:	2108      	movs	r1, #8
 8013066:	4808      	ldr	r0, [pc, #32]	@ (8013088 <HW_IPCC_Rx_Handler+0x68>)
 8013068:	f7ff ffc4 	bl	8012ff4 <LL_C2_IPCC_IsActiveFlag_CHx>
 801306c:	4603      	mov	r3, r0
 801306e:	2b00      	cmp	r3, #0
 8013070:	d008      	beq.n	8013084 <HW_IPCC_Rx_Handler+0x64>
 8013072:	4b05      	ldr	r3, [pc, #20]	@ (8013088 <HW_IPCC_Rx_Handler+0x68>)
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	f003 0308 	and.w	r3, r3, #8
 801307a:	2b00      	cmp	r3, #0
 801307c:	d102      	bne.n	8013084 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 801307e:	f000 f901 	bl	8013284 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8013082:	bf00      	nop
 8013084:	bf00      	nop
}
 8013086:	bd80      	pop	{r7, pc}
 8013088:	58000c00 	.word	0x58000c00

0801308c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 801308c:	b580      	push	{r7, lr}
 801308e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8013090:	2102      	movs	r1, #2
 8013092:	4818      	ldr	r0, [pc, #96]	@ (80130f4 <HW_IPCC_Tx_Handler+0x68>)
 8013094:	f7ff ff99 	bl	8012fca <LL_C1_IPCC_IsActiveFlag_CHx>
 8013098:	4603      	mov	r3, r0
 801309a:	2b00      	cmp	r3, #0
 801309c:	d108      	bne.n	80130b0 <HW_IPCC_Tx_Handler+0x24>
 801309e:	4b15      	ldr	r3, [pc, #84]	@ (80130f4 <HW_IPCC_Tx_Handler+0x68>)
 80130a0:	685b      	ldr	r3, [r3, #4]
 80130a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d102      	bne.n	80130b0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80130aa:	f000 f893 	bl	80131d4 <HW_IPCC_SYS_CmdEvtHandler>
 80130ae:	e01e      	b.n	80130ee <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80130b0:	2108      	movs	r1, #8
 80130b2:	4810      	ldr	r0, [pc, #64]	@ (80130f4 <HW_IPCC_Tx_Handler+0x68>)
 80130b4:	f7ff ff89 	bl	8012fca <LL_C1_IPCC_IsActiveFlag_CHx>
 80130b8:	4603      	mov	r3, r0
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d108      	bne.n	80130d0 <HW_IPCC_Tx_Handler+0x44>
 80130be:	4b0d      	ldr	r3, [pc, #52]	@ (80130f4 <HW_IPCC_Tx_Handler+0x68>)
 80130c0:	685b      	ldr	r3, [r3, #4]
 80130c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d102      	bne.n	80130d0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80130ca:	f000 f8bd 	bl	8013248 <HW_IPCC_MM_FreeBufHandler>
 80130ce:	e00e      	b.n	80130ee <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80130d0:	2120      	movs	r1, #32
 80130d2:	4808      	ldr	r0, [pc, #32]	@ (80130f4 <HW_IPCC_Tx_Handler+0x68>)
 80130d4:	f7ff ff79 	bl	8012fca <LL_C1_IPCC_IsActiveFlag_CHx>
 80130d8:	4603      	mov	r3, r0
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d108      	bne.n	80130f0 <HW_IPCC_Tx_Handler+0x64>
 80130de:	4b05      	ldr	r3, [pc, #20]	@ (80130f4 <HW_IPCC_Tx_Handler+0x68>)
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d102      	bne.n	80130f0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80130ea:	f000 f84f 	bl	801318c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80130ee:	bf00      	nop
 80130f0:	bf00      	nop
}
 80130f2:	bd80      	pop	{r7, pc}
 80130f4:	58000c00 	.word	0x58000c00

080130f8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80130fc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8013100:	f7ff fed3 	bl	8012eaa <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8013104:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8013108:	f7ff fea4 	bl	8012e54 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 801310c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8013110:	f7ff fe8c 	bl	8012e2c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8013114:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8013116:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8013118:	f7ff fe78 	bl	8012e0c <LL_PWR_EnableBootC2>

  return;
 801311c:	bf00      	nop
}
 801311e:	bd80      	pop	{r7, pc}

08013120 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8013120:	b580      	push	{r7, lr}
 8013122:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8013124:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8013128:	f7ff fea6 	bl	8012e78 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 801312c:	4806      	ldr	r0, [pc, #24]	@ (8013148 <HW_IPCC_Init+0x28>)
 801312e:	f7ff fee8 	bl	8012f02 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8013132:	4805      	ldr	r0, [pc, #20]	@ (8013148 <HW_IPCC_Init+0x28>)
 8013134:	f7ff fed5 	bl	8012ee2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8013138:	202c      	movs	r0, #44	@ 0x2c
 801313a:	f7f1 fb90 	bl	800485e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801313e:	202d      	movs	r0, #45	@ 0x2d
 8013140:	f7f1 fb8d 	bl	800485e <HAL_NVIC_EnableIRQ>

  return;
 8013144:	bf00      	nop
}
 8013146:	bd80      	pop	{r7, pc}
 8013148:	58000c00 	.word	0x58000c00

0801314c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 801314c:	b580      	push	{r7, lr}
 801314e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8013150:	2101      	movs	r1, #1
 8013152:	4802      	ldr	r0, [pc, #8]	@ (801315c <HW_IPCC_BLE_Init+0x10>)
 8013154:	f7ff ff0a 	bl	8012f6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8013158:	bf00      	nop
}
 801315a:	bd80      	pop	{r7, pc}
 801315c:	58000c00 	.word	0x58000c00

08013160 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8013160:	b580      	push	{r7, lr}
 8013162:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8013164:	2101      	movs	r1, #1
 8013166:	4802      	ldr	r0, [pc, #8]	@ (8013170 <HW_IPCC_BLE_SendCmd+0x10>)
 8013168:	f7ff ff20 	bl	8012fac <LL_C1_IPCC_SetFlag_CHx>

  return;
 801316c:	bf00      	nop
}
 801316e:	bd80      	pop	{r7, pc}
 8013170:	58000c00 	.word	0x58000c00

08013174 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8013174:	b580      	push	{r7, lr}
 8013176:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8013178:	f7fd fe76 	bl	8010e68 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801317c:	2101      	movs	r1, #1
 801317e:	4802      	ldr	r0, [pc, #8]	@ (8013188 <HW_IPCC_BLE_EvtHandler+0x14>)
 8013180:	f7ff ff06 	bl	8012f90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8013184:	bf00      	nop
}
 8013186:	bd80      	pop	{r7, pc}
 8013188:	58000c00 	.word	0x58000c00

0801318c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 801318c:	b580      	push	{r7, lr}
 801318e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8013190:	2120      	movs	r1, #32
 8013192:	4803      	ldr	r0, [pc, #12]	@ (80131a0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8013194:	f7ff fed8 	bl	8012f48 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8013198:	f7fd fe96 	bl	8010ec8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 801319c:	bf00      	nop
}
 801319e:	bd80      	pop	{r7, pc}
 80131a0:	58000c00 	.word	0x58000c00

080131a4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80131a8:	2102      	movs	r1, #2
 80131aa:	4802      	ldr	r0, [pc, #8]	@ (80131b4 <HW_IPCC_SYS_Init+0x10>)
 80131ac:	f7ff fede 	bl	8012f6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80131b0:	bf00      	nop
}
 80131b2:	bd80      	pop	{r7, pc}
 80131b4:	58000c00 	.word	0x58000c00

080131b8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80131bc:	2102      	movs	r1, #2
 80131be:	4804      	ldr	r0, [pc, #16]	@ (80131d0 <HW_IPCC_SYS_SendCmd+0x18>)
 80131c0:	f7ff fef4 	bl	8012fac <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80131c4:	2102      	movs	r1, #2
 80131c6:	4802      	ldr	r0, [pc, #8]	@ (80131d0 <HW_IPCC_SYS_SendCmd+0x18>)
 80131c8:	f7ff feab 	bl	8012f22 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80131cc:	bf00      	nop
}
 80131ce:	bd80      	pop	{r7, pc}
 80131d0:	58000c00 	.word	0x58000c00

080131d4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80131d8:	2102      	movs	r1, #2
 80131da:	4803      	ldr	r0, [pc, #12]	@ (80131e8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80131dc:	f7ff feb4 	bl	8012f48 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80131e0:	f7fd fec2 	bl	8010f68 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80131e4:	bf00      	nop
}
 80131e6:	bd80      	pop	{r7, pc}
 80131e8:	58000c00 	.word	0x58000c00

080131ec <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80131f0:	f7fd fed0 	bl	8010f94 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80131f4:	2102      	movs	r1, #2
 80131f6:	4802      	ldr	r0, [pc, #8]	@ (8013200 <HW_IPCC_SYS_EvtHandler+0x14>)
 80131f8:	f7ff feca 	bl	8012f90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80131fc:	bf00      	nop
}
 80131fe:	bd80      	pop	{r7, pc}
 8013200:	58000c00 	.word	0x58000c00

08013204 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b082      	sub	sp, #8
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 801320c:	2108      	movs	r1, #8
 801320e:	480c      	ldr	r0, [pc, #48]	@ (8013240 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8013210:	f7ff fedb 	bl	8012fca <LL_C1_IPCC_IsActiveFlag_CHx>
 8013214:	4603      	mov	r3, r0
 8013216:	2b00      	cmp	r3, #0
 8013218:	d007      	beq.n	801322a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801321a:	4a0a      	ldr	r2, [pc, #40]	@ (8013244 <HW_IPCC_MM_SendFreeBuf+0x40>)
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8013220:	2108      	movs	r1, #8
 8013222:	4807      	ldr	r0, [pc, #28]	@ (8013240 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8013224:	f7ff fe7d 	bl	8012f22 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8013228:	e006      	b.n	8013238 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801322e:	2108      	movs	r1, #8
 8013230:	4803      	ldr	r0, [pc, #12]	@ (8013240 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8013232:	f7ff febb 	bl	8012fac <LL_C1_IPCC_SetFlag_CHx>
  return;
 8013236:	bf00      	nop
}
 8013238:	3708      	adds	r7, #8
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
 801323e:	bf00      	nop
 8013240:	58000c00 	.word	0x58000c00
 8013244:	20001660 	.word	0x20001660

08013248 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8013248:	b580      	push	{r7, lr}
 801324a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801324c:	2108      	movs	r1, #8
 801324e:	4806      	ldr	r0, [pc, #24]	@ (8013268 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8013250:	f7ff fe7a 	bl	8012f48 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8013254:	4b05      	ldr	r3, [pc, #20]	@ (801326c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801325a:	2108      	movs	r1, #8
 801325c:	4802      	ldr	r0, [pc, #8]	@ (8013268 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801325e:	f7ff fea5 	bl	8012fac <LL_C1_IPCC_SetFlag_CHx>

  return;
 8013262:	bf00      	nop
}
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	58000c00 	.word	0x58000c00
 801326c:	20001660 	.word	0x20001660

08013270 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8013270:	b580      	push	{r7, lr}
 8013272:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8013274:	2108      	movs	r1, #8
 8013276:	4802      	ldr	r0, [pc, #8]	@ (8013280 <HW_IPCC_TRACES_Init+0x10>)
 8013278:	f7ff fe78 	bl	8012f6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801327c:	bf00      	nop
}
 801327e:	bd80      	pop	{r7, pc}
 8013280:	58000c00 	.word	0x58000c00

08013284 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8013284:	b580      	push	{r7, lr}
 8013286:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8013288:	f7fd ff2c 	bl	80110e4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 801328c:	2108      	movs	r1, #8
 801328e:	4802      	ldr	r0, [pc, #8]	@ (8013298 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8013290:	f7ff fe7e 	bl	8012f90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8013294:	bf00      	nop
}
 8013296:	bd80      	pop	{r7, pc}
 8013298:	58000c00 	.word	0x58000c00

0801329c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80132a0:	2200      	movs	r2, #0
 80132a2:	4912      	ldr	r1, [pc, #72]	@ (80132ec <MX_USB_Device_Init+0x50>)
 80132a4:	4812      	ldr	r0, [pc, #72]	@ (80132f0 <MX_USB_Device_Init+0x54>)
 80132a6:	f7fa facb 	bl	800d840 <USBD_Init>
 80132aa:	4603      	mov	r3, r0
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d001      	beq.n	80132b4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80132b0:	f7ef fb7c 	bl	80029ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80132b4:	490f      	ldr	r1, [pc, #60]	@ (80132f4 <MX_USB_Device_Init+0x58>)
 80132b6:	480e      	ldr	r0, [pc, #56]	@ (80132f0 <MX_USB_Device_Init+0x54>)
 80132b8:	f7fa faf2 	bl	800d8a0 <USBD_RegisterClass>
 80132bc:	4603      	mov	r3, r0
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d001      	beq.n	80132c6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80132c2:	f7ef fb73 	bl	80029ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80132c6:	490c      	ldr	r1, [pc, #48]	@ (80132f8 <MX_USB_Device_Init+0x5c>)
 80132c8:	4809      	ldr	r0, [pc, #36]	@ (80132f0 <MX_USB_Device_Init+0x54>)
 80132ca:	f7fa f9e9 	bl	800d6a0 <USBD_CDC_RegisterInterface>
 80132ce:	4603      	mov	r3, r0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d001      	beq.n	80132d8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80132d4:	f7ef fb6a 	bl	80029ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80132d8:	4805      	ldr	r0, [pc, #20]	@ (80132f0 <MX_USB_Device_Init+0x54>)
 80132da:	f7fa fb17 	bl	800d90c <USBD_Start>
 80132de:	4603      	mov	r3, r0
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d001      	beq.n	80132e8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80132e4:	f7ef fb62 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80132e8:	bf00      	nop
 80132ea:	bd80      	pop	{r7, pc}
 80132ec:	200000c4 	.word	0x200000c4
 80132f0:	20001664 	.word	0x20001664
 80132f4:	20000020 	.word	0x20000020
 80132f8:	200000b0 	.word	0x200000b0

080132fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013300:	2200      	movs	r2, #0
 8013302:	4905      	ldr	r1, [pc, #20]	@ (8013318 <CDC_Init_FS+0x1c>)
 8013304:	4805      	ldr	r0, [pc, #20]	@ (801331c <CDC_Init_FS+0x20>)
 8013306:	f7fa f9e5 	bl	800d6d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801330a:	4905      	ldr	r1, [pc, #20]	@ (8013320 <CDC_Init_FS+0x24>)
 801330c:	4803      	ldr	r0, [pc, #12]	@ (801331c <CDC_Init_FS+0x20>)
 801330e:	f7fa fa03 	bl	800d718 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013312:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013314:	4618      	mov	r0, r3
 8013316:	bd80      	pop	{r7, pc}
 8013318:	20002140 	.word	0x20002140
 801331c:	20001664 	.word	0x20001664
 8013320:	20001940 	.word	0x20001940

08013324 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013324:	b480      	push	{r7}
 8013326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013328:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801332a:	4618      	mov	r0, r3
 801332c:	46bd      	mov	sp, r7
 801332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013332:	4770      	bx	lr

08013334 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013334:	b480      	push	{r7}
 8013336:	b083      	sub	sp, #12
 8013338:	af00      	add	r7, sp, #0
 801333a:	4603      	mov	r3, r0
 801333c:	6039      	str	r1, [r7, #0]
 801333e:	71fb      	strb	r3, [r7, #7]
 8013340:	4613      	mov	r3, r2
 8013342:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013344:	79fb      	ldrb	r3, [r7, #7]
 8013346:	2b23      	cmp	r3, #35	@ 0x23
 8013348:	d84a      	bhi.n	80133e0 <CDC_Control_FS+0xac>
 801334a:	a201      	add	r2, pc, #4	@ (adr r2, 8013350 <CDC_Control_FS+0x1c>)
 801334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013350:	080133e1 	.word	0x080133e1
 8013354:	080133e1 	.word	0x080133e1
 8013358:	080133e1 	.word	0x080133e1
 801335c:	080133e1 	.word	0x080133e1
 8013360:	080133e1 	.word	0x080133e1
 8013364:	080133e1 	.word	0x080133e1
 8013368:	080133e1 	.word	0x080133e1
 801336c:	080133e1 	.word	0x080133e1
 8013370:	080133e1 	.word	0x080133e1
 8013374:	080133e1 	.word	0x080133e1
 8013378:	080133e1 	.word	0x080133e1
 801337c:	080133e1 	.word	0x080133e1
 8013380:	080133e1 	.word	0x080133e1
 8013384:	080133e1 	.word	0x080133e1
 8013388:	080133e1 	.word	0x080133e1
 801338c:	080133e1 	.word	0x080133e1
 8013390:	080133e1 	.word	0x080133e1
 8013394:	080133e1 	.word	0x080133e1
 8013398:	080133e1 	.word	0x080133e1
 801339c:	080133e1 	.word	0x080133e1
 80133a0:	080133e1 	.word	0x080133e1
 80133a4:	080133e1 	.word	0x080133e1
 80133a8:	080133e1 	.word	0x080133e1
 80133ac:	080133e1 	.word	0x080133e1
 80133b0:	080133e1 	.word	0x080133e1
 80133b4:	080133e1 	.word	0x080133e1
 80133b8:	080133e1 	.word	0x080133e1
 80133bc:	080133e1 	.word	0x080133e1
 80133c0:	080133e1 	.word	0x080133e1
 80133c4:	080133e1 	.word	0x080133e1
 80133c8:	080133e1 	.word	0x080133e1
 80133cc:	080133e1 	.word	0x080133e1
 80133d0:	080133e1 	.word	0x080133e1
 80133d4:	080133e1 	.word	0x080133e1
 80133d8:	080133e1 	.word	0x080133e1
 80133dc:	080133e1 	.word	0x080133e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80133e0:	bf00      	nop
  }

  return (USBD_OK);
 80133e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80133e4:	4618      	mov	r0, r3
 80133e6:	370c      	adds	r7, #12
 80133e8:	46bd      	mov	sp, r7
 80133ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ee:	4770      	bx	lr

080133f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
 80133f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80133fa:	6879      	ldr	r1, [r7, #4]
 80133fc:	4805      	ldr	r0, [pc, #20]	@ (8013414 <CDC_Receive_FS+0x24>)
 80133fe:	f7fa f98b 	bl	800d718 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013402:	4804      	ldr	r0, [pc, #16]	@ (8013414 <CDC_Receive_FS+0x24>)
 8013404:	f7fa f9e6 	bl	800d7d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013408:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801340a:	4618      	mov	r0, r3
 801340c:	3708      	adds	r7, #8
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
 8013412:	bf00      	nop
 8013414:	20001664 	.word	0x20001664

08013418 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b084      	sub	sp, #16
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	460b      	mov	r3, r1
 8013422:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013424:	2300      	movs	r3, #0
 8013426:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013428:	4b0d      	ldr	r3, [pc, #52]	@ (8013460 <CDC_Transmit_FS+0x48>)
 801342a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801342e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013436:	2b00      	cmp	r3, #0
 8013438:	d001      	beq.n	801343e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801343a:	2301      	movs	r3, #1
 801343c:	e00b      	b.n	8013456 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801343e:	887b      	ldrh	r3, [r7, #2]
 8013440:	461a      	mov	r2, r3
 8013442:	6879      	ldr	r1, [r7, #4]
 8013444:	4806      	ldr	r0, [pc, #24]	@ (8013460 <CDC_Transmit_FS+0x48>)
 8013446:	f7fa f945 	bl	800d6d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801344a:	4805      	ldr	r0, [pc, #20]	@ (8013460 <CDC_Transmit_FS+0x48>)
 801344c:	f7fa f982 	bl	800d754 <USBD_CDC_TransmitPacket>
 8013450:	4603      	mov	r3, r0
 8013452:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013454:	7bfb      	ldrb	r3, [r7, #15]
}
 8013456:	4618      	mov	r0, r3
 8013458:	3710      	adds	r7, #16
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}
 801345e:	bf00      	nop
 8013460:	20001664 	.word	0x20001664

08013464 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013464:	b480      	push	{r7}
 8013466:	b087      	sub	sp, #28
 8013468:	af00      	add	r7, sp, #0
 801346a:	60f8      	str	r0, [r7, #12]
 801346c:	60b9      	str	r1, [r7, #8]
 801346e:	4613      	mov	r3, r2
 8013470:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013472:	2300      	movs	r3, #0
 8013474:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013476:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801347a:	4618      	mov	r0, r3
 801347c:	371c      	adds	r7, #28
 801347e:	46bd      	mov	sp, r7
 8013480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013484:	4770      	bx	lr
	...

08013488 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013488:	b480      	push	{r7}
 801348a:	b083      	sub	sp, #12
 801348c:	af00      	add	r7, sp, #0
 801348e:	4603      	mov	r3, r0
 8013490:	6039      	str	r1, [r7, #0]
 8013492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	2212      	movs	r2, #18
 8013498:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801349a:	4b03      	ldr	r3, [pc, #12]	@ (80134a8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801349c:	4618      	mov	r0, r3
 801349e:	370c      	adds	r7, #12
 80134a0:	46bd      	mov	sp, r7
 80134a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a6:	4770      	bx	lr
 80134a8:	200000e4 	.word	0x200000e4

080134ac <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134ac:	b480      	push	{r7}
 80134ae:	b083      	sub	sp, #12
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	4603      	mov	r3, r0
 80134b4:	6039      	str	r1, [r7, #0]
 80134b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	2204      	movs	r2, #4
 80134bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80134be:	4b03      	ldr	r3, [pc, #12]	@ (80134cc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	370c      	adds	r7, #12
 80134c4:	46bd      	mov	sp, r7
 80134c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ca:	4770      	bx	lr
 80134cc:	200000f8 	.word	0x200000f8

080134d0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b082      	sub	sp, #8
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	4603      	mov	r3, r0
 80134d8:	6039      	str	r1, [r7, #0]
 80134da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80134dc:	79fb      	ldrb	r3, [r7, #7]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d105      	bne.n	80134ee <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80134e2:	683a      	ldr	r2, [r7, #0]
 80134e4:	4907      	ldr	r1, [pc, #28]	@ (8013504 <USBD_CDC_ProductStrDescriptor+0x34>)
 80134e6:	4808      	ldr	r0, [pc, #32]	@ (8013508 <USBD_CDC_ProductStrDescriptor+0x38>)
 80134e8:	f7fb fb58 	bl	800eb9c <USBD_GetString>
 80134ec:	e004      	b.n	80134f8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80134ee:	683a      	ldr	r2, [r7, #0]
 80134f0:	4904      	ldr	r1, [pc, #16]	@ (8013504 <USBD_CDC_ProductStrDescriptor+0x34>)
 80134f2:	4805      	ldr	r0, [pc, #20]	@ (8013508 <USBD_CDC_ProductStrDescriptor+0x38>)
 80134f4:	f7fb fb52 	bl	800eb9c <USBD_GetString>
  }
  return USBD_StrDesc;
 80134f8:	4b02      	ldr	r3, [pc, #8]	@ (8013504 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80134fa:	4618      	mov	r0, r3
 80134fc:	3708      	adds	r7, #8
 80134fe:	46bd      	mov	sp, r7
 8013500:	bd80      	pop	{r7, pc}
 8013502:	bf00      	nop
 8013504:	20002940 	.word	0x20002940
 8013508:	08016548 	.word	0x08016548

0801350c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b082      	sub	sp, #8
 8013510:	af00      	add	r7, sp, #0
 8013512:	4603      	mov	r3, r0
 8013514:	6039      	str	r1, [r7, #0]
 8013516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013518:	683a      	ldr	r2, [r7, #0]
 801351a:	4904      	ldr	r1, [pc, #16]	@ (801352c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801351c:	4804      	ldr	r0, [pc, #16]	@ (8013530 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801351e:	f7fb fb3d 	bl	800eb9c <USBD_GetString>
  return USBD_StrDesc;
 8013522:	4b02      	ldr	r3, [pc, #8]	@ (801352c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8013524:	4618      	mov	r0, r3
 8013526:	3708      	adds	r7, #8
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}
 801352c:	20002940 	.word	0x20002940
 8013530:	08016560 	.word	0x08016560

08013534 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b082      	sub	sp, #8
 8013538:	af00      	add	r7, sp, #0
 801353a:	4603      	mov	r3, r0
 801353c:	6039      	str	r1, [r7, #0]
 801353e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	221a      	movs	r2, #26
 8013544:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013546:	f000 f843 	bl	80135d0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801354a:	4b02      	ldr	r3, [pc, #8]	@ (8013554 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801354c:	4618      	mov	r0, r3
 801354e:	3708      	adds	r7, #8
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}
 8013554:	200000fc 	.word	0x200000fc

08013558 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	4603      	mov	r3, r0
 8013560:	6039      	str	r1, [r7, #0]
 8013562:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013564:	79fb      	ldrb	r3, [r7, #7]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d105      	bne.n	8013576 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801356a:	683a      	ldr	r2, [r7, #0]
 801356c:	4907      	ldr	r1, [pc, #28]	@ (801358c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801356e:	4808      	ldr	r0, [pc, #32]	@ (8013590 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013570:	f7fb fb14 	bl	800eb9c <USBD_GetString>
 8013574:	e004      	b.n	8013580 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8013576:	683a      	ldr	r2, [r7, #0]
 8013578:	4904      	ldr	r1, [pc, #16]	@ (801358c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801357a:	4805      	ldr	r0, [pc, #20]	@ (8013590 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801357c:	f7fb fb0e 	bl	800eb9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8013580:	4b02      	ldr	r3, [pc, #8]	@ (801358c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8013582:	4618      	mov	r0, r3
 8013584:	3708      	adds	r7, #8
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}
 801358a:	bf00      	nop
 801358c:	20002940 	.word	0x20002940
 8013590:	08016574 	.word	0x08016574

08013594 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
 801359a:	4603      	mov	r3, r0
 801359c:	6039      	str	r1, [r7, #0]
 801359e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80135a0:	79fb      	ldrb	r3, [r7, #7]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d105      	bne.n	80135b2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80135a6:	683a      	ldr	r2, [r7, #0]
 80135a8:	4907      	ldr	r1, [pc, #28]	@ (80135c8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80135aa:	4808      	ldr	r0, [pc, #32]	@ (80135cc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80135ac:	f7fb faf6 	bl	800eb9c <USBD_GetString>
 80135b0:	e004      	b.n	80135bc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80135b2:	683a      	ldr	r2, [r7, #0]
 80135b4:	4904      	ldr	r1, [pc, #16]	@ (80135c8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80135b6:	4805      	ldr	r0, [pc, #20]	@ (80135cc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80135b8:	f7fb faf0 	bl	800eb9c <USBD_GetString>
  }
  return USBD_StrDesc;
 80135bc:	4b02      	ldr	r3, [pc, #8]	@ (80135c8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80135be:	4618      	mov	r0, r3
 80135c0:	3708      	adds	r7, #8
 80135c2:	46bd      	mov	sp, r7
 80135c4:	bd80      	pop	{r7, pc}
 80135c6:	bf00      	nop
 80135c8:	20002940 	.word	0x20002940
 80135cc:	08016580 	.word	0x08016580

080135d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b084      	sub	sp, #16
 80135d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80135d6:	4b0f      	ldr	r3, [pc, #60]	@ (8013614 <Get_SerialNum+0x44>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80135dc:	4b0e      	ldr	r3, [pc, #56]	@ (8013618 <Get_SerialNum+0x48>)
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80135e2:	4b0e      	ldr	r3, [pc, #56]	@ (801361c <Get_SerialNum+0x4c>)
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80135e8:	68fa      	ldr	r2, [r7, #12]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	4413      	add	r3, r2
 80135ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d009      	beq.n	801360a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80135f6:	2208      	movs	r2, #8
 80135f8:	4909      	ldr	r1, [pc, #36]	@ (8013620 <Get_SerialNum+0x50>)
 80135fa:	68f8      	ldr	r0, [r7, #12]
 80135fc:	f000 f814 	bl	8013628 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013600:	2204      	movs	r2, #4
 8013602:	4908      	ldr	r1, [pc, #32]	@ (8013624 <Get_SerialNum+0x54>)
 8013604:	68b8      	ldr	r0, [r7, #8]
 8013606:	f000 f80f 	bl	8013628 <IntToUnicode>
  }
}
 801360a:	bf00      	nop
 801360c:	3710      	adds	r7, #16
 801360e:	46bd      	mov	sp, r7
 8013610:	bd80      	pop	{r7, pc}
 8013612:	bf00      	nop
 8013614:	1fff7590 	.word	0x1fff7590
 8013618:	1fff7594 	.word	0x1fff7594
 801361c:	1fff7598 	.word	0x1fff7598
 8013620:	200000fe 	.word	0x200000fe
 8013624:	2000010e 	.word	0x2000010e

08013628 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013628:	b480      	push	{r7}
 801362a:	b087      	sub	sp, #28
 801362c:	af00      	add	r7, sp, #0
 801362e:	60f8      	str	r0, [r7, #12]
 8013630:	60b9      	str	r1, [r7, #8]
 8013632:	4613      	mov	r3, r2
 8013634:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013636:	2300      	movs	r3, #0
 8013638:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801363a:	2300      	movs	r3, #0
 801363c:	75fb      	strb	r3, [r7, #23]
 801363e:	e027      	b.n	8013690 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	0f1b      	lsrs	r3, r3, #28
 8013644:	2b09      	cmp	r3, #9
 8013646:	d80b      	bhi.n	8013660 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	0f1b      	lsrs	r3, r3, #28
 801364c:	b2da      	uxtb	r2, r3
 801364e:	7dfb      	ldrb	r3, [r7, #23]
 8013650:	005b      	lsls	r3, r3, #1
 8013652:	4619      	mov	r1, r3
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	440b      	add	r3, r1
 8013658:	3230      	adds	r2, #48	@ 0x30
 801365a:	b2d2      	uxtb	r2, r2
 801365c:	701a      	strb	r2, [r3, #0]
 801365e:	e00a      	b.n	8013676 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	0f1b      	lsrs	r3, r3, #28
 8013664:	b2da      	uxtb	r2, r3
 8013666:	7dfb      	ldrb	r3, [r7, #23]
 8013668:	005b      	lsls	r3, r3, #1
 801366a:	4619      	mov	r1, r3
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	440b      	add	r3, r1
 8013670:	3237      	adds	r2, #55	@ 0x37
 8013672:	b2d2      	uxtb	r2, r2
 8013674:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	011b      	lsls	r3, r3, #4
 801367a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801367c:	7dfb      	ldrb	r3, [r7, #23]
 801367e:	005b      	lsls	r3, r3, #1
 8013680:	3301      	adds	r3, #1
 8013682:	68ba      	ldr	r2, [r7, #8]
 8013684:	4413      	add	r3, r2
 8013686:	2200      	movs	r2, #0
 8013688:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801368a:	7dfb      	ldrb	r3, [r7, #23]
 801368c:	3301      	adds	r3, #1
 801368e:	75fb      	strb	r3, [r7, #23]
 8013690:	7dfa      	ldrb	r2, [r7, #23]
 8013692:	79fb      	ldrb	r3, [r7, #7]
 8013694:	429a      	cmp	r2, r3
 8013696:	d3d3      	bcc.n	8013640 <IntToUnicode+0x18>
  }
}
 8013698:	bf00      	nop
 801369a:	bf00      	nop
 801369c:	371c      	adds	r7, #28
 801369e:	46bd      	mov	sp, r7
 80136a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a4:	4770      	bx	lr

080136a6 <LL_AHB2_GRP1_EnableClock>:
{
 80136a6:	b480      	push	{r7}
 80136a8:	b085      	sub	sp, #20
 80136aa:	af00      	add	r7, sp, #0
 80136ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80136ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80136b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80136b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	4313      	orrs	r3, r2
 80136bc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80136be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80136c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	4013      	ands	r3, r2
 80136c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80136ca:	68fb      	ldr	r3, [r7, #12]
}
 80136cc:	bf00      	nop
 80136ce:	3714      	adds	r7, #20
 80136d0:	46bd      	mov	sp, r7
 80136d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d6:	4770      	bx	lr

080136d8 <LL_APB1_GRP1_EnableClock>:
{
 80136d8:	b480      	push	{r7}
 80136da:	b085      	sub	sp, #20
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80136e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80136e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80136e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	4313      	orrs	r3, r2
 80136ee:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80136f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80136f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	4013      	ands	r3, r2
 80136fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80136fc:	68fb      	ldr	r3, [r7, #12]
}
 80136fe:	bf00      	nop
 8013700:	3714      	adds	r7, #20
 8013702:	46bd      	mov	sp, r7
 8013704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013708:	4770      	bx	lr
	...

0801370c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b09c      	sub	sp, #112	@ 0x70
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013714:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8013718:	2200      	movs	r2, #0
 801371a:	601a      	str	r2, [r3, #0]
 801371c:	605a      	str	r2, [r3, #4]
 801371e:	609a      	str	r2, [r3, #8]
 8013720:	60da      	str	r2, [r3, #12]
 8013722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013724:	f107 030c 	add.w	r3, r7, #12
 8013728:	2250      	movs	r2, #80	@ 0x50
 801372a:	2100      	movs	r1, #0
 801372c:	4618      	mov	r0, r3
 801372e:	f000 ffc1 	bl	80146b4 <memset>
  if(pcdHandle->Instance==USB)
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	4a1b      	ldr	r2, [pc, #108]	@ (80137a4 <HAL_PCD_MspInit+0x98>)
 8013738:	4293      	cmp	r3, r2
 801373a:	d12f      	bne.n	801379c <HAL_PCD_MspInit+0x90>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801373c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013740:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013742:	2300      	movs	r3, #0
 8013744:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013746:	f107 030c 	add.w	r3, r7, #12
 801374a:	4618      	mov	r0, r3
 801374c:	f7f4 feb9 	bl	80084c2 <HAL_RCCEx_PeriphCLKConfig>
 8013750:	4603      	mov	r3, r0
 8013752:	2b00      	cmp	r3, #0
 8013754:	d001      	beq.n	801375a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8013756:	f7ef f929 	bl	80029ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801375a:	2001      	movs	r0, #1
 801375c:	f7ff ffa3 	bl	80136a6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013760:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8013764:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013766:	2302      	movs	r3, #2
 8013768:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801376a:	2300      	movs	r3, #0
 801376c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801376e:	2300      	movs	r3, #0
 8013770:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8013772:	230a      	movs	r3, #10
 8013774:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013776:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801377a:	4619      	mov	r1, r3
 801377c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013780:	f7f1 fbe4 	bl	8004f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8013784:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8013788:	f7ff ffa6 	bl	80136d8 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 801378c:	2200      	movs	r2, #0
 801378e:	2101      	movs	r1, #1
 8013790:	2014      	movs	r0, #20
 8013792:	f7f1 f84a 	bl	800482a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8013796:	2014      	movs	r0, #20
 8013798:	f7f1 f861 	bl	800485e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801379c:	bf00      	nop
 801379e:	3770      	adds	r7, #112	@ 0x70
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}
 80137a4:	40006800 	.word	0x40006800

080137a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b082      	sub	sp, #8
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80137bc:	4619      	mov	r1, r3
 80137be:	4610      	mov	r0, r2
 80137c0:	f7fa f8f1 	bl	800d9a6 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80137c4:	bf00      	nop
 80137c6:	3708      	adds	r7, #8
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd80      	pop	{r7, pc}

080137cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
 80137d4:	460b      	mov	r3, r1
 80137d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80137de:	78fa      	ldrb	r2, [r7, #3]
 80137e0:	6879      	ldr	r1, [r7, #4]
 80137e2:	4613      	mov	r3, r2
 80137e4:	009b      	lsls	r3, r3, #2
 80137e6:	4413      	add	r3, r2
 80137e8:	00db      	lsls	r3, r3, #3
 80137ea:	440b      	add	r3, r1
 80137ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80137f0:	681a      	ldr	r2, [r3, #0]
 80137f2:	78fb      	ldrb	r3, [r7, #3]
 80137f4:	4619      	mov	r1, r3
 80137f6:	f7fa f92b 	bl	800da50 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80137fa:	bf00      	nop
 80137fc:	3708      	adds	r7, #8
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}

08013802 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013802:	b580      	push	{r7, lr}
 8013804:	b082      	sub	sp, #8
 8013806:	af00      	add	r7, sp, #0
 8013808:	6078      	str	r0, [r7, #4]
 801380a:	460b      	mov	r3, r1
 801380c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8013814:	78fa      	ldrb	r2, [r7, #3]
 8013816:	6879      	ldr	r1, [r7, #4]
 8013818:	4613      	mov	r3, r2
 801381a:	009b      	lsls	r3, r3, #2
 801381c:	4413      	add	r3, r2
 801381e:	00db      	lsls	r3, r3, #3
 8013820:	440b      	add	r3, r1
 8013822:	3324      	adds	r3, #36	@ 0x24
 8013824:	681a      	ldr	r2, [r3, #0]
 8013826:	78fb      	ldrb	r3, [r7, #3]
 8013828:	4619      	mov	r1, r3
 801382a:	f7fa f9c4 	bl	800dbb6 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801382e:	bf00      	nop
 8013830:	3708      	adds	r7, #8
 8013832:	46bd      	mov	sp, r7
 8013834:	bd80      	pop	{r7, pc}

08013836 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013836:	b580      	push	{r7, lr}
 8013838:	b082      	sub	sp, #8
 801383a:	af00      	add	r7, sp, #0
 801383c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013844:	4618      	mov	r0, r3
 8013846:	f7fa fafe 	bl	800de46 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801384a:	bf00      	nop
 801384c:	3708      	adds	r7, #8
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}

08013852 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013852:	b580      	push	{r7, lr}
 8013854:	b084      	sub	sp, #16
 8013856:	af00      	add	r7, sp, #0
 8013858:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801385a:	2301      	movs	r3, #1
 801385c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	795b      	ldrb	r3, [r3, #5]
 8013862:	2b02      	cmp	r3, #2
 8013864:	d001      	beq.n	801386a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013866:	f7ef f8a1 	bl	80029ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013870:	7bfa      	ldrb	r2, [r7, #15]
 8013872:	4611      	mov	r1, r2
 8013874:	4618      	mov	r0, r3
 8013876:	f7fa faa2 	bl	800ddbe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013880:	4618      	mov	r0, r3
 8013882:	f7fa fa4a 	bl	800dd1a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8013886:	bf00      	nop
 8013888:	3710      	adds	r7, #16
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}
	...

08013890 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b082      	sub	sp, #8
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801389e:	4618      	mov	r0, r3
 80138a0:	f7fa fa9d 	bl	800ddde <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	7a5b      	ldrb	r3, [r3, #9]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d005      	beq.n	80138b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80138ac:	4b04      	ldr	r3, [pc, #16]	@ (80138c0 <HAL_PCD_SuspendCallback+0x30>)
 80138ae:	691b      	ldr	r3, [r3, #16]
 80138b0:	4a03      	ldr	r2, [pc, #12]	@ (80138c0 <HAL_PCD_SuspendCallback+0x30>)
 80138b2:	f043 0306 	orr.w	r3, r3, #6
 80138b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80138b8:	bf00      	nop
 80138ba:	3708      	adds	r7, #8
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}
 80138c0:	e000ed00 	.word	0xe000ed00

080138c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	7a5b      	ldrb	r3, [r3, #9]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d007      	beq.n	80138e4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80138d4:	4b08      	ldr	r3, [pc, #32]	@ (80138f8 <HAL_PCD_ResumeCallback+0x34>)
 80138d6:	691b      	ldr	r3, [r3, #16]
 80138d8:	4a07      	ldr	r2, [pc, #28]	@ (80138f8 <HAL_PCD_ResumeCallback+0x34>)
 80138da:	f023 0306 	bic.w	r3, r3, #6
 80138de:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80138e0:	f000 f9fa 	bl	8013cd8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7fa fa93 	bl	800de16 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80138f0:	bf00      	nop
 80138f2:	3708      	adds	r7, #8
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}
 80138f8:	e000ed00 	.word	0xe000ed00

080138fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013904:	4a2c      	ldr	r2, [pc, #176]	@ (80139b8 <USBD_LL_Init+0xbc>)
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	4a2a      	ldr	r2, [pc, #168]	@ (80139b8 <USBD_LL_Init+0xbc>)
 8013910:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8013914:	f7f3 fa9e 	bl	8006e54 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8013918:	4b27      	ldr	r3, [pc, #156]	@ (80139b8 <USBD_LL_Init+0xbc>)
 801391a:	4a28      	ldr	r2, [pc, #160]	@ (80139bc <USBD_LL_Init+0xc0>)
 801391c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801391e:	4b26      	ldr	r3, [pc, #152]	@ (80139b8 <USBD_LL_Init+0xbc>)
 8013920:	2208      	movs	r2, #8
 8013922:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8013924:	4b24      	ldr	r3, [pc, #144]	@ (80139b8 <USBD_LL_Init+0xbc>)
 8013926:	2202      	movs	r2, #2
 8013928:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801392a:	4b23      	ldr	r3, [pc, #140]	@ (80139b8 <USBD_LL_Init+0xbc>)
 801392c:	2202      	movs	r2, #2
 801392e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8013930:	4b21      	ldr	r3, [pc, #132]	@ (80139b8 <USBD_LL_Init+0xbc>)
 8013932:	2200      	movs	r2, #0
 8013934:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8013936:	4b20      	ldr	r3, [pc, #128]	@ (80139b8 <USBD_LL_Init+0xbc>)
 8013938:	2200      	movs	r2, #0
 801393a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801393c:	4b1e      	ldr	r3, [pc, #120]	@ (80139b8 <USBD_LL_Init+0xbc>)
 801393e:	2200      	movs	r2, #0
 8013940:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8013942:	4b1d      	ldr	r3, [pc, #116]	@ (80139b8 <USBD_LL_Init+0xbc>)
 8013944:	2200      	movs	r2, #0
 8013946:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013948:	481b      	ldr	r0, [pc, #108]	@ (80139b8 <USBD_LL_Init+0xbc>)
 801394a:	f7f1 fd31 	bl	80053b0 <HAL_PCD_Init>
 801394e:	4603      	mov	r3, r0
 8013950:	2b00      	cmp	r3, #0
 8013952:	d001      	beq.n	8013958 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8013954:	f7ef f82a 	bl	80029ac <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801395e:	2318      	movs	r3, #24
 8013960:	2200      	movs	r2, #0
 8013962:	2100      	movs	r1, #0
 8013964:	f7f3 f9ea 	bl	8006d3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801396e:	2358      	movs	r3, #88	@ 0x58
 8013970:	2200      	movs	r2, #0
 8013972:	2180      	movs	r1, #128	@ 0x80
 8013974:	f7f3 f9e2 	bl	8006d3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801397e:	23c0      	movs	r3, #192	@ 0xc0
 8013980:	2200      	movs	r2, #0
 8013982:	2181      	movs	r1, #129	@ 0x81
 8013984:	f7f3 f9da 	bl	8006d3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801398e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8013992:	2200      	movs	r2, #0
 8013994:	2101      	movs	r1, #1
 8013996:	f7f3 f9d1 	bl	8006d3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80139a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80139a4:	2200      	movs	r2, #0
 80139a6:	2182      	movs	r1, #130	@ 0x82
 80139a8:	f7f3 f9c8 	bl	8006d3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80139ac:	2300      	movs	r3, #0
}
 80139ae:	4618      	mov	r0, r3
 80139b0:	3708      	adds	r7, #8
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}
 80139b6:	bf00      	nop
 80139b8:	20002b40 	.word	0x20002b40
 80139bc:	40006800 	.word	0x40006800

080139c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b084      	sub	sp, #16
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139c8:	2300      	movs	r3, #0
 80139ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139cc:	2300      	movs	r3, #0
 80139ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80139d6:	4618      	mov	r0, r3
 80139d8:	f7f1 fdb8 	bl	800554c <HAL_PCD_Start>
 80139dc:	4603      	mov	r3, r0
 80139de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80139e0:	7bfb      	ldrb	r3, [r7, #15]
 80139e2:	4618      	mov	r0, r3
 80139e4:	f000 f97e 	bl	8013ce4 <USBD_Get_USB_Status>
 80139e8:	4603      	mov	r3, r0
 80139ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80139ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80139ee:	4618      	mov	r0, r3
 80139f0:	3710      	adds	r7, #16
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}

080139f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80139f6:	b580      	push	{r7, lr}
 80139f8:	b084      	sub	sp, #16
 80139fa:	af00      	add	r7, sp, #0
 80139fc:	6078      	str	r0, [r7, #4]
 80139fe:	4608      	mov	r0, r1
 8013a00:	4611      	mov	r1, r2
 8013a02:	461a      	mov	r2, r3
 8013a04:	4603      	mov	r3, r0
 8013a06:	70fb      	strb	r3, [r7, #3]
 8013a08:	460b      	mov	r3, r1
 8013a0a:	70bb      	strb	r3, [r7, #2]
 8013a0c:	4613      	mov	r3, r2
 8013a0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a10:	2300      	movs	r3, #0
 8013a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a14:	2300      	movs	r3, #0
 8013a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013a1e:	78bb      	ldrb	r3, [r7, #2]
 8013a20:	883a      	ldrh	r2, [r7, #0]
 8013a22:	78f9      	ldrb	r1, [r7, #3]
 8013a24:	f7f1 feff 	bl	8005826 <HAL_PCD_EP_Open>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a2c:	7bfb      	ldrb	r3, [r7, #15]
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f000 f958 	bl	8013ce4 <USBD_Get_USB_Status>
 8013a34:	4603      	mov	r3, r0
 8013a36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	3710      	adds	r7, #16
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}

08013a42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a42:	b580      	push	{r7, lr}
 8013a44:	b084      	sub	sp, #16
 8013a46:	af00      	add	r7, sp, #0
 8013a48:	6078      	str	r0, [r7, #4]
 8013a4a:	460b      	mov	r3, r1
 8013a4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a52:	2300      	movs	r3, #0
 8013a54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013a5c:	78fa      	ldrb	r2, [r7, #3]
 8013a5e:	4611      	mov	r1, r2
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7f1 ff3d 	bl	80058e0 <HAL_PCD_EP_Close>
 8013a66:	4603      	mov	r3, r0
 8013a68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a6a:	7bfb      	ldrb	r3, [r7, #15]
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f000 f939 	bl	8013ce4 <USBD_Get_USB_Status>
 8013a72:	4603      	mov	r3, r0
 8013a74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3710      	adds	r7, #16
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}

08013a80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b084      	sub	sp, #16
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	460b      	mov	r3, r1
 8013a8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a90:	2300      	movs	r3, #0
 8013a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013a9a:	78fa      	ldrb	r2, [r7, #3]
 8013a9c:	4611      	mov	r1, r2
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f7f1 ffe6 	bl	8005a70 <HAL_PCD_EP_SetStall>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013aa8:	7bfb      	ldrb	r3, [r7, #15]
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f000 f91a 	bl	8013ce4 <USBD_Get_USB_Status>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ab4:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	3710      	adds	r7, #16
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}

08013abe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013abe:	b580      	push	{r7, lr}
 8013ac0:	b084      	sub	sp, #16
 8013ac2:	af00      	add	r7, sp, #0
 8013ac4:	6078      	str	r0, [r7, #4]
 8013ac6:	460b      	mov	r3, r1
 8013ac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013aca:	2300      	movs	r3, #0
 8013acc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013ad8:	78fa      	ldrb	r2, [r7, #3]
 8013ada:	4611      	mov	r1, r2
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7f2 f819 	bl	8005b14 <HAL_PCD_EP_ClrStall>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ae6:	7bfb      	ldrb	r3, [r7, #15]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f000 f8fb 	bl	8013ce4 <USBD_Get_USB_Status>
 8013aee:	4603      	mov	r3, r0
 8013af0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8013af4:	4618      	mov	r0, r3
 8013af6:	3710      	adds	r7, #16
 8013af8:	46bd      	mov	sp, r7
 8013afa:	bd80      	pop	{r7, pc}

08013afc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013afc:	b480      	push	{r7}
 8013afe:	b085      	sub	sp, #20
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
 8013b04:	460b      	mov	r3, r1
 8013b06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013b0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013b10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	da0b      	bge.n	8013b30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013b18:	78fb      	ldrb	r3, [r7, #3]
 8013b1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013b1e:	68f9      	ldr	r1, [r7, #12]
 8013b20:	4613      	mov	r3, r2
 8013b22:	009b      	lsls	r3, r3, #2
 8013b24:	4413      	add	r3, r2
 8013b26:	00db      	lsls	r3, r3, #3
 8013b28:	440b      	add	r3, r1
 8013b2a:	3312      	adds	r3, #18
 8013b2c:	781b      	ldrb	r3, [r3, #0]
 8013b2e:	e00b      	b.n	8013b48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013b30:	78fb      	ldrb	r3, [r7, #3]
 8013b32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013b36:	68f9      	ldr	r1, [r7, #12]
 8013b38:	4613      	mov	r3, r2
 8013b3a:	009b      	lsls	r3, r3, #2
 8013b3c:	4413      	add	r3, r2
 8013b3e:	00db      	lsls	r3, r3, #3
 8013b40:	440b      	add	r3, r1
 8013b42:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8013b46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3714      	adds	r7, #20
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b52:	4770      	bx	lr

08013b54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b084      	sub	sp, #16
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
 8013b5c:	460b      	mov	r3, r1
 8013b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b60:	2300      	movs	r3, #0
 8013b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b64:	2300      	movs	r3, #0
 8013b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013b6e:	78fa      	ldrb	r2, [r7, #3]
 8013b70:	4611      	mov	r1, r2
 8013b72:	4618      	mov	r0, r3
 8013b74:	f7f1 fe33 	bl	80057de <HAL_PCD_SetAddress>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b7c:	7bfb      	ldrb	r3, [r7, #15]
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f000 f8b0 	bl	8013ce4 <USBD_Get_USB_Status>
 8013b84:	4603      	mov	r3, r0
 8013b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3710      	adds	r7, #16
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}

08013b92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013b92:	b580      	push	{r7, lr}
 8013b94:	b086      	sub	sp, #24
 8013b96:	af00      	add	r7, sp, #0
 8013b98:	60f8      	str	r0, [r7, #12]
 8013b9a:	607a      	str	r2, [r7, #4]
 8013b9c:	603b      	str	r3, [r7, #0]
 8013b9e:	460b      	mov	r3, r1
 8013ba0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013bb0:	7af9      	ldrb	r1, [r7, #11]
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	687a      	ldr	r2, [r7, #4]
 8013bb6:	f7f1 ff24 	bl	8005a02 <HAL_PCD_EP_Transmit>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013bbe:	7dfb      	ldrb	r3, [r7, #23]
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f000 f88f 	bl	8013ce4 <USBD_Get_USB_Status>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013bca:	7dbb      	ldrb	r3, [r7, #22]
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	3718      	adds	r7, #24
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd80      	pop	{r7, pc}

08013bd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b086      	sub	sp, #24
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	60f8      	str	r0, [r7, #12]
 8013bdc:	607a      	str	r2, [r7, #4]
 8013bde:	603b      	str	r3, [r7, #0]
 8013be0:	460b      	mov	r3, r1
 8013be2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013be4:	2300      	movs	r3, #0
 8013be6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013be8:	2300      	movs	r3, #0
 8013bea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013bf2:	7af9      	ldrb	r1, [r7, #11]
 8013bf4:	683b      	ldr	r3, [r7, #0]
 8013bf6:	687a      	ldr	r2, [r7, #4]
 8013bf8:	f7f1 feba 	bl	8005970 <HAL_PCD_EP_Receive>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c00:	7dfb      	ldrb	r3, [r7, #23]
 8013c02:	4618      	mov	r0, r3
 8013c04:	f000 f86e 	bl	8013ce4 <USBD_Get_USB_Status>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013c0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3718      	adds	r7, #24
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}

08013c16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013c16:	b580      	push	{r7, lr}
 8013c18:	b082      	sub	sp, #8
 8013c1a:	af00      	add	r7, sp, #0
 8013c1c:	6078      	str	r0, [r7, #4]
 8013c1e:	460b      	mov	r3, r1
 8013c20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013c28:	78fa      	ldrb	r2, [r7, #3]
 8013c2a:	4611      	mov	r1, r2
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7f1 fed0 	bl	80059d2 <HAL_PCD_EP_GetRxCount>
 8013c32:	4603      	mov	r3, r0
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	3708      	adds	r7, #8
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}

08013c3c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b082      	sub	sp, #8
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	460b      	mov	r3, r1
 8013c46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8013c48:	78fb      	ldrb	r3, [r7, #3]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d002      	beq.n	8013c54 <HAL_PCDEx_LPM_Callback+0x18>
 8013c4e:	2b01      	cmp	r3, #1
 8013c50:	d013      	beq.n	8013c7a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8013c52:	e023      	b.n	8013c9c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	7a5b      	ldrb	r3, [r3, #9]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d007      	beq.n	8013c6c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013c5c:	f000 f83c 	bl	8013cd8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013c60:	4b10      	ldr	r3, [pc, #64]	@ (8013ca4 <HAL_PCDEx_LPM_Callback+0x68>)
 8013c62:	691b      	ldr	r3, [r3, #16]
 8013c64:	4a0f      	ldr	r2, [pc, #60]	@ (8013ca4 <HAL_PCDEx_LPM_Callback+0x68>)
 8013c66:	f023 0306 	bic.w	r3, r3, #6
 8013c6a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7fa f8cf 	bl	800de16 <USBD_LL_Resume>
    break;
 8013c78:	e010      	b.n	8013c9c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7fa f8ac 	bl	800ddde <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	7a5b      	ldrb	r3, [r3, #9]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d005      	beq.n	8013c9a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013c8e:	4b05      	ldr	r3, [pc, #20]	@ (8013ca4 <HAL_PCDEx_LPM_Callback+0x68>)
 8013c90:	691b      	ldr	r3, [r3, #16]
 8013c92:	4a04      	ldr	r2, [pc, #16]	@ (8013ca4 <HAL_PCDEx_LPM_Callback+0x68>)
 8013c94:	f043 0306 	orr.w	r3, r3, #6
 8013c98:	6113      	str	r3, [r2, #16]
    break;
 8013c9a:	bf00      	nop
}
 8013c9c:	bf00      	nop
 8013c9e:	3708      	adds	r7, #8
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}
 8013ca4:	e000ed00 	.word	0xe000ed00

08013ca8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013ca8:	b480      	push	{r7}
 8013caa:	b083      	sub	sp, #12
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013cb0:	4b03      	ldr	r3, [pc, #12]	@ (8013cc0 <USBD_static_malloc+0x18>)
}
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	370c      	adds	r7, #12
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbc:	4770      	bx	lr
 8013cbe:	bf00      	nop
 8013cc0:	20002e1c 	.word	0x20002e1c

08013cc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013cc4:	b480      	push	{r7}
 8013cc6:	b083      	sub	sp, #12
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013ccc:	bf00      	nop
 8013cce:	370c      	adds	r7, #12
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd6:	4770      	bx	lr

08013cd8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013cdc:	f7ee fdd8 	bl	8002890 <SystemClock_Config>
}
 8013ce0:	bf00      	nop
 8013ce2:	bd80      	pop	{r7, pc}

08013ce4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013ce4:	b480      	push	{r7}
 8013ce6:	b085      	sub	sp, #20
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	4603      	mov	r3, r0
 8013cec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013cee:	2300      	movs	r3, #0
 8013cf0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013cf2:	79fb      	ldrb	r3, [r7, #7]
 8013cf4:	2b03      	cmp	r3, #3
 8013cf6:	d817      	bhi.n	8013d28 <USBD_Get_USB_Status+0x44>
 8013cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8013d00 <USBD_Get_USB_Status+0x1c>)
 8013cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cfe:	bf00      	nop
 8013d00:	08013d11 	.word	0x08013d11
 8013d04:	08013d17 	.word	0x08013d17
 8013d08:	08013d1d 	.word	0x08013d1d
 8013d0c:	08013d23 	.word	0x08013d23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013d10:	2300      	movs	r3, #0
 8013d12:	73fb      	strb	r3, [r7, #15]
    break;
 8013d14:	e00b      	b.n	8013d2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013d16:	2303      	movs	r3, #3
 8013d18:	73fb      	strb	r3, [r7, #15]
    break;
 8013d1a:	e008      	b.n	8013d2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8013d20:	e005      	b.n	8013d2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013d22:	2303      	movs	r3, #3
 8013d24:	73fb      	strb	r3, [r7, #15]
    break;
 8013d26:	e002      	b.n	8013d2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013d28:	2303      	movs	r3, #3
 8013d2a:	73fb      	strb	r3, [r7, #15]
    break;
 8013d2c:	bf00      	nop
  }
  return usb_status;
 8013d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d30:	4618      	mov	r0, r3
 8013d32:	3714      	adds	r7, #20
 8013d34:	46bd      	mov	sp, r7
 8013d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3a:	4770      	bx	lr

08013d3c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8013d3c:	b480      	push	{r7}
 8013d3e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8013d40:	4b05      	ldr	r3, [pc, #20]	@ (8013d58 <UTIL_LPM_Init+0x1c>)
 8013d42:	2200      	movs	r2, #0
 8013d44:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013d46:	4b05      	ldr	r3, [pc, #20]	@ (8013d5c <UTIL_LPM_Init+0x20>)
 8013d48:	2200      	movs	r2, #0
 8013d4a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8013d4c:	bf00      	nop
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr
 8013d56:	bf00      	nop
 8013d58:	2000303c 	.word	0x2000303c
 8013d5c:	20003040 	.word	0x20003040

08013d60 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8013d60:	b480      	push	{r7}
 8013d62:	b087      	sub	sp, #28
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
 8013d68:	460b      	mov	r3, r1
 8013d6a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8013d70:	613b      	str	r3, [r7, #16]
  return(result);
 8013d72:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8013d74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013d76:	b672      	cpsid	i
}
 8013d78:	bf00      	nop
  
  switch(state)
 8013d7a:	78fb      	ldrb	r3, [r7, #3]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d008      	beq.n	8013d92 <UTIL_LPM_SetOffMode+0x32>
 8013d80:	2b01      	cmp	r3, #1
 8013d82:	d10e      	bne.n	8013da2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8013d84:	4b0d      	ldr	r3, [pc, #52]	@ (8013dbc <UTIL_LPM_SetOffMode+0x5c>)
 8013d86:	681a      	ldr	r2, [r3, #0]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	4313      	orrs	r3, r2
 8013d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8013dbc <UTIL_LPM_SetOffMode+0x5c>)
 8013d8e:	6013      	str	r3, [r2, #0]
      break;
 8013d90:	e008      	b.n	8013da4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	43da      	mvns	r2, r3
 8013d96:	4b09      	ldr	r3, [pc, #36]	@ (8013dbc <UTIL_LPM_SetOffMode+0x5c>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	4013      	ands	r3, r2
 8013d9c:	4a07      	ldr	r2, [pc, #28]	@ (8013dbc <UTIL_LPM_SetOffMode+0x5c>)
 8013d9e:	6013      	str	r3, [r2, #0]
      break;
 8013da0:	e000      	b.n	8013da4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8013da2:	bf00      	nop
 8013da4:	697b      	ldr	r3, [r7, #20]
 8013da6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	f383 8810 	msr	PRIMASK, r3
}
 8013dae:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013db0:	bf00      	nop
 8013db2:	371c      	adds	r7, #28
 8013db4:	46bd      	mov	sp, r7
 8013db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dba:	4770      	bx	lr
 8013dbc:	20003040 	.word	0x20003040

08013dc0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b090      	sub	sp, #64	@ 0x40
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8013dc8:	4b73      	ldr	r3, [pc, #460]	@ (8013f98 <UTIL_SEQ_Run+0x1d8>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8013dce:	4b72      	ldr	r3, [pc, #456]	@ (8013f98 <UTIL_SEQ_Run+0x1d8>)
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	4013      	ands	r3, r2
 8013dd6:	4a70      	ldr	r2, [pc, #448]	@ (8013f98 <UTIL_SEQ_Run+0x1d8>)
 8013dd8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8013dda:	4b70      	ldr	r3, [pc, #448]	@ (8013f9c <UTIL_SEQ_Run+0x1dc>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8013de0:	4b6f      	ldr	r3, [pc, #444]	@ (8013fa0 <UTIL_SEQ_Run+0x1e0>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8013de6:	4b6f      	ldr	r3, [pc, #444]	@ (8013fa4 <UTIL_SEQ_Run+0x1e4>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8013dec:	4b6e      	ldr	r3, [pc, #440]	@ (8013fa8 <UTIL_SEQ_Run+0x1e8>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013df2:	e08d      	b.n	8013f10 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8013df4:	2300      	movs	r3, #0
 8013df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013df8:	e002      	b.n	8013e00 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8013dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013dfc:	3301      	adds	r3, #1
 8013dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013e00:	4a6a      	ldr	r2, [pc, #424]	@ (8013fac <UTIL_SEQ_Run+0x1ec>)
 8013e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e04:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e0a:	401a      	ands	r2, r3
 8013e0c:	4b62      	ldr	r3, [pc, #392]	@ (8013f98 <UTIL_SEQ_Run+0x1d8>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	4013      	ands	r3, r2
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d0f1      	beq.n	8013dfa <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8013e16:	4a65      	ldr	r2, [pc, #404]	@ (8013fac <UTIL_SEQ_Run+0x1ec>)
 8013e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e1a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e20:	401a      	ands	r2, r3
 8013e22:	4b5d      	ldr	r3, [pc, #372]	@ (8013f98 <UTIL_SEQ_Run+0x1d8>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	4013      	ands	r3, r2
 8013e28:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8013e2a:	4a60      	ldr	r2, [pc, #384]	@ (8013fac <UTIL_SEQ_Run+0x1ec>)
 8013e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e2e:	00db      	lsls	r3, r3, #3
 8013e30:	4413      	add	r3, r2
 8013e32:	685a      	ldr	r2, [r3, #4]
 8013e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e36:	4013      	ands	r3, r2
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d106      	bne.n	8013e4a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8013e3c:	4a5b      	ldr	r2, [pc, #364]	@ (8013fac <UTIL_SEQ_Run+0x1ec>)
 8013e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e40:	00db      	lsls	r3, r3, #3
 8013e42:	4413      	add	r3, r2
 8013e44:	f04f 32ff 	mov.w	r2, #4294967295
 8013e48:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8013e4a:	4a58      	ldr	r2, [pc, #352]	@ (8013fac <UTIL_SEQ_Run+0x1ec>)
 8013e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e4e:	00db      	lsls	r3, r3, #3
 8013e50:	4413      	add	r3, r2
 8013e52:	685a      	ldr	r2, [r3, #4]
 8013e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e56:	4013      	ands	r3, r2
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f000 f9b3 	bl	80141c4 <SEQ_BitPosition>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	461a      	mov	r2, r3
 8013e62:	4b53      	ldr	r3, [pc, #332]	@ (8013fb0 <UTIL_SEQ_Run+0x1f0>)
 8013e64:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8013e66:	4a51      	ldr	r2, [pc, #324]	@ (8013fac <UTIL_SEQ_Run+0x1ec>)
 8013e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e6a:	00db      	lsls	r3, r3, #3
 8013e6c:	4413      	add	r3, r2
 8013e6e:	685a      	ldr	r2, [r3, #4]
 8013e70:	4b4f      	ldr	r3, [pc, #316]	@ (8013fb0 <UTIL_SEQ_Run+0x1f0>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	2101      	movs	r1, #1
 8013e76:	fa01 f303 	lsl.w	r3, r1, r3
 8013e7a:	43db      	mvns	r3, r3
 8013e7c:	401a      	ands	r2, r3
 8013e7e:	494b      	ldr	r1, [pc, #300]	@ (8013fac <UTIL_SEQ_Run+0x1ec>)
 8013e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e82:	00db      	lsls	r3, r3, #3
 8013e84:	440b      	add	r3, r1
 8013e86:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e88:	f3ef 8310 	mrs	r3, PRIMASK
 8013e8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8013e8e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013e90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8013e92:	b672      	cpsid	i
}
 8013e94:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8013e96:	4b46      	ldr	r3, [pc, #280]	@ (8013fb0 <UTIL_SEQ_Run+0x1f0>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	2201      	movs	r2, #1
 8013e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8013ea0:	43da      	mvns	r2, r3
 8013ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8013f9c <UTIL_SEQ_Run+0x1dc>)
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	4013      	ands	r3, r2
 8013ea8:	4a3c      	ldr	r2, [pc, #240]	@ (8013f9c <UTIL_SEQ_Run+0x1dc>)
 8013eaa:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013eac:	2302      	movs	r3, #2
 8013eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013eb0:	e013      	b.n	8013eda <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8013eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013eb4:	3b01      	subs	r3, #1
 8013eb6:	4a3d      	ldr	r2, [pc, #244]	@ (8013fac <UTIL_SEQ_Run+0x1ec>)
 8013eb8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8013ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8013fb0 <UTIL_SEQ_Run+0x1f0>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	2201      	movs	r2, #1
 8013ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8013ec6:	43da      	mvns	r2, r3
 8013ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013eca:	3b01      	subs	r3, #1
 8013ecc:	400a      	ands	r2, r1
 8013ece:	4937      	ldr	r1, [pc, #220]	@ (8013fac <UTIL_SEQ_Run+0x1ec>)
 8013ed0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ed6:	3b01      	subs	r3, #1
 8013ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d1e8      	bne.n	8013eb2 <UTIL_SEQ_Run+0xf2>
 8013ee0:	6a3b      	ldr	r3, [r7, #32]
 8013ee2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ee4:	697b      	ldr	r3, [r7, #20]
 8013ee6:	f383 8810 	msr	PRIMASK, r3
}
 8013eea:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8013eec:	4b30      	ldr	r3, [pc, #192]	@ (8013fb0 <UTIL_SEQ_Run+0x1f0>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	4a30      	ldr	r2, [pc, #192]	@ (8013fb4 <UTIL_SEQ_Run+0x1f4>)
 8013ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ef6:	4798      	blx	r3

    local_taskset = TaskSet;
 8013ef8:	4b28      	ldr	r3, [pc, #160]	@ (8013f9c <UTIL_SEQ_Run+0x1dc>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8013efe:	4b28      	ldr	r3, [pc, #160]	@ (8013fa0 <UTIL_SEQ_Run+0x1e0>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8013f04:	4b27      	ldr	r3, [pc, #156]	@ (8013fa4 <UTIL_SEQ_Run+0x1e4>)
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8013f0a:	4b27      	ldr	r3, [pc, #156]	@ (8013fa8 <UTIL_SEQ_Run+0x1e8>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013f10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f14:	401a      	ands	r2, r3
 8013f16:	4b20      	ldr	r3, [pc, #128]	@ (8013f98 <UTIL_SEQ_Run+0x1d8>)
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	4013      	ands	r3, r2
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d005      	beq.n	8013f2c <UTIL_SEQ_Run+0x16c>
 8013f20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f24:	4013      	ands	r3, r2
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	f43f af64 	beq.w	8013df4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8013f2c:	4b20      	ldr	r3, [pc, #128]	@ (8013fb0 <UTIL_SEQ_Run+0x1f0>)
 8013f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8013f32:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8013f34:	f000 f938 	bl	80141a8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f38:	f3ef 8310 	mrs	r3, PRIMASK
 8013f3c:	613b      	str	r3, [r7, #16]
  return(result);
 8013f3e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8013f40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013f42:	b672      	cpsid	i
}
 8013f44:	bf00      	nop
  local_taskset = TaskSet;
 8013f46:	4b15      	ldr	r3, [pc, #84]	@ (8013f9c <UTIL_SEQ_Run+0x1dc>)
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8013f4c:	4b14      	ldr	r3, [pc, #80]	@ (8013fa0 <UTIL_SEQ_Run+0x1e0>)
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8013f52:	4b14      	ldr	r3, [pc, #80]	@ (8013fa4 <UTIL_SEQ_Run+0x1e4>)
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8013f58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f5c:	401a      	ands	r2, r3
 8013f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8013f98 <UTIL_SEQ_Run+0x1d8>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	4013      	ands	r3, r2
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d107      	bne.n	8013f78 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8013f68:	4b0f      	ldr	r3, [pc, #60]	@ (8013fa8 <UTIL_SEQ_Run+0x1e8>)
 8013f6a:	681a      	ldr	r2, [r3, #0]
 8013f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f6e:	4013      	ands	r3, r2
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d101      	bne.n	8013f78 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8013f74:	f7ed fbb8 	bl	80016e8 <UTIL_SEQ_Idle>
 8013f78:	69fb      	ldr	r3, [r7, #28]
 8013f7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	f383 8810 	msr	PRIMASK, r3
}
 8013f82:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8013f84:	f000 f917 	bl	80141b6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8013f88:	4a03      	ldr	r2, [pc, #12]	@ (8013f98 <UTIL_SEQ_Run+0x1d8>)
 8013f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f8c:	6013      	str	r3, [r2, #0]

  return;
 8013f8e:	bf00      	nop
}
 8013f90:	3740      	adds	r7, #64	@ 0x40
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop
 8013f98:	2000011c 	.word	0x2000011c
 8013f9c:	20003044 	.word	0x20003044
 8013fa0:	20003048 	.word	0x20003048
 8013fa4:	20000118 	.word	0x20000118
 8013fa8:	2000304c 	.word	0x2000304c
 8013fac:	200030d4 	.word	0x200030d4
 8013fb0:	20003050 	.word	0x20003050
 8013fb4:	20003054 	.word	0x20003054

08013fb8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b088      	sub	sp, #32
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	60f8      	str	r0, [r7, #12]
 8013fc0:	60b9      	str	r1, [r7, #8]
 8013fc2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8013fc8:	617b      	str	r3, [r7, #20]
  return(result);
 8013fca:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8013fcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013fce:	b672      	cpsid	i
}
 8013fd0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8013fd2:	68f8      	ldr	r0, [r7, #12]
 8013fd4:	f000 f8f6 	bl	80141c4 <SEQ_BitPosition>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	4619      	mov	r1, r3
 8013fdc:	4a06      	ldr	r2, [pc, #24]	@ (8013ff8 <UTIL_SEQ_RegTask+0x40>)
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013fe4:	69fb      	ldr	r3, [r7, #28]
 8013fe6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fe8:	69bb      	ldr	r3, [r7, #24]
 8013fea:	f383 8810 	msr	PRIMASK, r3
}
 8013fee:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8013ff0:	bf00      	nop
}
 8013ff2:	3720      	adds	r7, #32
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}
 8013ff8:	20003054 	.word	0x20003054

08013ffc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8013ffc:	b480      	push	{r7}
 8013ffe:	b087      	sub	sp, #28
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
 8014004:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014006:	f3ef 8310 	mrs	r3, PRIMASK
 801400a:	60fb      	str	r3, [r7, #12]
  return(result);
 801400c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801400e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014010:	b672      	cpsid	i
}
 8014012:	bf00      	nop

  TaskSet |= TaskId_bm;
 8014014:	4b0d      	ldr	r3, [pc, #52]	@ (801404c <UTIL_SEQ_SetTask+0x50>)
 8014016:	681a      	ldr	r2, [r3, #0]
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	4313      	orrs	r3, r2
 801401c:	4a0b      	ldr	r2, [pc, #44]	@ (801404c <UTIL_SEQ_SetTask+0x50>)
 801401e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8014020:	4a0b      	ldr	r2, [pc, #44]	@ (8014050 <UTIL_SEQ_SetTask+0x54>)
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	431a      	orrs	r2, r3
 801402c:	4908      	ldr	r1, [pc, #32]	@ (8014050 <UTIL_SEQ_SetTask+0x54>)
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8014034:	697b      	ldr	r3, [r7, #20]
 8014036:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014038:	693b      	ldr	r3, [r7, #16]
 801403a:	f383 8810 	msr	PRIMASK, r3
}
 801403e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8014040:	bf00      	nop
}
 8014042:	371c      	adds	r7, #28
 8014044:	46bd      	mov	sp, r7
 8014046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404a:	4770      	bx	lr
 801404c:	20003044 	.word	0x20003044
 8014050:	200030d4 	.word	0x200030d4

08014054 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8014054:	b480      	push	{r7}
 8014056:	b087      	sub	sp, #28
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801405c:	f3ef 8310 	mrs	r3, PRIMASK
 8014060:	60fb      	str	r3, [r7, #12]
  return(result);
 8014062:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8014064:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014066:	b672      	cpsid	i
}
 8014068:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	43da      	mvns	r2, r3
 801406e:	4b08      	ldr	r3, [pc, #32]	@ (8014090 <UTIL_SEQ_PauseTask+0x3c>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	4013      	ands	r3, r2
 8014074:	4a06      	ldr	r2, [pc, #24]	@ (8014090 <UTIL_SEQ_PauseTask+0x3c>)
 8014076:	6013      	str	r3, [r2, #0]
 8014078:	697b      	ldr	r3, [r7, #20]
 801407a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801407c:	693b      	ldr	r3, [r7, #16]
 801407e:	f383 8810 	msr	PRIMASK, r3
}
 8014082:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8014084:	bf00      	nop
}
 8014086:	371c      	adds	r7, #28
 8014088:	46bd      	mov	sp, r7
 801408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408e:	4770      	bx	lr
 8014090:	20000118 	.word	0x20000118

08014094 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8014094:	b480      	push	{r7}
 8014096:	b087      	sub	sp, #28
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801409c:	f3ef 8310 	mrs	r3, PRIMASK
 80140a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80140a2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80140a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80140a6:	b672      	cpsid	i
}
 80140a8:	bf00      	nop

  TaskMask |= TaskId_bm;
 80140aa:	4b09      	ldr	r3, [pc, #36]	@ (80140d0 <UTIL_SEQ_ResumeTask+0x3c>)
 80140ac:	681a      	ldr	r2, [r3, #0]
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	4313      	orrs	r3, r2
 80140b2:	4a07      	ldr	r2, [pc, #28]	@ (80140d0 <UTIL_SEQ_ResumeTask+0x3c>)
 80140b4:	6013      	str	r3, [r2, #0]
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80140ba:	693b      	ldr	r3, [r7, #16]
 80140bc:	f383 8810 	msr	PRIMASK, r3
}
 80140c0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80140c2:	bf00      	nop
}
 80140c4:	371c      	adds	r7, #28
 80140c6:	46bd      	mov	sp, r7
 80140c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140cc:	4770      	bx	lr
 80140ce:	bf00      	nop
 80140d0:	20000118 	.word	0x20000118

080140d4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80140d4:	b480      	push	{r7}
 80140d6:	b087      	sub	sp, #28
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80140dc:	f3ef 8310 	mrs	r3, PRIMASK
 80140e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80140e2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80140e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80140e6:	b672      	cpsid	i
}
 80140e8:	bf00      	nop

  EvtSet |= EvtId_bm;
 80140ea:	4b09      	ldr	r3, [pc, #36]	@ (8014110 <UTIL_SEQ_SetEvt+0x3c>)
 80140ec:	681a      	ldr	r2, [r3, #0]
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	4313      	orrs	r3, r2
 80140f2:	4a07      	ldr	r2, [pc, #28]	@ (8014110 <UTIL_SEQ_SetEvt+0x3c>)
 80140f4:	6013      	str	r3, [r2, #0]
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80140fa:	693b      	ldr	r3, [r7, #16]
 80140fc:	f383 8810 	msr	PRIMASK, r3
}
 8014100:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8014102:	bf00      	nop
}
 8014104:	371c      	adds	r7, #28
 8014106:	46bd      	mov	sp, r7
 8014108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410c:	4770      	bx	lr
 801410e:	bf00      	nop
 8014110:	20003048 	.word	0x20003048

08014114 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b088      	sub	sp, #32
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 801411c:	4b1f      	ldr	r3, [pc, #124]	@ (801419c <UTIL_SEQ_WaitEvt+0x88>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8014122:	4b1e      	ldr	r3, [pc, #120]	@ (801419c <UTIL_SEQ_WaitEvt+0x88>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	f1b3 3fff 	cmp.w	r3, #4294967295
 801412a:	d102      	bne.n	8014132 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 801412c:	2300      	movs	r3, #0
 801412e:	61fb      	str	r3, [r7, #28]
 8014130:	e005      	b.n	801413e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8014132:	4b1a      	ldr	r3, [pc, #104]	@ (801419c <UTIL_SEQ_WaitEvt+0x88>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	2201      	movs	r2, #1
 8014138:	fa02 f303 	lsl.w	r3, r2, r3
 801413c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801413e:	4b18      	ldr	r3, [pc, #96]	@ (80141a0 <UTIL_SEQ_WaitEvt+0x8c>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8014144:	4a16      	ldr	r2, [pc, #88]	@ (80141a0 <UTIL_SEQ_WaitEvt+0x8c>)
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801414a:	e003      	b.n	8014154 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 801414c:	6879      	ldr	r1, [r7, #4]
 801414e:	69f8      	ldr	r0, [r7, #28]
 8014150:	f7ed fad1 	bl	80016f6 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8014154:	4b13      	ldr	r3, [pc, #76]	@ (80141a4 <UTIL_SEQ_WaitEvt+0x90>)
 8014156:	681a      	ldr	r2, [r3, #0]
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	4013      	ands	r3, r2
 801415c:	2b00      	cmp	r3, #0
 801415e:	d0f5      	beq.n	801414c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8014160:	4a0e      	ldr	r2, [pc, #56]	@ (801419c <UTIL_SEQ_WaitEvt+0x88>)
 8014162:	69bb      	ldr	r3, [r7, #24]
 8014164:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014166:	f3ef 8310 	mrs	r3, PRIMASK
 801416a:	60bb      	str	r3, [r7, #8]
  return(result);
 801416c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801416e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8014170:	b672      	cpsid	i
}
 8014172:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	43da      	mvns	r2, r3
 8014178:	4b0a      	ldr	r3, [pc, #40]	@ (80141a4 <UTIL_SEQ_WaitEvt+0x90>)
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	4013      	ands	r3, r2
 801417e:	4a09      	ldr	r2, [pc, #36]	@ (80141a4 <UTIL_SEQ_WaitEvt+0x90>)
 8014180:	6013      	str	r3, [r2, #0]
 8014182:	693b      	ldr	r3, [r7, #16]
 8014184:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	f383 8810 	msr	PRIMASK, r3
}
 801418c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801418e:	4a04      	ldr	r2, [pc, #16]	@ (80141a0 <UTIL_SEQ_WaitEvt+0x8c>)
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	6013      	str	r3, [r2, #0]
  return;
 8014194:	bf00      	nop
}
 8014196:	3720      	adds	r7, #32
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}
 801419c:	20003050 	.word	0x20003050
 80141a0:	2000304c 	.word	0x2000304c
 80141a4:	20003048 	.word	0x20003048

080141a8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80141a8:	b480      	push	{r7}
 80141aa:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80141ac:	bf00      	nop
}
 80141ae:	46bd      	mov	sp, r7
 80141b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b4:	4770      	bx	lr

080141b6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80141b6:	b480      	push	{r7}
 80141b8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80141ba:	bf00      	nop
}
 80141bc:	46bd      	mov	sp, r7
 80141be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c2:	4770      	bx	lr

080141c4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80141c4:	b480      	push	{r7}
 80141c6:	b085      	sub	sp, #20
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80141cc:	2300      	movs	r3, #0
 80141ce:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80141da:	d204      	bcs.n	80141e6 <SEQ_BitPosition+0x22>
 80141dc:	2310      	movs	r3, #16
 80141de:	73fb      	strb	r3, [r7, #15]
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	041b      	lsls	r3, r3, #16
 80141e4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80141ec:	d205      	bcs.n	80141fa <SEQ_BitPosition+0x36>
 80141ee:	7bfb      	ldrb	r3, [r7, #15]
 80141f0:	3308      	adds	r3, #8
 80141f2:	73fb      	strb	r3, [r7, #15]
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	021b      	lsls	r3, r3, #8
 80141f8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014200:	d205      	bcs.n	801420e <SEQ_BitPosition+0x4a>
 8014202:	7bfb      	ldrb	r3, [r7, #15]
 8014204:	3304      	adds	r3, #4
 8014206:	73fb      	strb	r3, [r7, #15]
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	011b      	lsls	r3, r3, #4
 801420c:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	0f1b      	lsrs	r3, r3, #28
 8014212:	4a07      	ldr	r2, [pc, #28]	@ (8014230 <SEQ_BitPosition+0x6c>)
 8014214:	5cd2      	ldrb	r2, [r2, r3]
 8014216:	7bfb      	ldrb	r3, [r7, #15]
 8014218:	4413      	add	r3, r2
 801421a:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801421c:	7bfb      	ldrb	r3, [r7, #15]
 801421e:	f1c3 031f 	rsb	r3, r3, #31
 8014222:	b2db      	uxtb	r3, r3
}
 8014224:	4618      	mov	r0, r3
 8014226:	3714      	adds	r7, #20
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr
 8014230:	08016870 	.word	0x08016870

08014234 <std>:
 8014234:	2300      	movs	r3, #0
 8014236:	b510      	push	{r4, lr}
 8014238:	4604      	mov	r4, r0
 801423a:	e9c0 3300 	strd	r3, r3, [r0]
 801423e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014242:	6083      	str	r3, [r0, #8]
 8014244:	8181      	strh	r1, [r0, #12]
 8014246:	6643      	str	r3, [r0, #100]	@ 0x64
 8014248:	81c2      	strh	r2, [r0, #14]
 801424a:	6183      	str	r3, [r0, #24]
 801424c:	4619      	mov	r1, r3
 801424e:	2208      	movs	r2, #8
 8014250:	305c      	adds	r0, #92	@ 0x5c
 8014252:	f000 fa2f 	bl	80146b4 <memset>
 8014256:	4b0d      	ldr	r3, [pc, #52]	@ (801428c <std+0x58>)
 8014258:	6263      	str	r3, [r4, #36]	@ 0x24
 801425a:	4b0d      	ldr	r3, [pc, #52]	@ (8014290 <std+0x5c>)
 801425c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801425e:	4b0d      	ldr	r3, [pc, #52]	@ (8014294 <std+0x60>)
 8014260:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014262:	4b0d      	ldr	r3, [pc, #52]	@ (8014298 <std+0x64>)
 8014264:	6323      	str	r3, [r4, #48]	@ 0x30
 8014266:	4b0d      	ldr	r3, [pc, #52]	@ (801429c <std+0x68>)
 8014268:	6224      	str	r4, [r4, #32]
 801426a:	429c      	cmp	r4, r3
 801426c:	d006      	beq.n	801427c <std+0x48>
 801426e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014272:	4294      	cmp	r4, r2
 8014274:	d002      	beq.n	801427c <std+0x48>
 8014276:	33d0      	adds	r3, #208	@ 0xd0
 8014278:	429c      	cmp	r4, r3
 801427a:	d105      	bne.n	8014288 <std+0x54>
 801427c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014284:	f000 baa4 	b.w	80147d0 <__retarget_lock_init_recursive>
 8014288:	bd10      	pop	{r4, pc}
 801428a:	bf00      	nop
 801428c:	08014505 	.word	0x08014505
 8014290:	08014527 	.word	0x08014527
 8014294:	0801455f 	.word	0x0801455f
 8014298:	08014583 	.word	0x08014583
 801429c:	200030e4 	.word	0x200030e4

080142a0 <stdio_exit_handler>:
 80142a0:	4a02      	ldr	r2, [pc, #8]	@ (80142ac <stdio_exit_handler+0xc>)
 80142a2:	4903      	ldr	r1, [pc, #12]	@ (80142b0 <stdio_exit_handler+0x10>)
 80142a4:	4803      	ldr	r0, [pc, #12]	@ (80142b4 <stdio_exit_handler+0x14>)
 80142a6:	f000 b869 	b.w	801437c <_fwalk_sglue>
 80142aa:	bf00      	nop
 80142ac:	20000120 	.word	0x20000120
 80142b0:	08015339 	.word	0x08015339
 80142b4:	20000130 	.word	0x20000130

080142b8 <cleanup_stdio>:
 80142b8:	6841      	ldr	r1, [r0, #4]
 80142ba:	4b0c      	ldr	r3, [pc, #48]	@ (80142ec <cleanup_stdio+0x34>)
 80142bc:	4299      	cmp	r1, r3
 80142be:	b510      	push	{r4, lr}
 80142c0:	4604      	mov	r4, r0
 80142c2:	d001      	beq.n	80142c8 <cleanup_stdio+0x10>
 80142c4:	f001 f838 	bl	8015338 <_fflush_r>
 80142c8:	68a1      	ldr	r1, [r4, #8]
 80142ca:	4b09      	ldr	r3, [pc, #36]	@ (80142f0 <cleanup_stdio+0x38>)
 80142cc:	4299      	cmp	r1, r3
 80142ce:	d002      	beq.n	80142d6 <cleanup_stdio+0x1e>
 80142d0:	4620      	mov	r0, r4
 80142d2:	f001 f831 	bl	8015338 <_fflush_r>
 80142d6:	68e1      	ldr	r1, [r4, #12]
 80142d8:	4b06      	ldr	r3, [pc, #24]	@ (80142f4 <cleanup_stdio+0x3c>)
 80142da:	4299      	cmp	r1, r3
 80142dc:	d004      	beq.n	80142e8 <cleanup_stdio+0x30>
 80142de:	4620      	mov	r0, r4
 80142e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142e4:	f001 b828 	b.w	8015338 <_fflush_r>
 80142e8:	bd10      	pop	{r4, pc}
 80142ea:	bf00      	nop
 80142ec:	200030e4 	.word	0x200030e4
 80142f0:	2000314c 	.word	0x2000314c
 80142f4:	200031b4 	.word	0x200031b4

080142f8 <global_stdio_init.part.0>:
 80142f8:	b510      	push	{r4, lr}
 80142fa:	4b0b      	ldr	r3, [pc, #44]	@ (8014328 <global_stdio_init.part.0+0x30>)
 80142fc:	4c0b      	ldr	r4, [pc, #44]	@ (801432c <global_stdio_init.part.0+0x34>)
 80142fe:	4a0c      	ldr	r2, [pc, #48]	@ (8014330 <global_stdio_init.part.0+0x38>)
 8014300:	601a      	str	r2, [r3, #0]
 8014302:	4620      	mov	r0, r4
 8014304:	2200      	movs	r2, #0
 8014306:	2104      	movs	r1, #4
 8014308:	f7ff ff94 	bl	8014234 <std>
 801430c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014310:	2201      	movs	r2, #1
 8014312:	2109      	movs	r1, #9
 8014314:	f7ff ff8e 	bl	8014234 <std>
 8014318:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801431c:	2202      	movs	r2, #2
 801431e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014322:	2112      	movs	r1, #18
 8014324:	f7ff bf86 	b.w	8014234 <std>
 8014328:	2000321c 	.word	0x2000321c
 801432c:	200030e4 	.word	0x200030e4
 8014330:	080142a1 	.word	0x080142a1

08014334 <__sfp_lock_acquire>:
 8014334:	4801      	ldr	r0, [pc, #4]	@ (801433c <__sfp_lock_acquire+0x8>)
 8014336:	f000 ba4c 	b.w	80147d2 <__retarget_lock_acquire_recursive>
 801433a:	bf00      	nop
 801433c:	20003225 	.word	0x20003225

08014340 <__sfp_lock_release>:
 8014340:	4801      	ldr	r0, [pc, #4]	@ (8014348 <__sfp_lock_release+0x8>)
 8014342:	f000 ba47 	b.w	80147d4 <__retarget_lock_release_recursive>
 8014346:	bf00      	nop
 8014348:	20003225 	.word	0x20003225

0801434c <__sinit>:
 801434c:	b510      	push	{r4, lr}
 801434e:	4604      	mov	r4, r0
 8014350:	f7ff fff0 	bl	8014334 <__sfp_lock_acquire>
 8014354:	6a23      	ldr	r3, [r4, #32]
 8014356:	b11b      	cbz	r3, 8014360 <__sinit+0x14>
 8014358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801435c:	f7ff bff0 	b.w	8014340 <__sfp_lock_release>
 8014360:	4b04      	ldr	r3, [pc, #16]	@ (8014374 <__sinit+0x28>)
 8014362:	6223      	str	r3, [r4, #32]
 8014364:	4b04      	ldr	r3, [pc, #16]	@ (8014378 <__sinit+0x2c>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d1f5      	bne.n	8014358 <__sinit+0xc>
 801436c:	f7ff ffc4 	bl	80142f8 <global_stdio_init.part.0>
 8014370:	e7f2      	b.n	8014358 <__sinit+0xc>
 8014372:	bf00      	nop
 8014374:	080142b9 	.word	0x080142b9
 8014378:	2000321c 	.word	0x2000321c

0801437c <_fwalk_sglue>:
 801437c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014380:	4607      	mov	r7, r0
 8014382:	4688      	mov	r8, r1
 8014384:	4614      	mov	r4, r2
 8014386:	2600      	movs	r6, #0
 8014388:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801438c:	f1b9 0901 	subs.w	r9, r9, #1
 8014390:	d505      	bpl.n	801439e <_fwalk_sglue+0x22>
 8014392:	6824      	ldr	r4, [r4, #0]
 8014394:	2c00      	cmp	r4, #0
 8014396:	d1f7      	bne.n	8014388 <_fwalk_sglue+0xc>
 8014398:	4630      	mov	r0, r6
 801439a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801439e:	89ab      	ldrh	r3, [r5, #12]
 80143a0:	2b01      	cmp	r3, #1
 80143a2:	d907      	bls.n	80143b4 <_fwalk_sglue+0x38>
 80143a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80143a8:	3301      	adds	r3, #1
 80143aa:	d003      	beq.n	80143b4 <_fwalk_sglue+0x38>
 80143ac:	4629      	mov	r1, r5
 80143ae:	4638      	mov	r0, r7
 80143b0:	47c0      	blx	r8
 80143b2:	4306      	orrs	r6, r0
 80143b4:	3568      	adds	r5, #104	@ 0x68
 80143b6:	e7e9      	b.n	801438c <_fwalk_sglue+0x10>

080143b8 <iprintf>:
 80143b8:	b40f      	push	{r0, r1, r2, r3}
 80143ba:	b507      	push	{r0, r1, r2, lr}
 80143bc:	4906      	ldr	r1, [pc, #24]	@ (80143d8 <iprintf+0x20>)
 80143be:	ab04      	add	r3, sp, #16
 80143c0:	6808      	ldr	r0, [r1, #0]
 80143c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80143c6:	6881      	ldr	r1, [r0, #8]
 80143c8:	9301      	str	r3, [sp, #4]
 80143ca:	f000 fc8d 	bl	8014ce8 <_vfiprintf_r>
 80143ce:	b003      	add	sp, #12
 80143d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80143d4:	b004      	add	sp, #16
 80143d6:	4770      	bx	lr
 80143d8:	2000012c 	.word	0x2000012c

080143dc <_puts_r>:
 80143dc:	6a03      	ldr	r3, [r0, #32]
 80143de:	b570      	push	{r4, r5, r6, lr}
 80143e0:	6884      	ldr	r4, [r0, #8]
 80143e2:	4605      	mov	r5, r0
 80143e4:	460e      	mov	r6, r1
 80143e6:	b90b      	cbnz	r3, 80143ec <_puts_r+0x10>
 80143e8:	f7ff ffb0 	bl	801434c <__sinit>
 80143ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80143ee:	07db      	lsls	r3, r3, #31
 80143f0:	d405      	bmi.n	80143fe <_puts_r+0x22>
 80143f2:	89a3      	ldrh	r3, [r4, #12]
 80143f4:	0598      	lsls	r0, r3, #22
 80143f6:	d402      	bmi.n	80143fe <_puts_r+0x22>
 80143f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80143fa:	f000 f9ea 	bl	80147d2 <__retarget_lock_acquire_recursive>
 80143fe:	89a3      	ldrh	r3, [r4, #12]
 8014400:	0719      	lsls	r1, r3, #28
 8014402:	d502      	bpl.n	801440a <_puts_r+0x2e>
 8014404:	6923      	ldr	r3, [r4, #16]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d135      	bne.n	8014476 <_puts_r+0x9a>
 801440a:	4621      	mov	r1, r4
 801440c:	4628      	mov	r0, r5
 801440e:	f000 f8fb 	bl	8014608 <__swsetup_r>
 8014412:	b380      	cbz	r0, 8014476 <_puts_r+0x9a>
 8014414:	f04f 35ff 	mov.w	r5, #4294967295
 8014418:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801441a:	07da      	lsls	r2, r3, #31
 801441c:	d405      	bmi.n	801442a <_puts_r+0x4e>
 801441e:	89a3      	ldrh	r3, [r4, #12]
 8014420:	059b      	lsls	r3, r3, #22
 8014422:	d402      	bmi.n	801442a <_puts_r+0x4e>
 8014424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014426:	f000 f9d5 	bl	80147d4 <__retarget_lock_release_recursive>
 801442a:	4628      	mov	r0, r5
 801442c:	bd70      	pop	{r4, r5, r6, pc}
 801442e:	2b00      	cmp	r3, #0
 8014430:	da04      	bge.n	801443c <_puts_r+0x60>
 8014432:	69a2      	ldr	r2, [r4, #24]
 8014434:	429a      	cmp	r2, r3
 8014436:	dc17      	bgt.n	8014468 <_puts_r+0x8c>
 8014438:	290a      	cmp	r1, #10
 801443a:	d015      	beq.n	8014468 <_puts_r+0x8c>
 801443c:	6823      	ldr	r3, [r4, #0]
 801443e:	1c5a      	adds	r2, r3, #1
 8014440:	6022      	str	r2, [r4, #0]
 8014442:	7019      	strb	r1, [r3, #0]
 8014444:	68a3      	ldr	r3, [r4, #8]
 8014446:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801444a:	3b01      	subs	r3, #1
 801444c:	60a3      	str	r3, [r4, #8]
 801444e:	2900      	cmp	r1, #0
 8014450:	d1ed      	bne.n	801442e <_puts_r+0x52>
 8014452:	2b00      	cmp	r3, #0
 8014454:	da11      	bge.n	801447a <_puts_r+0x9e>
 8014456:	4622      	mov	r2, r4
 8014458:	210a      	movs	r1, #10
 801445a:	4628      	mov	r0, r5
 801445c:	f000 f895 	bl	801458a <__swbuf_r>
 8014460:	3001      	adds	r0, #1
 8014462:	d0d7      	beq.n	8014414 <_puts_r+0x38>
 8014464:	250a      	movs	r5, #10
 8014466:	e7d7      	b.n	8014418 <_puts_r+0x3c>
 8014468:	4622      	mov	r2, r4
 801446a:	4628      	mov	r0, r5
 801446c:	f000 f88d 	bl	801458a <__swbuf_r>
 8014470:	3001      	adds	r0, #1
 8014472:	d1e7      	bne.n	8014444 <_puts_r+0x68>
 8014474:	e7ce      	b.n	8014414 <_puts_r+0x38>
 8014476:	3e01      	subs	r6, #1
 8014478:	e7e4      	b.n	8014444 <_puts_r+0x68>
 801447a:	6823      	ldr	r3, [r4, #0]
 801447c:	1c5a      	adds	r2, r3, #1
 801447e:	6022      	str	r2, [r4, #0]
 8014480:	220a      	movs	r2, #10
 8014482:	701a      	strb	r2, [r3, #0]
 8014484:	e7ee      	b.n	8014464 <_puts_r+0x88>
	...

08014488 <puts>:
 8014488:	4b02      	ldr	r3, [pc, #8]	@ (8014494 <puts+0xc>)
 801448a:	4601      	mov	r1, r0
 801448c:	6818      	ldr	r0, [r3, #0]
 801448e:	f7ff bfa5 	b.w	80143dc <_puts_r>
 8014492:	bf00      	nop
 8014494:	2000012c 	.word	0x2000012c

08014498 <sniprintf>:
 8014498:	b40c      	push	{r2, r3}
 801449a:	b530      	push	{r4, r5, lr}
 801449c:	4b18      	ldr	r3, [pc, #96]	@ (8014500 <sniprintf+0x68>)
 801449e:	1e0c      	subs	r4, r1, #0
 80144a0:	681d      	ldr	r5, [r3, #0]
 80144a2:	b09d      	sub	sp, #116	@ 0x74
 80144a4:	da08      	bge.n	80144b8 <sniprintf+0x20>
 80144a6:	238b      	movs	r3, #139	@ 0x8b
 80144a8:	602b      	str	r3, [r5, #0]
 80144aa:	f04f 30ff 	mov.w	r0, #4294967295
 80144ae:	b01d      	add	sp, #116	@ 0x74
 80144b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144b4:	b002      	add	sp, #8
 80144b6:	4770      	bx	lr
 80144b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80144bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80144c0:	f04f 0300 	mov.w	r3, #0
 80144c4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80144c6:	bf14      	ite	ne
 80144c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80144cc:	4623      	moveq	r3, r4
 80144ce:	9304      	str	r3, [sp, #16]
 80144d0:	9307      	str	r3, [sp, #28]
 80144d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80144d6:	9002      	str	r0, [sp, #8]
 80144d8:	9006      	str	r0, [sp, #24]
 80144da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80144de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80144e0:	ab21      	add	r3, sp, #132	@ 0x84
 80144e2:	a902      	add	r1, sp, #8
 80144e4:	4628      	mov	r0, r5
 80144e6:	9301      	str	r3, [sp, #4]
 80144e8:	f000 fad8 	bl	8014a9c <_svfiprintf_r>
 80144ec:	1c43      	adds	r3, r0, #1
 80144ee:	bfbc      	itt	lt
 80144f0:	238b      	movlt	r3, #139	@ 0x8b
 80144f2:	602b      	strlt	r3, [r5, #0]
 80144f4:	2c00      	cmp	r4, #0
 80144f6:	d0da      	beq.n	80144ae <sniprintf+0x16>
 80144f8:	9b02      	ldr	r3, [sp, #8]
 80144fa:	2200      	movs	r2, #0
 80144fc:	701a      	strb	r2, [r3, #0]
 80144fe:	e7d6      	b.n	80144ae <sniprintf+0x16>
 8014500:	2000012c 	.word	0x2000012c

08014504 <__sread>:
 8014504:	b510      	push	{r4, lr}
 8014506:	460c      	mov	r4, r1
 8014508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801450c:	f000 f912 	bl	8014734 <_read_r>
 8014510:	2800      	cmp	r0, #0
 8014512:	bfab      	itete	ge
 8014514:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014516:	89a3      	ldrhlt	r3, [r4, #12]
 8014518:	181b      	addge	r3, r3, r0
 801451a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801451e:	bfac      	ite	ge
 8014520:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014522:	81a3      	strhlt	r3, [r4, #12]
 8014524:	bd10      	pop	{r4, pc}

08014526 <__swrite>:
 8014526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801452a:	461f      	mov	r7, r3
 801452c:	898b      	ldrh	r3, [r1, #12]
 801452e:	05db      	lsls	r3, r3, #23
 8014530:	4605      	mov	r5, r0
 8014532:	460c      	mov	r4, r1
 8014534:	4616      	mov	r6, r2
 8014536:	d505      	bpl.n	8014544 <__swrite+0x1e>
 8014538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801453c:	2302      	movs	r3, #2
 801453e:	2200      	movs	r2, #0
 8014540:	f000 f8e6 	bl	8014710 <_lseek_r>
 8014544:	89a3      	ldrh	r3, [r4, #12]
 8014546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801454a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801454e:	81a3      	strh	r3, [r4, #12]
 8014550:	4632      	mov	r2, r6
 8014552:	463b      	mov	r3, r7
 8014554:	4628      	mov	r0, r5
 8014556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801455a:	f000 b8fd 	b.w	8014758 <_write_r>

0801455e <__sseek>:
 801455e:	b510      	push	{r4, lr}
 8014560:	460c      	mov	r4, r1
 8014562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014566:	f000 f8d3 	bl	8014710 <_lseek_r>
 801456a:	1c43      	adds	r3, r0, #1
 801456c:	89a3      	ldrh	r3, [r4, #12]
 801456e:	bf15      	itete	ne
 8014570:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014572:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014576:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801457a:	81a3      	strheq	r3, [r4, #12]
 801457c:	bf18      	it	ne
 801457e:	81a3      	strhne	r3, [r4, #12]
 8014580:	bd10      	pop	{r4, pc}

08014582 <__sclose>:
 8014582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014586:	f000 b8b3 	b.w	80146f0 <_close_r>

0801458a <__swbuf_r>:
 801458a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801458c:	460e      	mov	r6, r1
 801458e:	4614      	mov	r4, r2
 8014590:	4605      	mov	r5, r0
 8014592:	b118      	cbz	r0, 801459c <__swbuf_r+0x12>
 8014594:	6a03      	ldr	r3, [r0, #32]
 8014596:	b90b      	cbnz	r3, 801459c <__swbuf_r+0x12>
 8014598:	f7ff fed8 	bl	801434c <__sinit>
 801459c:	69a3      	ldr	r3, [r4, #24]
 801459e:	60a3      	str	r3, [r4, #8]
 80145a0:	89a3      	ldrh	r3, [r4, #12]
 80145a2:	071a      	lsls	r2, r3, #28
 80145a4:	d501      	bpl.n	80145aa <__swbuf_r+0x20>
 80145a6:	6923      	ldr	r3, [r4, #16]
 80145a8:	b943      	cbnz	r3, 80145bc <__swbuf_r+0x32>
 80145aa:	4621      	mov	r1, r4
 80145ac:	4628      	mov	r0, r5
 80145ae:	f000 f82b 	bl	8014608 <__swsetup_r>
 80145b2:	b118      	cbz	r0, 80145bc <__swbuf_r+0x32>
 80145b4:	f04f 37ff 	mov.w	r7, #4294967295
 80145b8:	4638      	mov	r0, r7
 80145ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145bc:	6823      	ldr	r3, [r4, #0]
 80145be:	6922      	ldr	r2, [r4, #16]
 80145c0:	1a98      	subs	r0, r3, r2
 80145c2:	6963      	ldr	r3, [r4, #20]
 80145c4:	b2f6      	uxtb	r6, r6
 80145c6:	4283      	cmp	r3, r0
 80145c8:	4637      	mov	r7, r6
 80145ca:	dc05      	bgt.n	80145d8 <__swbuf_r+0x4e>
 80145cc:	4621      	mov	r1, r4
 80145ce:	4628      	mov	r0, r5
 80145d0:	f000 feb2 	bl	8015338 <_fflush_r>
 80145d4:	2800      	cmp	r0, #0
 80145d6:	d1ed      	bne.n	80145b4 <__swbuf_r+0x2a>
 80145d8:	68a3      	ldr	r3, [r4, #8]
 80145da:	3b01      	subs	r3, #1
 80145dc:	60a3      	str	r3, [r4, #8]
 80145de:	6823      	ldr	r3, [r4, #0]
 80145e0:	1c5a      	adds	r2, r3, #1
 80145e2:	6022      	str	r2, [r4, #0]
 80145e4:	701e      	strb	r6, [r3, #0]
 80145e6:	6962      	ldr	r2, [r4, #20]
 80145e8:	1c43      	adds	r3, r0, #1
 80145ea:	429a      	cmp	r2, r3
 80145ec:	d004      	beq.n	80145f8 <__swbuf_r+0x6e>
 80145ee:	89a3      	ldrh	r3, [r4, #12]
 80145f0:	07db      	lsls	r3, r3, #31
 80145f2:	d5e1      	bpl.n	80145b8 <__swbuf_r+0x2e>
 80145f4:	2e0a      	cmp	r6, #10
 80145f6:	d1df      	bne.n	80145b8 <__swbuf_r+0x2e>
 80145f8:	4621      	mov	r1, r4
 80145fa:	4628      	mov	r0, r5
 80145fc:	f000 fe9c 	bl	8015338 <_fflush_r>
 8014600:	2800      	cmp	r0, #0
 8014602:	d0d9      	beq.n	80145b8 <__swbuf_r+0x2e>
 8014604:	e7d6      	b.n	80145b4 <__swbuf_r+0x2a>
	...

08014608 <__swsetup_r>:
 8014608:	b538      	push	{r3, r4, r5, lr}
 801460a:	4b29      	ldr	r3, [pc, #164]	@ (80146b0 <__swsetup_r+0xa8>)
 801460c:	4605      	mov	r5, r0
 801460e:	6818      	ldr	r0, [r3, #0]
 8014610:	460c      	mov	r4, r1
 8014612:	b118      	cbz	r0, 801461c <__swsetup_r+0x14>
 8014614:	6a03      	ldr	r3, [r0, #32]
 8014616:	b90b      	cbnz	r3, 801461c <__swsetup_r+0x14>
 8014618:	f7ff fe98 	bl	801434c <__sinit>
 801461c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014620:	0719      	lsls	r1, r3, #28
 8014622:	d422      	bmi.n	801466a <__swsetup_r+0x62>
 8014624:	06da      	lsls	r2, r3, #27
 8014626:	d407      	bmi.n	8014638 <__swsetup_r+0x30>
 8014628:	2209      	movs	r2, #9
 801462a:	602a      	str	r2, [r5, #0]
 801462c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014630:	81a3      	strh	r3, [r4, #12]
 8014632:	f04f 30ff 	mov.w	r0, #4294967295
 8014636:	e033      	b.n	80146a0 <__swsetup_r+0x98>
 8014638:	0758      	lsls	r0, r3, #29
 801463a:	d512      	bpl.n	8014662 <__swsetup_r+0x5a>
 801463c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801463e:	b141      	cbz	r1, 8014652 <__swsetup_r+0x4a>
 8014640:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014644:	4299      	cmp	r1, r3
 8014646:	d002      	beq.n	801464e <__swsetup_r+0x46>
 8014648:	4628      	mov	r0, r5
 801464a:	f000 f8d3 	bl	80147f4 <_free_r>
 801464e:	2300      	movs	r3, #0
 8014650:	6363      	str	r3, [r4, #52]	@ 0x34
 8014652:	89a3      	ldrh	r3, [r4, #12]
 8014654:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014658:	81a3      	strh	r3, [r4, #12]
 801465a:	2300      	movs	r3, #0
 801465c:	6063      	str	r3, [r4, #4]
 801465e:	6923      	ldr	r3, [r4, #16]
 8014660:	6023      	str	r3, [r4, #0]
 8014662:	89a3      	ldrh	r3, [r4, #12]
 8014664:	f043 0308 	orr.w	r3, r3, #8
 8014668:	81a3      	strh	r3, [r4, #12]
 801466a:	6923      	ldr	r3, [r4, #16]
 801466c:	b94b      	cbnz	r3, 8014682 <__swsetup_r+0x7a>
 801466e:	89a3      	ldrh	r3, [r4, #12]
 8014670:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014678:	d003      	beq.n	8014682 <__swsetup_r+0x7a>
 801467a:	4621      	mov	r1, r4
 801467c:	4628      	mov	r0, r5
 801467e:	f000 fea9 	bl	80153d4 <__smakebuf_r>
 8014682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014686:	f013 0201 	ands.w	r2, r3, #1
 801468a:	d00a      	beq.n	80146a2 <__swsetup_r+0x9a>
 801468c:	2200      	movs	r2, #0
 801468e:	60a2      	str	r2, [r4, #8]
 8014690:	6962      	ldr	r2, [r4, #20]
 8014692:	4252      	negs	r2, r2
 8014694:	61a2      	str	r2, [r4, #24]
 8014696:	6922      	ldr	r2, [r4, #16]
 8014698:	b942      	cbnz	r2, 80146ac <__swsetup_r+0xa4>
 801469a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801469e:	d1c5      	bne.n	801462c <__swsetup_r+0x24>
 80146a0:	bd38      	pop	{r3, r4, r5, pc}
 80146a2:	0799      	lsls	r1, r3, #30
 80146a4:	bf58      	it	pl
 80146a6:	6962      	ldrpl	r2, [r4, #20]
 80146a8:	60a2      	str	r2, [r4, #8]
 80146aa:	e7f4      	b.n	8014696 <__swsetup_r+0x8e>
 80146ac:	2000      	movs	r0, #0
 80146ae:	e7f7      	b.n	80146a0 <__swsetup_r+0x98>
 80146b0:	2000012c 	.word	0x2000012c

080146b4 <memset>:
 80146b4:	4402      	add	r2, r0
 80146b6:	4603      	mov	r3, r0
 80146b8:	4293      	cmp	r3, r2
 80146ba:	d100      	bne.n	80146be <memset+0xa>
 80146bc:	4770      	bx	lr
 80146be:	f803 1b01 	strb.w	r1, [r3], #1
 80146c2:	e7f9      	b.n	80146b8 <memset+0x4>

080146c4 <strrchr>:
 80146c4:	b538      	push	{r3, r4, r5, lr}
 80146c6:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 80146ca:	4603      	mov	r3, r0
 80146cc:	d10e      	bne.n	80146ec <strrchr+0x28>
 80146ce:	4621      	mov	r1, r4
 80146d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146d4:	f000 bed4 	b.w	8015480 <strchr>
 80146d8:	1c43      	adds	r3, r0, #1
 80146da:	4605      	mov	r5, r0
 80146dc:	4621      	mov	r1, r4
 80146de:	4618      	mov	r0, r3
 80146e0:	f000 fece 	bl	8015480 <strchr>
 80146e4:	2800      	cmp	r0, #0
 80146e6:	d1f7      	bne.n	80146d8 <strrchr+0x14>
 80146e8:	4628      	mov	r0, r5
 80146ea:	bd38      	pop	{r3, r4, r5, pc}
 80146ec:	2500      	movs	r5, #0
 80146ee:	e7f5      	b.n	80146dc <strrchr+0x18>

080146f0 <_close_r>:
 80146f0:	b538      	push	{r3, r4, r5, lr}
 80146f2:	4d06      	ldr	r5, [pc, #24]	@ (801470c <_close_r+0x1c>)
 80146f4:	2300      	movs	r3, #0
 80146f6:	4604      	mov	r4, r0
 80146f8:	4608      	mov	r0, r1
 80146fa:	602b      	str	r3, [r5, #0]
 80146fc:	f7ee fae9 	bl	8002cd2 <_close>
 8014700:	1c43      	adds	r3, r0, #1
 8014702:	d102      	bne.n	801470a <_close_r+0x1a>
 8014704:	682b      	ldr	r3, [r5, #0]
 8014706:	b103      	cbz	r3, 801470a <_close_r+0x1a>
 8014708:	6023      	str	r3, [r4, #0]
 801470a:	bd38      	pop	{r3, r4, r5, pc}
 801470c:	20003220 	.word	0x20003220

08014710 <_lseek_r>:
 8014710:	b538      	push	{r3, r4, r5, lr}
 8014712:	4d07      	ldr	r5, [pc, #28]	@ (8014730 <_lseek_r+0x20>)
 8014714:	4604      	mov	r4, r0
 8014716:	4608      	mov	r0, r1
 8014718:	4611      	mov	r1, r2
 801471a:	2200      	movs	r2, #0
 801471c:	602a      	str	r2, [r5, #0]
 801471e:	461a      	mov	r2, r3
 8014720:	f7ee fafe 	bl	8002d20 <_lseek>
 8014724:	1c43      	adds	r3, r0, #1
 8014726:	d102      	bne.n	801472e <_lseek_r+0x1e>
 8014728:	682b      	ldr	r3, [r5, #0]
 801472a:	b103      	cbz	r3, 801472e <_lseek_r+0x1e>
 801472c:	6023      	str	r3, [r4, #0]
 801472e:	bd38      	pop	{r3, r4, r5, pc}
 8014730:	20003220 	.word	0x20003220

08014734 <_read_r>:
 8014734:	b538      	push	{r3, r4, r5, lr}
 8014736:	4d07      	ldr	r5, [pc, #28]	@ (8014754 <_read_r+0x20>)
 8014738:	4604      	mov	r4, r0
 801473a:	4608      	mov	r0, r1
 801473c:	4611      	mov	r1, r2
 801473e:	2200      	movs	r2, #0
 8014740:	602a      	str	r2, [r5, #0]
 8014742:	461a      	mov	r2, r3
 8014744:	f7ee faa8 	bl	8002c98 <_read>
 8014748:	1c43      	adds	r3, r0, #1
 801474a:	d102      	bne.n	8014752 <_read_r+0x1e>
 801474c:	682b      	ldr	r3, [r5, #0]
 801474e:	b103      	cbz	r3, 8014752 <_read_r+0x1e>
 8014750:	6023      	str	r3, [r4, #0]
 8014752:	bd38      	pop	{r3, r4, r5, pc}
 8014754:	20003220 	.word	0x20003220

08014758 <_write_r>:
 8014758:	b538      	push	{r3, r4, r5, lr}
 801475a:	4d07      	ldr	r5, [pc, #28]	@ (8014778 <_write_r+0x20>)
 801475c:	4604      	mov	r4, r0
 801475e:	4608      	mov	r0, r1
 8014760:	4611      	mov	r1, r2
 8014762:	2200      	movs	r2, #0
 8014764:	602a      	str	r2, [r5, #0]
 8014766:	461a      	mov	r2, r3
 8014768:	f7fc fdac 	bl	80112c4 <_write>
 801476c:	1c43      	adds	r3, r0, #1
 801476e:	d102      	bne.n	8014776 <_write_r+0x1e>
 8014770:	682b      	ldr	r3, [r5, #0]
 8014772:	b103      	cbz	r3, 8014776 <_write_r+0x1e>
 8014774:	6023      	str	r3, [r4, #0]
 8014776:	bd38      	pop	{r3, r4, r5, pc}
 8014778:	20003220 	.word	0x20003220

0801477c <__errno>:
 801477c:	4b01      	ldr	r3, [pc, #4]	@ (8014784 <__errno+0x8>)
 801477e:	6818      	ldr	r0, [r3, #0]
 8014780:	4770      	bx	lr
 8014782:	bf00      	nop
 8014784:	2000012c 	.word	0x2000012c

08014788 <__libc_init_array>:
 8014788:	b570      	push	{r4, r5, r6, lr}
 801478a:	4d0d      	ldr	r5, [pc, #52]	@ (80147c0 <__libc_init_array+0x38>)
 801478c:	4c0d      	ldr	r4, [pc, #52]	@ (80147c4 <__libc_init_array+0x3c>)
 801478e:	1b64      	subs	r4, r4, r5
 8014790:	10a4      	asrs	r4, r4, #2
 8014792:	2600      	movs	r6, #0
 8014794:	42a6      	cmp	r6, r4
 8014796:	d109      	bne.n	80147ac <__libc_init_array+0x24>
 8014798:	4d0b      	ldr	r5, [pc, #44]	@ (80147c8 <__libc_init_array+0x40>)
 801479a:	4c0c      	ldr	r4, [pc, #48]	@ (80147cc <__libc_init_array+0x44>)
 801479c:	f000 fee6 	bl	801556c <_init>
 80147a0:	1b64      	subs	r4, r4, r5
 80147a2:	10a4      	asrs	r4, r4, #2
 80147a4:	2600      	movs	r6, #0
 80147a6:	42a6      	cmp	r6, r4
 80147a8:	d105      	bne.n	80147b6 <__libc_init_array+0x2e>
 80147aa:	bd70      	pop	{r4, r5, r6, pc}
 80147ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80147b0:	4798      	blx	r3
 80147b2:	3601      	adds	r6, #1
 80147b4:	e7ee      	b.n	8014794 <__libc_init_array+0xc>
 80147b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80147ba:	4798      	blx	r3
 80147bc:	3601      	adds	r6, #1
 80147be:	e7f2      	b.n	80147a6 <__libc_init_array+0x1e>
 80147c0:	080168bc 	.word	0x080168bc
 80147c4:	080168bc 	.word	0x080168bc
 80147c8:	080168bc 	.word	0x080168bc
 80147cc:	080168c0 	.word	0x080168c0

080147d0 <__retarget_lock_init_recursive>:
 80147d0:	4770      	bx	lr

080147d2 <__retarget_lock_acquire_recursive>:
 80147d2:	4770      	bx	lr

080147d4 <__retarget_lock_release_recursive>:
 80147d4:	4770      	bx	lr

080147d6 <memcpy>:
 80147d6:	440a      	add	r2, r1
 80147d8:	4291      	cmp	r1, r2
 80147da:	f100 33ff 	add.w	r3, r0, #4294967295
 80147de:	d100      	bne.n	80147e2 <memcpy+0xc>
 80147e0:	4770      	bx	lr
 80147e2:	b510      	push	{r4, lr}
 80147e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80147ec:	4291      	cmp	r1, r2
 80147ee:	d1f9      	bne.n	80147e4 <memcpy+0xe>
 80147f0:	bd10      	pop	{r4, pc}
	...

080147f4 <_free_r>:
 80147f4:	b538      	push	{r3, r4, r5, lr}
 80147f6:	4605      	mov	r5, r0
 80147f8:	2900      	cmp	r1, #0
 80147fa:	d041      	beq.n	8014880 <_free_r+0x8c>
 80147fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014800:	1f0c      	subs	r4, r1, #4
 8014802:	2b00      	cmp	r3, #0
 8014804:	bfb8      	it	lt
 8014806:	18e4      	addlt	r4, r4, r3
 8014808:	f000 f8e0 	bl	80149cc <__malloc_lock>
 801480c:	4a1d      	ldr	r2, [pc, #116]	@ (8014884 <_free_r+0x90>)
 801480e:	6813      	ldr	r3, [r2, #0]
 8014810:	b933      	cbnz	r3, 8014820 <_free_r+0x2c>
 8014812:	6063      	str	r3, [r4, #4]
 8014814:	6014      	str	r4, [r2, #0]
 8014816:	4628      	mov	r0, r5
 8014818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801481c:	f000 b8dc 	b.w	80149d8 <__malloc_unlock>
 8014820:	42a3      	cmp	r3, r4
 8014822:	d908      	bls.n	8014836 <_free_r+0x42>
 8014824:	6820      	ldr	r0, [r4, #0]
 8014826:	1821      	adds	r1, r4, r0
 8014828:	428b      	cmp	r3, r1
 801482a:	bf01      	itttt	eq
 801482c:	6819      	ldreq	r1, [r3, #0]
 801482e:	685b      	ldreq	r3, [r3, #4]
 8014830:	1809      	addeq	r1, r1, r0
 8014832:	6021      	streq	r1, [r4, #0]
 8014834:	e7ed      	b.n	8014812 <_free_r+0x1e>
 8014836:	461a      	mov	r2, r3
 8014838:	685b      	ldr	r3, [r3, #4]
 801483a:	b10b      	cbz	r3, 8014840 <_free_r+0x4c>
 801483c:	42a3      	cmp	r3, r4
 801483e:	d9fa      	bls.n	8014836 <_free_r+0x42>
 8014840:	6811      	ldr	r1, [r2, #0]
 8014842:	1850      	adds	r0, r2, r1
 8014844:	42a0      	cmp	r0, r4
 8014846:	d10b      	bne.n	8014860 <_free_r+0x6c>
 8014848:	6820      	ldr	r0, [r4, #0]
 801484a:	4401      	add	r1, r0
 801484c:	1850      	adds	r0, r2, r1
 801484e:	4283      	cmp	r3, r0
 8014850:	6011      	str	r1, [r2, #0]
 8014852:	d1e0      	bne.n	8014816 <_free_r+0x22>
 8014854:	6818      	ldr	r0, [r3, #0]
 8014856:	685b      	ldr	r3, [r3, #4]
 8014858:	6053      	str	r3, [r2, #4]
 801485a:	4408      	add	r0, r1
 801485c:	6010      	str	r0, [r2, #0]
 801485e:	e7da      	b.n	8014816 <_free_r+0x22>
 8014860:	d902      	bls.n	8014868 <_free_r+0x74>
 8014862:	230c      	movs	r3, #12
 8014864:	602b      	str	r3, [r5, #0]
 8014866:	e7d6      	b.n	8014816 <_free_r+0x22>
 8014868:	6820      	ldr	r0, [r4, #0]
 801486a:	1821      	adds	r1, r4, r0
 801486c:	428b      	cmp	r3, r1
 801486e:	bf04      	itt	eq
 8014870:	6819      	ldreq	r1, [r3, #0]
 8014872:	685b      	ldreq	r3, [r3, #4]
 8014874:	6063      	str	r3, [r4, #4]
 8014876:	bf04      	itt	eq
 8014878:	1809      	addeq	r1, r1, r0
 801487a:	6021      	streq	r1, [r4, #0]
 801487c:	6054      	str	r4, [r2, #4]
 801487e:	e7ca      	b.n	8014816 <_free_r+0x22>
 8014880:	bd38      	pop	{r3, r4, r5, pc}
 8014882:	bf00      	nop
 8014884:	2000322c 	.word	0x2000322c

08014888 <sbrk_aligned>:
 8014888:	b570      	push	{r4, r5, r6, lr}
 801488a:	4e0f      	ldr	r6, [pc, #60]	@ (80148c8 <sbrk_aligned+0x40>)
 801488c:	460c      	mov	r4, r1
 801488e:	6831      	ldr	r1, [r6, #0]
 8014890:	4605      	mov	r5, r0
 8014892:	b911      	cbnz	r1, 801489a <sbrk_aligned+0x12>
 8014894:	f000 fe24 	bl	80154e0 <_sbrk_r>
 8014898:	6030      	str	r0, [r6, #0]
 801489a:	4621      	mov	r1, r4
 801489c:	4628      	mov	r0, r5
 801489e:	f000 fe1f 	bl	80154e0 <_sbrk_r>
 80148a2:	1c43      	adds	r3, r0, #1
 80148a4:	d103      	bne.n	80148ae <sbrk_aligned+0x26>
 80148a6:	f04f 34ff 	mov.w	r4, #4294967295
 80148aa:	4620      	mov	r0, r4
 80148ac:	bd70      	pop	{r4, r5, r6, pc}
 80148ae:	1cc4      	adds	r4, r0, #3
 80148b0:	f024 0403 	bic.w	r4, r4, #3
 80148b4:	42a0      	cmp	r0, r4
 80148b6:	d0f8      	beq.n	80148aa <sbrk_aligned+0x22>
 80148b8:	1a21      	subs	r1, r4, r0
 80148ba:	4628      	mov	r0, r5
 80148bc:	f000 fe10 	bl	80154e0 <_sbrk_r>
 80148c0:	3001      	adds	r0, #1
 80148c2:	d1f2      	bne.n	80148aa <sbrk_aligned+0x22>
 80148c4:	e7ef      	b.n	80148a6 <sbrk_aligned+0x1e>
 80148c6:	bf00      	nop
 80148c8:	20003228 	.word	0x20003228

080148cc <_malloc_r>:
 80148cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148d0:	1ccd      	adds	r5, r1, #3
 80148d2:	f025 0503 	bic.w	r5, r5, #3
 80148d6:	3508      	adds	r5, #8
 80148d8:	2d0c      	cmp	r5, #12
 80148da:	bf38      	it	cc
 80148dc:	250c      	movcc	r5, #12
 80148de:	2d00      	cmp	r5, #0
 80148e0:	4606      	mov	r6, r0
 80148e2:	db01      	blt.n	80148e8 <_malloc_r+0x1c>
 80148e4:	42a9      	cmp	r1, r5
 80148e6:	d904      	bls.n	80148f2 <_malloc_r+0x26>
 80148e8:	230c      	movs	r3, #12
 80148ea:	6033      	str	r3, [r6, #0]
 80148ec:	2000      	movs	r0, #0
 80148ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80149c8 <_malloc_r+0xfc>
 80148f6:	f000 f869 	bl	80149cc <__malloc_lock>
 80148fa:	f8d8 3000 	ldr.w	r3, [r8]
 80148fe:	461c      	mov	r4, r3
 8014900:	bb44      	cbnz	r4, 8014954 <_malloc_r+0x88>
 8014902:	4629      	mov	r1, r5
 8014904:	4630      	mov	r0, r6
 8014906:	f7ff ffbf 	bl	8014888 <sbrk_aligned>
 801490a:	1c43      	adds	r3, r0, #1
 801490c:	4604      	mov	r4, r0
 801490e:	d158      	bne.n	80149c2 <_malloc_r+0xf6>
 8014910:	f8d8 4000 	ldr.w	r4, [r8]
 8014914:	4627      	mov	r7, r4
 8014916:	2f00      	cmp	r7, #0
 8014918:	d143      	bne.n	80149a2 <_malloc_r+0xd6>
 801491a:	2c00      	cmp	r4, #0
 801491c:	d04b      	beq.n	80149b6 <_malloc_r+0xea>
 801491e:	6823      	ldr	r3, [r4, #0]
 8014920:	4639      	mov	r1, r7
 8014922:	4630      	mov	r0, r6
 8014924:	eb04 0903 	add.w	r9, r4, r3
 8014928:	f000 fdda 	bl	80154e0 <_sbrk_r>
 801492c:	4581      	cmp	r9, r0
 801492e:	d142      	bne.n	80149b6 <_malloc_r+0xea>
 8014930:	6821      	ldr	r1, [r4, #0]
 8014932:	1a6d      	subs	r5, r5, r1
 8014934:	4629      	mov	r1, r5
 8014936:	4630      	mov	r0, r6
 8014938:	f7ff ffa6 	bl	8014888 <sbrk_aligned>
 801493c:	3001      	adds	r0, #1
 801493e:	d03a      	beq.n	80149b6 <_malloc_r+0xea>
 8014940:	6823      	ldr	r3, [r4, #0]
 8014942:	442b      	add	r3, r5
 8014944:	6023      	str	r3, [r4, #0]
 8014946:	f8d8 3000 	ldr.w	r3, [r8]
 801494a:	685a      	ldr	r2, [r3, #4]
 801494c:	bb62      	cbnz	r2, 80149a8 <_malloc_r+0xdc>
 801494e:	f8c8 7000 	str.w	r7, [r8]
 8014952:	e00f      	b.n	8014974 <_malloc_r+0xa8>
 8014954:	6822      	ldr	r2, [r4, #0]
 8014956:	1b52      	subs	r2, r2, r5
 8014958:	d420      	bmi.n	801499c <_malloc_r+0xd0>
 801495a:	2a0b      	cmp	r2, #11
 801495c:	d917      	bls.n	801498e <_malloc_r+0xc2>
 801495e:	1961      	adds	r1, r4, r5
 8014960:	42a3      	cmp	r3, r4
 8014962:	6025      	str	r5, [r4, #0]
 8014964:	bf18      	it	ne
 8014966:	6059      	strne	r1, [r3, #4]
 8014968:	6863      	ldr	r3, [r4, #4]
 801496a:	bf08      	it	eq
 801496c:	f8c8 1000 	streq.w	r1, [r8]
 8014970:	5162      	str	r2, [r4, r5]
 8014972:	604b      	str	r3, [r1, #4]
 8014974:	4630      	mov	r0, r6
 8014976:	f000 f82f 	bl	80149d8 <__malloc_unlock>
 801497a:	f104 000b 	add.w	r0, r4, #11
 801497e:	1d23      	adds	r3, r4, #4
 8014980:	f020 0007 	bic.w	r0, r0, #7
 8014984:	1ac2      	subs	r2, r0, r3
 8014986:	bf1c      	itt	ne
 8014988:	1a1b      	subne	r3, r3, r0
 801498a:	50a3      	strne	r3, [r4, r2]
 801498c:	e7af      	b.n	80148ee <_malloc_r+0x22>
 801498e:	6862      	ldr	r2, [r4, #4]
 8014990:	42a3      	cmp	r3, r4
 8014992:	bf0c      	ite	eq
 8014994:	f8c8 2000 	streq.w	r2, [r8]
 8014998:	605a      	strne	r2, [r3, #4]
 801499a:	e7eb      	b.n	8014974 <_malloc_r+0xa8>
 801499c:	4623      	mov	r3, r4
 801499e:	6864      	ldr	r4, [r4, #4]
 80149a0:	e7ae      	b.n	8014900 <_malloc_r+0x34>
 80149a2:	463c      	mov	r4, r7
 80149a4:	687f      	ldr	r7, [r7, #4]
 80149a6:	e7b6      	b.n	8014916 <_malloc_r+0x4a>
 80149a8:	461a      	mov	r2, r3
 80149aa:	685b      	ldr	r3, [r3, #4]
 80149ac:	42a3      	cmp	r3, r4
 80149ae:	d1fb      	bne.n	80149a8 <_malloc_r+0xdc>
 80149b0:	2300      	movs	r3, #0
 80149b2:	6053      	str	r3, [r2, #4]
 80149b4:	e7de      	b.n	8014974 <_malloc_r+0xa8>
 80149b6:	230c      	movs	r3, #12
 80149b8:	6033      	str	r3, [r6, #0]
 80149ba:	4630      	mov	r0, r6
 80149bc:	f000 f80c 	bl	80149d8 <__malloc_unlock>
 80149c0:	e794      	b.n	80148ec <_malloc_r+0x20>
 80149c2:	6005      	str	r5, [r0, #0]
 80149c4:	e7d6      	b.n	8014974 <_malloc_r+0xa8>
 80149c6:	bf00      	nop
 80149c8:	2000322c 	.word	0x2000322c

080149cc <__malloc_lock>:
 80149cc:	4801      	ldr	r0, [pc, #4]	@ (80149d4 <__malloc_lock+0x8>)
 80149ce:	f7ff bf00 	b.w	80147d2 <__retarget_lock_acquire_recursive>
 80149d2:	bf00      	nop
 80149d4:	20003224 	.word	0x20003224

080149d8 <__malloc_unlock>:
 80149d8:	4801      	ldr	r0, [pc, #4]	@ (80149e0 <__malloc_unlock+0x8>)
 80149da:	f7ff befb 	b.w	80147d4 <__retarget_lock_release_recursive>
 80149de:	bf00      	nop
 80149e0:	20003224 	.word	0x20003224

080149e4 <__ssputs_r>:
 80149e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149e8:	688e      	ldr	r6, [r1, #8]
 80149ea:	461f      	mov	r7, r3
 80149ec:	42be      	cmp	r6, r7
 80149ee:	680b      	ldr	r3, [r1, #0]
 80149f0:	4682      	mov	sl, r0
 80149f2:	460c      	mov	r4, r1
 80149f4:	4690      	mov	r8, r2
 80149f6:	d82d      	bhi.n	8014a54 <__ssputs_r+0x70>
 80149f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80149fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014a00:	d026      	beq.n	8014a50 <__ssputs_r+0x6c>
 8014a02:	6965      	ldr	r5, [r4, #20]
 8014a04:	6909      	ldr	r1, [r1, #16]
 8014a06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a0a:	eba3 0901 	sub.w	r9, r3, r1
 8014a0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a12:	1c7b      	adds	r3, r7, #1
 8014a14:	444b      	add	r3, r9
 8014a16:	106d      	asrs	r5, r5, #1
 8014a18:	429d      	cmp	r5, r3
 8014a1a:	bf38      	it	cc
 8014a1c:	461d      	movcc	r5, r3
 8014a1e:	0553      	lsls	r3, r2, #21
 8014a20:	d527      	bpl.n	8014a72 <__ssputs_r+0x8e>
 8014a22:	4629      	mov	r1, r5
 8014a24:	f7ff ff52 	bl	80148cc <_malloc_r>
 8014a28:	4606      	mov	r6, r0
 8014a2a:	b360      	cbz	r0, 8014a86 <__ssputs_r+0xa2>
 8014a2c:	6921      	ldr	r1, [r4, #16]
 8014a2e:	464a      	mov	r2, r9
 8014a30:	f7ff fed1 	bl	80147d6 <memcpy>
 8014a34:	89a3      	ldrh	r3, [r4, #12]
 8014a36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014a3e:	81a3      	strh	r3, [r4, #12]
 8014a40:	6126      	str	r6, [r4, #16]
 8014a42:	6165      	str	r5, [r4, #20]
 8014a44:	444e      	add	r6, r9
 8014a46:	eba5 0509 	sub.w	r5, r5, r9
 8014a4a:	6026      	str	r6, [r4, #0]
 8014a4c:	60a5      	str	r5, [r4, #8]
 8014a4e:	463e      	mov	r6, r7
 8014a50:	42be      	cmp	r6, r7
 8014a52:	d900      	bls.n	8014a56 <__ssputs_r+0x72>
 8014a54:	463e      	mov	r6, r7
 8014a56:	6820      	ldr	r0, [r4, #0]
 8014a58:	4632      	mov	r2, r6
 8014a5a:	4641      	mov	r1, r8
 8014a5c:	f000 fcf6 	bl	801544c <memmove>
 8014a60:	68a3      	ldr	r3, [r4, #8]
 8014a62:	1b9b      	subs	r3, r3, r6
 8014a64:	60a3      	str	r3, [r4, #8]
 8014a66:	6823      	ldr	r3, [r4, #0]
 8014a68:	4433      	add	r3, r6
 8014a6a:	6023      	str	r3, [r4, #0]
 8014a6c:	2000      	movs	r0, #0
 8014a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a72:	462a      	mov	r2, r5
 8014a74:	f000 fd44 	bl	8015500 <_realloc_r>
 8014a78:	4606      	mov	r6, r0
 8014a7a:	2800      	cmp	r0, #0
 8014a7c:	d1e0      	bne.n	8014a40 <__ssputs_r+0x5c>
 8014a7e:	6921      	ldr	r1, [r4, #16]
 8014a80:	4650      	mov	r0, sl
 8014a82:	f7ff feb7 	bl	80147f4 <_free_r>
 8014a86:	230c      	movs	r3, #12
 8014a88:	f8ca 3000 	str.w	r3, [sl]
 8014a8c:	89a3      	ldrh	r3, [r4, #12]
 8014a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a92:	81a3      	strh	r3, [r4, #12]
 8014a94:	f04f 30ff 	mov.w	r0, #4294967295
 8014a98:	e7e9      	b.n	8014a6e <__ssputs_r+0x8a>
	...

08014a9c <_svfiprintf_r>:
 8014a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aa0:	4698      	mov	r8, r3
 8014aa2:	898b      	ldrh	r3, [r1, #12]
 8014aa4:	061b      	lsls	r3, r3, #24
 8014aa6:	b09d      	sub	sp, #116	@ 0x74
 8014aa8:	4607      	mov	r7, r0
 8014aaa:	460d      	mov	r5, r1
 8014aac:	4614      	mov	r4, r2
 8014aae:	d510      	bpl.n	8014ad2 <_svfiprintf_r+0x36>
 8014ab0:	690b      	ldr	r3, [r1, #16]
 8014ab2:	b973      	cbnz	r3, 8014ad2 <_svfiprintf_r+0x36>
 8014ab4:	2140      	movs	r1, #64	@ 0x40
 8014ab6:	f7ff ff09 	bl	80148cc <_malloc_r>
 8014aba:	6028      	str	r0, [r5, #0]
 8014abc:	6128      	str	r0, [r5, #16]
 8014abe:	b930      	cbnz	r0, 8014ace <_svfiprintf_r+0x32>
 8014ac0:	230c      	movs	r3, #12
 8014ac2:	603b      	str	r3, [r7, #0]
 8014ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ac8:	b01d      	add	sp, #116	@ 0x74
 8014aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ace:	2340      	movs	r3, #64	@ 0x40
 8014ad0:	616b      	str	r3, [r5, #20]
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ad6:	2320      	movs	r3, #32
 8014ad8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ae0:	2330      	movs	r3, #48	@ 0x30
 8014ae2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014c80 <_svfiprintf_r+0x1e4>
 8014ae6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014aea:	f04f 0901 	mov.w	r9, #1
 8014aee:	4623      	mov	r3, r4
 8014af0:	469a      	mov	sl, r3
 8014af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014af6:	b10a      	cbz	r2, 8014afc <_svfiprintf_r+0x60>
 8014af8:	2a25      	cmp	r2, #37	@ 0x25
 8014afa:	d1f9      	bne.n	8014af0 <_svfiprintf_r+0x54>
 8014afc:	ebba 0b04 	subs.w	fp, sl, r4
 8014b00:	d00b      	beq.n	8014b1a <_svfiprintf_r+0x7e>
 8014b02:	465b      	mov	r3, fp
 8014b04:	4622      	mov	r2, r4
 8014b06:	4629      	mov	r1, r5
 8014b08:	4638      	mov	r0, r7
 8014b0a:	f7ff ff6b 	bl	80149e4 <__ssputs_r>
 8014b0e:	3001      	adds	r0, #1
 8014b10:	f000 80a7 	beq.w	8014c62 <_svfiprintf_r+0x1c6>
 8014b14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014b16:	445a      	add	r2, fp
 8014b18:	9209      	str	r2, [sp, #36]	@ 0x24
 8014b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	f000 809f 	beq.w	8014c62 <_svfiprintf_r+0x1c6>
 8014b24:	2300      	movs	r3, #0
 8014b26:	f04f 32ff 	mov.w	r2, #4294967295
 8014b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b2e:	f10a 0a01 	add.w	sl, sl, #1
 8014b32:	9304      	str	r3, [sp, #16]
 8014b34:	9307      	str	r3, [sp, #28]
 8014b36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014b3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8014b3c:	4654      	mov	r4, sl
 8014b3e:	2205      	movs	r2, #5
 8014b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b44:	484e      	ldr	r0, [pc, #312]	@ (8014c80 <_svfiprintf_r+0x1e4>)
 8014b46:	f7eb fb23 	bl	8000190 <memchr>
 8014b4a:	9a04      	ldr	r2, [sp, #16]
 8014b4c:	b9d8      	cbnz	r0, 8014b86 <_svfiprintf_r+0xea>
 8014b4e:	06d0      	lsls	r0, r2, #27
 8014b50:	bf44      	itt	mi
 8014b52:	2320      	movmi	r3, #32
 8014b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b58:	0711      	lsls	r1, r2, #28
 8014b5a:	bf44      	itt	mi
 8014b5c:	232b      	movmi	r3, #43	@ 0x2b
 8014b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b62:	f89a 3000 	ldrb.w	r3, [sl]
 8014b66:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b68:	d015      	beq.n	8014b96 <_svfiprintf_r+0xfa>
 8014b6a:	9a07      	ldr	r2, [sp, #28]
 8014b6c:	4654      	mov	r4, sl
 8014b6e:	2000      	movs	r0, #0
 8014b70:	f04f 0c0a 	mov.w	ip, #10
 8014b74:	4621      	mov	r1, r4
 8014b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b7a:	3b30      	subs	r3, #48	@ 0x30
 8014b7c:	2b09      	cmp	r3, #9
 8014b7e:	d94b      	bls.n	8014c18 <_svfiprintf_r+0x17c>
 8014b80:	b1b0      	cbz	r0, 8014bb0 <_svfiprintf_r+0x114>
 8014b82:	9207      	str	r2, [sp, #28]
 8014b84:	e014      	b.n	8014bb0 <_svfiprintf_r+0x114>
 8014b86:	eba0 0308 	sub.w	r3, r0, r8
 8014b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8014b8e:	4313      	orrs	r3, r2
 8014b90:	9304      	str	r3, [sp, #16]
 8014b92:	46a2      	mov	sl, r4
 8014b94:	e7d2      	b.n	8014b3c <_svfiprintf_r+0xa0>
 8014b96:	9b03      	ldr	r3, [sp, #12]
 8014b98:	1d19      	adds	r1, r3, #4
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	9103      	str	r1, [sp, #12]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	bfbb      	ittet	lt
 8014ba2:	425b      	neglt	r3, r3
 8014ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8014ba8:	9307      	strge	r3, [sp, #28]
 8014baa:	9307      	strlt	r3, [sp, #28]
 8014bac:	bfb8      	it	lt
 8014bae:	9204      	strlt	r2, [sp, #16]
 8014bb0:	7823      	ldrb	r3, [r4, #0]
 8014bb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8014bb4:	d10a      	bne.n	8014bcc <_svfiprintf_r+0x130>
 8014bb6:	7863      	ldrb	r3, [r4, #1]
 8014bb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8014bba:	d132      	bne.n	8014c22 <_svfiprintf_r+0x186>
 8014bbc:	9b03      	ldr	r3, [sp, #12]
 8014bbe:	1d1a      	adds	r2, r3, #4
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	9203      	str	r2, [sp, #12]
 8014bc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014bc8:	3402      	adds	r4, #2
 8014bca:	9305      	str	r3, [sp, #20]
 8014bcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014c90 <_svfiprintf_r+0x1f4>
 8014bd0:	7821      	ldrb	r1, [r4, #0]
 8014bd2:	2203      	movs	r2, #3
 8014bd4:	4650      	mov	r0, sl
 8014bd6:	f7eb fadb 	bl	8000190 <memchr>
 8014bda:	b138      	cbz	r0, 8014bec <_svfiprintf_r+0x150>
 8014bdc:	9b04      	ldr	r3, [sp, #16]
 8014bde:	eba0 000a 	sub.w	r0, r0, sl
 8014be2:	2240      	movs	r2, #64	@ 0x40
 8014be4:	4082      	lsls	r2, r0
 8014be6:	4313      	orrs	r3, r2
 8014be8:	3401      	adds	r4, #1
 8014bea:	9304      	str	r3, [sp, #16]
 8014bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bf0:	4824      	ldr	r0, [pc, #144]	@ (8014c84 <_svfiprintf_r+0x1e8>)
 8014bf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014bf6:	2206      	movs	r2, #6
 8014bf8:	f7eb faca 	bl	8000190 <memchr>
 8014bfc:	2800      	cmp	r0, #0
 8014bfe:	d036      	beq.n	8014c6e <_svfiprintf_r+0x1d2>
 8014c00:	4b21      	ldr	r3, [pc, #132]	@ (8014c88 <_svfiprintf_r+0x1ec>)
 8014c02:	bb1b      	cbnz	r3, 8014c4c <_svfiprintf_r+0x1b0>
 8014c04:	9b03      	ldr	r3, [sp, #12]
 8014c06:	3307      	adds	r3, #7
 8014c08:	f023 0307 	bic.w	r3, r3, #7
 8014c0c:	3308      	adds	r3, #8
 8014c0e:	9303      	str	r3, [sp, #12]
 8014c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c12:	4433      	add	r3, r6
 8014c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c16:	e76a      	b.n	8014aee <_svfiprintf_r+0x52>
 8014c18:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c1c:	460c      	mov	r4, r1
 8014c1e:	2001      	movs	r0, #1
 8014c20:	e7a8      	b.n	8014b74 <_svfiprintf_r+0xd8>
 8014c22:	2300      	movs	r3, #0
 8014c24:	3401      	adds	r4, #1
 8014c26:	9305      	str	r3, [sp, #20]
 8014c28:	4619      	mov	r1, r3
 8014c2a:	f04f 0c0a 	mov.w	ip, #10
 8014c2e:	4620      	mov	r0, r4
 8014c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c34:	3a30      	subs	r2, #48	@ 0x30
 8014c36:	2a09      	cmp	r2, #9
 8014c38:	d903      	bls.n	8014c42 <_svfiprintf_r+0x1a6>
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d0c6      	beq.n	8014bcc <_svfiprintf_r+0x130>
 8014c3e:	9105      	str	r1, [sp, #20]
 8014c40:	e7c4      	b.n	8014bcc <_svfiprintf_r+0x130>
 8014c42:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c46:	4604      	mov	r4, r0
 8014c48:	2301      	movs	r3, #1
 8014c4a:	e7f0      	b.n	8014c2e <_svfiprintf_r+0x192>
 8014c4c:	ab03      	add	r3, sp, #12
 8014c4e:	9300      	str	r3, [sp, #0]
 8014c50:	462a      	mov	r2, r5
 8014c52:	4b0e      	ldr	r3, [pc, #56]	@ (8014c8c <_svfiprintf_r+0x1f0>)
 8014c54:	a904      	add	r1, sp, #16
 8014c56:	4638      	mov	r0, r7
 8014c58:	f3af 8000 	nop.w
 8014c5c:	1c42      	adds	r2, r0, #1
 8014c5e:	4606      	mov	r6, r0
 8014c60:	d1d6      	bne.n	8014c10 <_svfiprintf_r+0x174>
 8014c62:	89ab      	ldrh	r3, [r5, #12]
 8014c64:	065b      	lsls	r3, r3, #25
 8014c66:	f53f af2d 	bmi.w	8014ac4 <_svfiprintf_r+0x28>
 8014c6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014c6c:	e72c      	b.n	8014ac8 <_svfiprintf_r+0x2c>
 8014c6e:	ab03      	add	r3, sp, #12
 8014c70:	9300      	str	r3, [sp, #0]
 8014c72:	462a      	mov	r2, r5
 8014c74:	4b05      	ldr	r3, [pc, #20]	@ (8014c8c <_svfiprintf_r+0x1f0>)
 8014c76:	a904      	add	r1, sp, #16
 8014c78:	4638      	mov	r0, r7
 8014c7a:	f000 f9bb 	bl	8014ff4 <_printf_i>
 8014c7e:	e7ed      	b.n	8014c5c <_svfiprintf_r+0x1c0>
 8014c80:	08016880 	.word	0x08016880
 8014c84:	0801688a 	.word	0x0801688a
 8014c88:	00000000 	.word	0x00000000
 8014c8c:	080149e5 	.word	0x080149e5
 8014c90:	08016886 	.word	0x08016886

08014c94 <__sfputc_r>:
 8014c94:	6893      	ldr	r3, [r2, #8]
 8014c96:	3b01      	subs	r3, #1
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	b410      	push	{r4}
 8014c9c:	6093      	str	r3, [r2, #8]
 8014c9e:	da08      	bge.n	8014cb2 <__sfputc_r+0x1e>
 8014ca0:	6994      	ldr	r4, [r2, #24]
 8014ca2:	42a3      	cmp	r3, r4
 8014ca4:	db01      	blt.n	8014caa <__sfputc_r+0x16>
 8014ca6:	290a      	cmp	r1, #10
 8014ca8:	d103      	bne.n	8014cb2 <__sfputc_r+0x1e>
 8014caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cae:	f7ff bc6c 	b.w	801458a <__swbuf_r>
 8014cb2:	6813      	ldr	r3, [r2, #0]
 8014cb4:	1c58      	adds	r0, r3, #1
 8014cb6:	6010      	str	r0, [r2, #0]
 8014cb8:	7019      	strb	r1, [r3, #0]
 8014cba:	4608      	mov	r0, r1
 8014cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cc0:	4770      	bx	lr

08014cc2 <__sfputs_r>:
 8014cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cc4:	4606      	mov	r6, r0
 8014cc6:	460f      	mov	r7, r1
 8014cc8:	4614      	mov	r4, r2
 8014cca:	18d5      	adds	r5, r2, r3
 8014ccc:	42ac      	cmp	r4, r5
 8014cce:	d101      	bne.n	8014cd4 <__sfputs_r+0x12>
 8014cd0:	2000      	movs	r0, #0
 8014cd2:	e007      	b.n	8014ce4 <__sfputs_r+0x22>
 8014cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cd8:	463a      	mov	r2, r7
 8014cda:	4630      	mov	r0, r6
 8014cdc:	f7ff ffda 	bl	8014c94 <__sfputc_r>
 8014ce0:	1c43      	adds	r3, r0, #1
 8014ce2:	d1f3      	bne.n	8014ccc <__sfputs_r+0xa>
 8014ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014ce8 <_vfiprintf_r>:
 8014ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cec:	460d      	mov	r5, r1
 8014cee:	b09d      	sub	sp, #116	@ 0x74
 8014cf0:	4614      	mov	r4, r2
 8014cf2:	4698      	mov	r8, r3
 8014cf4:	4606      	mov	r6, r0
 8014cf6:	b118      	cbz	r0, 8014d00 <_vfiprintf_r+0x18>
 8014cf8:	6a03      	ldr	r3, [r0, #32]
 8014cfa:	b90b      	cbnz	r3, 8014d00 <_vfiprintf_r+0x18>
 8014cfc:	f7ff fb26 	bl	801434c <__sinit>
 8014d00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d02:	07d9      	lsls	r1, r3, #31
 8014d04:	d405      	bmi.n	8014d12 <_vfiprintf_r+0x2a>
 8014d06:	89ab      	ldrh	r3, [r5, #12]
 8014d08:	059a      	lsls	r2, r3, #22
 8014d0a:	d402      	bmi.n	8014d12 <_vfiprintf_r+0x2a>
 8014d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d0e:	f7ff fd60 	bl	80147d2 <__retarget_lock_acquire_recursive>
 8014d12:	89ab      	ldrh	r3, [r5, #12]
 8014d14:	071b      	lsls	r3, r3, #28
 8014d16:	d501      	bpl.n	8014d1c <_vfiprintf_r+0x34>
 8014d18:	692b      	ldr	r3, [r5, #16]
 8014d1a:	b99b      	cbnz	r3, 8014d44 <_vfiprintf_r+0x5c>
 8014d1c:	4629      	mov	r1, r5
 8014d1e:	4630      	mov	r0, r6
 8014d20:	f7ff fc72 	bl	8014608 <__swsetup_r>
 8014d24:	b170      	cbz	r0, 8014d44 <_vfiprintf_r+0x5c>
 8014d26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d28:	07dc      	lsls	r4, r3, #31
 8014d2a:	d504      	bpl.n	8014d36 <_vfiprintf_r+0x4e>
 8014d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8014d30:	b01d      	add	sp, #116	@ 0x74
 8014d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d36:	89ab      	ldrh	r3, [r5, #12]
 8014d38:	0598      	lsls	r0, r3, #22
 8014d3a:	d4f7      	bmi.n	8014d2c <_vfiprintf_r+0x44>
 8014d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d3e:	f7ff fd49 	bl	80147d4 <__retarget_lock_release_recursive>
 8014d42:	e7f3      	b.n	8014d2c <_vfiprintf_r+0x44>
 8014d44:	2300      	movs	r3, #0
 8014d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d48:	2320      	movs	r3, #32
 8014d4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d52:	2330      	movs	r3, #48	@ 0x30
 8014d54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014f04 <_vfiprintf_r+0x21c>
 8014d58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014d5c:	f04f 0901 	mov.w	r9, #1
 8014d60:	4623      	mov	r3, r4
 8014d62:	469a      	mov	sl, r3
 8014d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d68:	b10a      	cbz	r2, 8014d6e <_vfiprintf_r+0x86>
 8014d6a:	2a25      	cmp	r2, #37	@ 0x25
 8014d6c:	d1f9      	bne.n	8014d62 <_vfiprintf_r+0x7a>
 8014d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8014d72:	d00b      	beq.n	8014d8c <_vfiprintf_r+0xa4>
 8014d74:	465b      	mov	r3, fp
 8014d76:	4622      	mov	r2, r4
 8014d78:	4629      	mov	r1, r5
 8014d7a:	4630      	mov	r0, r6
 8014d7c:	f7ff ffa1 	bl	8014cc2 <__sfputs_r>
 8014d80:	3001      	adds	r0, #1
 8014d82:	f000 80a7 	beq.w	8014ed4 <_vfiprintf_r+0x1ec>
 8014d86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d88:	445a      	add	r2, fp
 8014d8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8014d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	f000 809f 	beq.w	8014ed4 <_vfiprintf_r+0x1ec>
 8014d96:	2300      	movs	r3, #0
 8014d98:	f04f 32ff 	mov.w	r2, #4294967295
 8014d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014da0:	f10a 0a01 	add.w	sl, sl, #1
 8014da4:	9304      	str	r3, [sp, #16]
 8014da6:	9307      	str	r3, [sp, #28]
 8014da8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014dac:	931a      	str	r3, [sp, #104]	@ 0x68
 8014dae:	4654      	mov	r4, sl
 8014db0:	2205      	movs	r2, #5
 8014db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014db6:	4853      	ldr	r0, [pc, #332]	@ (8014f04 <_vfiprintf_r+0x21c>)
 8014db8:	f7eb f9ea 	bl	8000190 <memchr>
 8014dbc:	9a04      	ldr	r2, [sp, #16]
 8014dbe:	b9d8      	cbnz	r0, 8014df8 <_vfiprintf_r+0x110>
 8014dc0:	06d1      	lsls	r1, r2, #27
 8014dc2:	bf44      	itt	mi
 8014dc4:	2320      	movmi	r3, #32
 8014dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014dca:	0713      	lsls	r3, r2, #28
 8014dcc:	bf44      	itt	mi
 8014dce:	232b      	movmi	r3, #43	@ 0x2b
 8014dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8014dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8014dda:	d015      	beq.n	8014e08 <_vfiprintf_r+0x120>
 8014ddc:	9a07      	ldr	r2, [sp, #28]
 8014dde:	4654      	mov	r4, sl
 8014de0:	2000      	movs	r0, #0
 8014de2:	f04f 0c0a 	mov.w	ip, #10
 8014de6:	4621      	mov	r1, r4
 8014de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014dec:	3b30      	subs	r3, #48	@ 0x30
 8014dee:	2b09      	cmp	r3, #9
 8014df0:	d94b      	bls.n	8014e8a <_vfiprintf_r+0x1a2>
 8014df2:	b1b0      	cbz	r0, 8014e22 <_vfiprintf_r+0x13a>
 8014df4:	9207      	str	r2, [sp, #28]
 8014df6:	e014      	b.n	8014e22 <_vfiprintf_r+0x13a>
 8014df8:	eba0 0308 	sub.w	r3, r0, r8
 8014dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8014e00:	4313      	orrs	r3, r2
 8014e02:	9304      	str	r3, [sp, #16]
 8014e04:	46a2      	mov	sl, r4
 8014e06:	e7d2      	b.n	8014dae <_vfiprintf_r+0xc6>
 8014e08:	9b03      	ldr	r3, [sp, #12]
 8014e0a:	1d19      	adds	r1, r3, #4
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	9103      	str	r1, [sp, #12]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	bfbb      	ittet	lt
 8014e14:	425b      	neglt	r3, r3
 8014e16:	f042 0202 	orrlt.w	r2, r2, #2
 8014e1a:	9307      	strge	r3, [sp, #28]
 8014e1c:	9307      	strlt	r3, [sp, #28]
 8014e1e:	bfb8      	it	lt
 8014e20:	9204      	strlt	r2, [sp, #16]
 8014e22:	7823      	ldrb	r3, [r4, #0]
 8014e24:	2b2e      	cmp	r3, #46	@ 0x2e
 8014e26:	d10a      	bne.n	8014e3e <_vfiprintf_r+0x156>
 8014e28:	7863      	ldrb	r3, [r4, #1]
 8014e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e2c:	d132      	bne.n	8014e94 <_vfiprintf_r+0x1ac>
 8014e2e:	9b03      	ldr	r3, [sp, #12]
 8014e30:	1d1a      	adds	r2, r3, #4
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	9203      	str	r2, [sp, #12]
 8014e36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014e3a:	3402      	adds	r4, #2
 8014e3c:	9305      	str	r3, [sp, #20]
 8014e3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014f14 <_vfiprintf_r+0x22c>
 8014e42:	7821      	ldrb	r1, [r4, #0]
 8014e44:	2203      	movs	r2, #3
 8014e46:	4650      	mov	r0, sl
 8014e48:	f7eb f9a2 	bl	8000190 <memchr>
 8014e4c:	b138      	cbz	r0, 8014e5e <_vfiprintf_r+0x176>
 8014e4e:	9b04      	ldr	r3, [sp, #16]
 8014e50:	eba0 000a 	sub.w	r0, r0, sl
 8014e54:	2240      	movs	r2, #64	@ 0x40
 8014e56:	4082      	lsls	r2, r0
 8014e58:	4313      	orrs	r3, r2
 8014e5a:	3401      	adds	r4, #1
 8014e5c:	9304      	str	r3, [sp, #16]
 8014e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e62:	4829      	ldr	r0, [pc, #164]	@ (8014f08 <_vfiprintf_r+0x220>)
 8014e64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014e68:	2206      	movs	r2, #6
 8014e6a:	f7eb f991 	bl	8000190 <memchr>
 8014e6e:	2800      	cmp	r0, #0
 8014e70:	d03f      	beq.n	8014ef2 <_vfiprintf_r+0x20a>
 8014e72:	4b26      	ldr	r3, [pc, #152]	@ (8014f0c <_vfiprintf_r+0x224>)
 8014e74:	bb1b      	cbnz	r3, 8014ebe <_vfiprintf_r+0x1d6>
 8014e76:	9b03      	ldr	r3, [sp, #12]
 8014e78:	3307      	adds	r3, #7
 8014e7a:	f023 0307 	bic.w	r3, r3, #7
 8014e7e:	3308      	adds	r3, #8
 8014e80:	9303      	str	r3, [sp, #12]
 8014e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e84:	443b      	add	r3, r7
 8014e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e88:	e76a      	b.n	8014d60 <_vfiprintf_r+0x78>
 8014e8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e8e:	460c      	mov	r4, r1
 8014e90:	2001      	movs	r0, #1
 8014e92:	e7a8      	b.n	8014de6 <_vfiprintf_r+0xfe>
 8014e94:	2300      	movs	r3, #0
 8014e96:	3401      	adds	r4, #1
 8014e98:	9305      	str	r3, [sp, #20]
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	f04f 0c0a 	mov.w	ip, #10
 8014ea0:	4620      	mov	r0, r4
 8014ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ea6:	3a30      	subs	r2, #48	@ 0x30
 8014ea8:	2a09      	cmp	r2, #9
 8014eaa:	d903      	bls.n	8014eb4 <_vfiprintf_r+0x1cc>
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d0c6      	beq.n	8014e3e <_vfiprintf_r+0x156>
 8014eb0:	9105      	str	r1, [sp, #20]
 8014eb2:	e7c4      	b.n	8014e3e <_vfiprintf_r+0x156>
 8014eb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8014eb8:	4604      	mov	r4, r0
 8014eba:	2301      	movs	r3, #1
 8014ebc:	e7f0      	b.n	8014ea0 <_vfiprintf_r+0x1b8>
 8014ebe:	ab03      	add	r3, sp, #12
 8014ec0:	9300      	str	r3, [sp, #0]
 8014ec2:	462a      	mov	r2, r5
 8014ec4:	4b12      	ldr	r3, [pc, #72]	@ (8014f10 <_vfiprintf_r+0x228>)
 8014ec6:	a904      	add	r1, sp, #16
 8014ec8:	4630      	mov	r0, r6
 8014eca:	f3af 8000 	nop.w
 8014ece:	4607      	mov	r7, r0
 8014ed0:	1c78      	adds	r0, r7, #1
 8014ed2:	d1d6      	bne.n	8014e82 <_vfiprintf_r+0x19a>
 8014ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014ed6:	07d9      	lsls	r1, r3, #31
 8014ed8:	d405      	bmi.n	8014ee6 <_vfiprintf_r+0x1fe>
 8014eda:	89ab      	ldrh	r3, [r5, #12]
 8014edc:	059a      	lsls	r2, r3, #22
 8014ede:	d402      	bmi.n	8014ee6 <_vfiprintf_r+0x1fe>
 8014ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ee2:	f7ff fc77 	bl	80147d4 <__retarget_lock_release_recursive>
 8014ee6:	89ab      	ldrh	r3, [r5, #12]
 8014ee8:	065b      	lsls	r3, r3, #25
 8014eea:	f53f af1f 	bmi.w	8014d2c <_vfiprintf_r+0x44>
 8014eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014ef0:	e71e      	b.n	8014d30 <_vfiprintf_r+0x48>
 8014ef2:	ab03      	add	r3, sp, #12
 8014ef4:	9300      	str	r3, [sp, #0]
 8014ef6:	462a      	mov	r2, r5
 8014ef8:	4b05      	ldr	r3, [pc, #20]	@ (8014f10 <_vfiprintf_r+0x228>)
 8014efa:	a904      	add	r1, sp, #16
 8014efc:	4630      	mov	r0, r6
 8014efe:	f000 f879 	bl	8014ff4 <_printf_i>
 8014f02:	e7e4      	b.n	8014ece <_vfiprintf_r+0x1e6>
 8014f04:	08016880 	.word	0x08016880
 8014f08:	0801688a 	.word	0x0801688a
 8014f0c:	00000000 	.word	0x00000000
 8014f10:	08014cc3 	.word	0x08014cc3
 8014f14:	08016886 	.word	0x08016886

08014f18 <_printf_common>:
 8014f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f1c:	4616      	mov	r6, r2
 8014f1e:	4698      	mov	r8, r3
 8014f20:	688a      	ldr	r2, [r1, #8]
 8014f22:	690b      	ldr	r3, [r1, #16]
 8014f24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014f28:	4293      	cmp	r3, r2
 8014f2a:	bfb8      	it	lt
 8014f2c:	4613      	movlt	r3, r2
 8014f2e:	6033      	str	r3, [r6, #0]
 8014f30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014f34:	4607      	mov	r7, r0
 8014f36:	460c      	mov	r4, r1
 8014f38:	b10a      	cbz	r2, 8014f3e <_printf_common+0x26>
 8014f3a:	3301      	adds	r3, #1
 8014f3c:	6033      	str	r3, [r6, #0]
 8014f3e:	6823      	ldr	r3, [r4, #0]
 8014f40:	0699      	lsls	r1, r3, #26
 8014f42:	bf42      	ittt	mi
 8014f44:	6833      	ldrmi	r3, [r6, #0]
 8014f46:	3302      	addmi	r3, #2
 8014f48:	6033      	strmi	r3, [r6, #0]
 8014f4a:	6825      	ldr	r5, [r4, #0]
 8014f4c:	f015 0506 	ands.w	r5, r5, #6
 8014f50:	d106      	bne.n	8014f60 <_printf_common+0x48>
 8014f52:	f104 0a19 	add.w	sl, r4, #25
 8014f56:	68e3      	ldr	r3, [r4, #12]
 8014f58:	6832      	ldr	r2, [r6, #0]
 8014f5a:	1a9b      	subs	r3, r3, r2
 8014f5c:	42ab      	cmp	r3, r5
 8014f5e:	dc26      	bgt.n	8014fae <_printf_common+0x96>
 8014f60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014f64:	6822      	ldr	r2, [r4, #0]
 8014f66:	3b00      	subs	r3, #0
 8014f68:	bf18      	it	ne
 8014f6a:	2301      	movne	r3, #1
 8014f6c:	0692      	lsls	r2, r2, #26
 8014f6e:	d42b      	bmi.n	8014fc8 <_printf_common+0xb0>
 8014f70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014f74:	4641      	mov	r1, r8
 8014f76:	4638      	mov	r0, r7
 8014f78:	47c8      	blx	r9
 8014f7a:	3001      	adds	r0, #1
 8014f7c:	d01e      	beq.n	8014fbc <_printf_common+0xa4>
 8014f7e:	6823      	ldr	r3, [r4, #0]
 8014f80:	6922      	ldr	r2, [r4, #16]
 8014f82:	f003 0306 	and.w	r3, r3, #6
 8014f86:	2b04      	cmp	r3, #4
 8014f88:	bf02      	ittt	eq
 8014f8a:	68e5      	ldreq	r5, [r4, #12]
 8014f8c:	6833      	ldreq	r3, [r6, #0]
 8014f8e:	1aed      	subeq	r5, r5, r3
 8014f90:	68a3      	ldr	r3, [r4, #8]
 8014f92:	bf0c      	ite	eq
 8014f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f98:	2500      	movne	r5, #0
 8014f9a:	4293      	cmp	r3, r2
 8014f9c:	bfc4      	itt	gt
 8014f9e:	1a9b      	subgt	r3, r3, r2
 8014fa0:	18ed      	addgt	r5, r5, r3
 8014fa2:	2600      	movs	r6, #0
 8014fa4:	341a      	adds	r4, #26
 8014fa6:	42b5      	cmp	r5, r6
 8014fa8:	d11a      	bne.n	8014fe0 <_printf_common+0xc8>
 8014faa:	2000      	movs	r0, #0
 8014fac:	e008      	b.n	8014fc0 <_printf_common+0xa8>
 8014fae:	2301      	movs	r3, #1
 8014fb0:	4652      	mov	r2, sl
 8014fb2:	4641      	mov	r1, r8
 8014fb4:	4638      	mov	r0, r7
 8014fb6:	47c8      	blx	r9
 8014fb8:	3001      	adds	r0, #1
 8014fba:	d103      	bne.n	8014fc4 <_printf_common+0xac>
 8014fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8014fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fc4:	3501      	adds	r5, #1
 8014fc6:	e7c6      	b.n	8014f56 <_printf_common+0x3e>
 8014fc8:	18e1      	adds	r1, r4, r3
 8014fca:	1c5a      	adds	r2, r3, #1
 8014fcc:	2030      	movs	r0, #48	@ 0x30
 8014fce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014fd2:	4422      	add	r2, r4
 8014fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014fd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014fdc:	3302      	adds	r3, #2
 8014fde:	e7c7      	b.n	8014f70 <_printf_common+0x58>
 8014fe0:	2301      	movs	r3, #1
 8014fe2:	4622      	mov	r2, r4
 8014fe4:	4641      	mov	r1, r8
 8014fe6:	4638      	mov	r0, r7
 8014fe8:	47c8      	blx	r9
 8014fea:	3001      	adds	r0, #1
 8014fec:	d0e6      	beq.n	8014fbc <_printf_common+0xa4>
 8014fee:	3601      	adds	r6, #1
 8014ff0:	e7d9      	b.n	8014fa6 <_printf_common+0x8e>
	...

08014ff4 <_printf_i>:
 8014ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014ff8:	7e0f      	ldrb	r7, [r1, #24]
 8014ffa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014ffc:	2f78      	cmp	r7, #120	@ 0x78
 8014ffe:	4691      	mov	r9, r2
 8015000:	4680      	mov	r8, r0
 8015002:	460c      	mov	r4, r1
 8015004:	469a      	mov	sl, r3
 8015006:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801500a:	d807      	bhi.n	801501c <_printf_i+0x28>
 801500c:	2f62      	cmp	r7, #98	@ 0x62
 801500e:	d80a      	bhi.n	8015026 <_printf_i+0x32>
 8015010:	2f00      	cmp	r7, #0
 8015012:	f000 80d1 	beq.w	80151b8 <_printf_i+0x1c4>
 8015016:	2f58      	cmp	r7, #88	@ 0x58
 8015018:	f000 80b8 	beq.w	801518c <_printf_i+0x198>
 801501c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015020:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015024:	e03a      	b.n	801509c <_printf_i+0xa8>
 8015026:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801502a:	2b15      	cmp	r3, #21
 801502c:	d8f6      	bhi.n	801501c <_printf_i+0x28>
 801502e:	a101      	add	r1, pc, #4	@ (adr r1, 8015034 <_printf_i+0x40>)
 8015030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015034:	0801508d 	.word	0x0801508d
 8015038:	080150a1 	.word	0x080150a1
 801503c:	0801501d 	.word	0x0801501d
 8015040:	0801501d 	.word	0x0801501d
 8015044:	0801501d 	.word	0x0801501d
 8015048:	0801501d 	.word	0x0801501d
 801504c:	080150a1 	.word	0x080150a1
 8015050:	0801501d 	.word	0x0801501d
 8015054:	0801501d 	.word	0x0801501d
 8015058:	0801501d 	.word	0x0801501d
 801505c:	0801501d 	.word	0x0801501d
 8015060:	0801519f 	.word	0x0801519f
 8015064:	080150cb 	.word	0x080150cb
 8015068:	08015159 	.word	0x08015159
 801506c:	0801501d 	.word	0x0801501d
 8015070:	0801501d 	.word	0x0801501d
 8015074:	080151c1 	.word	0x080151c1
 8015078:	0801501d 	.word	0x0801501d
 801507c:	080150cb 	.word	0x080150cb
 8015080:	0801501d 	.word	0x0801501d
 8015084:	0801501d 	.word	0x0801501d
 8015088:	08015161 	.word	0x08015161
 801508c:	6833      	ldr	r3, [r6, #0]
 801508e:	1d1a      	adds	r2, r3, #4
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	6032      	str	r2, [r6, #0]
 8015094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015098:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801509c:	2301      	movs	r3, #1
 801509e:	e09c      	b.n	80151da <_printf_i+0x1e6>
 80150a0:	6833      	ldr	r3, [r6, #0]
 80150a2:	6820      	ldr	r0, [r4, #0]
 80150a4:	1d19      	adds	r1, r3, #4
 80150a6:	6031      	str	r1, [r6, #0]
 80150a8:	0606      	lsls	r6, r0, #24
 80150aa:	d501      	bpl.n	80150b0 <_printf_i+0xbc>
 80150ac:	681d      	ldr	r5, [r3, #0]
 80150ae:	e003      	b.n	80150b8 <_printf_i+0xc4>
 80150b0:	0645      	lsls	r5, r0, #25
 80150b2:	d5fb      	bpl.n	80150ac <_printf_i+0xb8>
 80150b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80150b8:	2d00      	cmp	r5, #0
 80150ba:	da03      	bge.n	80150c4 <_printf_i+0xd0>
 80150bc:	232d      	movs	r3, #45	@ 0x2d
 80150be:	426d      	negs	r5, r5
 80150c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80150c4:	4858      	ldr	r0, [pc, #352]	@ (8015228 <_printf_i+0x234>)
 80150c6:	230a      	movs	r3, #10
 80150c8:	e011      	b.n	80150ee <_printf_i+0xfa>
 80150ca:	6821      	ldr	r1, [r4, #0]
 80150cc:	6833      	ldr	r3, [r6, #0]
 80150ce:	0608      	lsls	r0, r1, #24
 80150d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80150d4:	d402      	bmi.n	80150dc <_printf_i+0xe8>
 80150d6:	0649      	lsls	r1, r1, #25
 80150d8:	bf48      	it	mi
 80150da:	b2ad      	uxthmi	r5, r5
 80150dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80150de:	4852      	ldr	r0, [pc, #328]	@ (8015228 <_printf_i+0x234>)
 80150e0:	6033      	str	r3, [r6, #0]
 80150e2:	bf14      	ite	ne
 80150e4:	230a      	movne	r3, #10
 80150e6:	2308      	moveq	r3, #8
 80150e8:	2100      	movs	r1, #0
 80150ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80150ee:	6866      	ldr	r6, [r4, #4]
 80150f0:	60a6      	str	r6, [r4, #8]
 80150f2:	2e00      	cmp	r6, #0
 80150f4:	db05      	blt.n	8015102 <_printf_i+0x10e>
 80150f6:	6821      	ldr	r1, [r4, #0]
 80150f8:	432e      	orrs	r6, r5
 80150fa:	f021 0104 	bic.w	r1, r1, #4
 80150fe:	6021      	str	r1, [r4, #0]
 8015100:	d04b      	beq.n	801519a <_printf_i+0x1a6>
 8015102:	4616      	mov	r6, r2
 8015104:	fbb5 f1f3 	udiv	r1, r5, r3
 8015108:	fb03 5711 	mls	r7, r3, r1, r5
 801510c:	5dc7      	ldrb	r7, [r0, r7]
 801510e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015112:	462f      	mov	r7, r5
 8015114:	42bb      	cmp	r3, r7
 8015116:	460d      	mov	r5, r1
 8015118:	d9f4      	bls.n	8015104 <_printf_i+0x110>
 801511a:	2b08      	cmp	r3, #8
 801511c:	d10b      	bne.n	8015136 <_printf_i+0x142>
 801511e:	6823      	ldr	r3, [r4, #0]
 8015120:	07df      	lsls	r7, r3, #31
 8015122:	d508      	bpl.n	8015136 <_printf_i+0x142>
 8015124:	6923      	ldr	r3, [r4, #16]
 8015126:	6861      	ldr	r1, [r4, #4]
 8015128:	4299      	cmp	r1, r3
 801512a:	bfde      	ittt	le
 801512c:	2330      	movle	r3, #48	@ 0x30
 801512e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015132:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015136:	1b92      	subs	r2, r2, r6
 8015138:	6122      	str	r2, [r4, #16]
 801513a:	f8cd a000 	str.w	sl, [sp]
 801513e:	464b      	mov	r3, r9
 8015140:	aa03      	add	r2, sp, #12
 8015142:	4621      	mov	r1, r4
 8015144:	4640      	mov	r0, r8
 8015146:	f7ff fee7 	bl	8014f18 <_printf_common>
 801514a:	3001      	adds	r0, #1
 801514c:	d14a      	bne.n	80151e4 <_printf_i+0x1f0>
 801514e:	f04f 30ff 	mov.w	r0, #4294967295
 8015152:	b004      	add	sp, #16
 8015154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015158:	6823      	ldr	r3, [r4, #0]
 801515a:	f043 0320 	orr.w	r3, r3, #32
 801515e:	6023      	str	r3, [r4, #0]
 8015160:	4832      	ldr	r0, [pc, #200]	@ (801522c <_printf_i+0x238>)
 8015162:	2778      	movs	r7, #120	@ 0x78
 8015164:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015168:	6823      	ldr	r3, [r4, #0]
 801516a:	6831      	ldr	r1, [r6, #0]
 801516c:	061f      	lsls	r7, r3, #24
 801516e:	f851 5b04 	ldr.w	r5, [r1], #4
 8015172:	d402      	bmi.n	801517a <_printf_i+0x186>
 8015174:	065f      	lsls	r7, r3, #25
 8015176:	bf48      	it	mi
 8015178:	b2ad      	uxthmi	r5, r5
 801517a:	6031      	str	r1, [r6, #0]
 801517c:	07d9      	lsls	r1, r3, #31
 801517e:	bf44      	itt	mi
 8015180:	f043 0320 	orrmi.w	r3, r3, #32
 8015184:	6023      	strmi	r3, [r4, #0]
 8015186:	b11d      	cbz	r5, 8015190 <_printf_i+0x19c>
 8015188:	2310      	movs	r3, #16
 801518a:	e7ad      	b.n	80150e8 <_printf_i+0xf4>
 801518c:	4826      	ldr	r0, [pc, #152]	@ (8015228 <_printf_i+0x234>)
 801518e:	e7e9      	b.n	8015164 <_printf_i+0x170>
 8015190:	6823      	ldr	r3, [r4, #0]
 8015192:	f023 0320 	bic.w	r3, r3, #32
 8015196:	6023      	str	r3, [r4, #0]
 8015198:	e7f6      	b.n	8015188 <_printf_i+0x194>
 801519a:	4616      	mov	r6, r2
 801519c:	e7bd      	b.n	801511a <_printf_i+0x126>
 801519e:	6833      	ldr	r3, [r6, #0]
 80151a0:	6825      	ldr	r5, [r4, #0]
 80151a2:	6961      	ldr	r1, [r4, #20]
 80151a4:	1d18      	adds	r0, r3, #4
 80151a6:	6030      	str	r0, [r6, #0]
 80151a8:	062e      	lsls	r6, r5, #24
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	d501      	bpl.n	80151b2 <_printf_i+0x1be>
 80151ae:	6019      	str	r1, [r3, #0]
 80151b0:	e002      	b.n	80151b8 <_printf_i+0x1c4>
 80151b2:	0668      	lsls	r0, r5, #25
 80151b4:	d5fb      	bpl.n	80151ae <_printf_i+0x1ba>
 80151b6:	8019      	strh	r1, [r3, #0]
 80151b8:	2300      	movs	r3, #0
 80151ba:	6123      	str	r3, [r4, #16]
 80151bc:	4616      	mov	r6, r2
 80151be:	e7bc      	b.n	801513a <_printf_i+0x146>
 80151c0:	6833      	ldr	r3, [r6, #0]
 80151c2:	1d1a      	adds	r2, r3, #4
 80151c4:	6032      	str	r2, [r6, #0]
 80151c6:	681e      	ldr	r6, [r3, #0]
 80151c8:	6862      	ldr	r2, [r4, #4]
 80151ca:	2100      	movs	r1, #0
 80151cc:	4630      	mov	r0, r6
 80151ce:	f7ea ffdf 	bl	8000190 <memchr>
 80151d2:	b108      	cbz	r0, 80151d8 <_printf_i+0x1e4>
 80151d4:	1b80      	subs	r0, r0, r6
 80151d6:	6060      	str	r0, [r4, #4]
 80151d8:	6863      	ldr	r3, [r4, #4]
 80151da:	6123      	str	r3, [r4, #16]
 80151dc:	2300      	movs	r3, #0
 80151de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80151e2:	e7aa      	b.n	801513a <_printf_i+0x146>
 80151e4:	6923      	ldr	r3, [r4, #16]
 80151e6:	4632      	mov	r2, r6
 80151e8:	4649      	mov	r1, r9
 80151ea:	4640      	mov	r0, r8
 80151ec:	47d0      	blx	sl
 80151ee:	3001      	adds	r0, #1
 80151f0:	d0ad      	beq.n	801514e <_printf_i+0x15a>
 80151f2:	6823      	ldr	r3, [r4, #0]
 80151f4:	079b      	lsls	r3, r3, #30
 80151f6:	d413      	bmi.n	8015220 <_printf_i+0x22c>
 80151f8:	68e0      	ldr	r0, [r4, #12]
 80151fa:	9b03      	ldr	r3, [sp, #12]
 80151fc:	4298      	cmp	r0, r3
 80151fe:	bfb8      	it	lt
 8015200:	4618      	movlt	r0, r3
 8015202:	e7a6      	b.n	8015152 <_printf_i+0x15e>
 8015204:	2301      	movs	r3, #1
 8015206:	4632      	mov	r2, r6
 8015208:	4649      	mov	r1, r9
 801520a:	4640      	mov	r0, r8
 801520c:	47d0      	blx	sl
 801520e:	3001      	adds	r0, #1
 8015210:	d09d      	beq.n	801514e <_printf_i+0x15a>
 8015212:	3501      	adds	r5, #1
 8015214:	68e3      	ldr	r3, [r4, #12]
 8015216:	9903      	ldr	r1, [sp, #12]
 8015218:	1a5b      	subs	r3, r3, r1
 801521a:	42ab      	cmp	r3, r5
 801521c:	dcf2      	bgt.n	8015204 <_printf_i+0x210>
 801521e:	e7eb      	b.n	80151f8 <_printf_i+0x204>
 8015220:	2500      	movs	r5, #0
 8015222:	f104 0619 	add.w	r6, r4, #25
 8015226:	e7f5      	b.n	8015214 <_printf_i+0x220>
 8015228:	08016891 	.word	0x08016891
 801522c:	080168a2 	.word	0x080168a2

08015230 <__sflush_r>:
 8015230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015238:	0716      	lsls	r6, r2, #28
 801523a:	4605      	mov	r5, r0
 801523c:	460c      	mov	r4, r1
 801523e:	d454      	bmi.n	80152ea <__sflush_r+0xba>
 8015240:	684b      	ldr	r3, [r1, #4]
 8015242:	2b00      	cmp	r3, #0
 8015244:	dc02      	bgt.n	801524c <__sflush_r+0x1c>
 8015246:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015248:	2b00      	cmp	r3, #0
 801524a:	dd48      	ble.n	80152de <__sflush_r+0xae>
 801524c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801524e:	2e00      	cmp	r6, #0
 8015250:	d045      	beq.n	80152de <__sflush_r+0xae>
 8015252:	2300      	movs	r3, #0
 8015254:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015258:	682f      	ldr	r7, [r5, #0]
 801525a:	6a21      	ldr	r1, [r4, #32]
 801525c:	602b      	str	r3, [r5, #0]
 801525e:	d030      	beq.n	80152c2 <__sflush_r+0x92>
 8015260:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015262:	89a3      	ldrh	r3, [r4, #12]
 8015264:	0759      	lsls	r1, r3, #29
 8015266:	d505      	bpl.n	8015274 <__sflush_r+0x44>
 8015268:	6863      	ldr	r3, [r4, #4]
 801526a:	1ad2      	subs	r2, r2, r3
 801526c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801526e:	b10b      	cbz	r3, 8015274 <__sflush_r+0x44>
 8015270:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015272:	1ad2      	subs	r2, r2, r3
 8015274:	2300      	movs	r3, #0
 8015276:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015278:	6a21      	ldr	r1, [r4, #32]
 801527a:	4628      	mov	r0, r5
 801527c:	47b0      	blx	r6
 801527e:	1c43      	adds	r3, r0, #1
 8015280:	89a3      	ldrh	r3, [r4, #12]
 8015282:	d106      	bne.n	8015292 <__sflush_r+0x62>
 8015284:	6829      	ldr	r1, [r5, #0]
 8015286:	291d      	cmp	r1, #29
 8015288:	d82b      	bhi.n	80152e2 <__sflush_r+0xb2>
 801528a:	4a2a      	ldr	r2, [pc, #168]	@ (8015334 <__sflush_r+0x104>)
 801528c:	40ca      	lsrs	r2, r1
 801528e:	07d6      	lsls	r6, r2, #31
 8015290:	d527      	bpl.n	80152e2 <__sflush_r+0xb2>
 8015292:	2200      	movs	r2, #0
 8015294:	6062      	str	r2, [r4, #4]
 8015296:	04d9      	lsls	r1, r3, #19
 8015298:	6922      	ldr	r2, [r4, #16]
 801529a:	6022      	str	r2, [r4, #0]
 801529c:	d504      	bpl.n	80152a8 <__sflush_r+0x78>
 801529e:	1c42      	adds	r2, r0, #1
 80152a0:	d101      	bne.n	80152a6 <__sflush_r+0x76>
 80152a2:	682b      	ldr	r3, [r5, #0]
 80152a4:	b903      	cbnz	r3, 80152a8 <__sflush_r+0x78>
 80152a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80152a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80152aa:	602f      	str	r7, [r5, #0]
 80152ac:	b1b9      	cbz	r1, 80152de <__sflush_r+0xae>
 80152ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80152b2:	4299      	cmp	r1, r3
 80152b4:	d002      	beq.n	80152bc <__sflush_r+0x8c>
 80152b6:	4628      	mov	r0, r5
 80152b8:	f7ff fa9c 	bl	80147f4 <_free_r>
 80152bc:	2300      	movs	r3, #0
 80152be:	6363      	str	r3, [r4, #52]	@ 0x34
 80152c0:	e00d      	b.n	80152de <__sflush_r+0xae>
 80152c2:	2301      	movs	r3, #1
 80152c4:	4628      	mov	r0, r5
 80152c6:	47b0      	blx	r6
 80152c8:	4602      	mov	r2, r0
 80152ca:	1c50      	adds	r0, r2, #1
 80152cc:	d1c9      	bne.n	8015262 <__sflush_r+0x32>
 80152ce:	682b      	ldr	r3, [r5, #0]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d0c6      	beq.n	8015262 <__sflush_r+0x32>
 80152d4:	2b1d      	cmp	r3, #29
 80152d6:	d001      	beq.n	80152dc <__sflush_r+0xac>
 80152d8:	2b16      	cmp	r3, #22
 80152da:	d11e      	bne.n	801531a <__sflush_r+0xea>
 80152dc:	602f      	str	r7, [r5, #0]
 80152de:	2000      	movs	r0, #0
 80152e0:	e022      	b.n	8015328 <__sflush_r+0xf8>
 80152e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80152e6:	b21b      	sxth	r3, r3
 80152e8:	e01b      	b.n	8015322 <__sflush_r+0xf2>
 80152ea:	690f      	ldr	r7, [r1, #16]
 80152ec:	2f00      	cmp	r7, #0
 80152ee:	d0f6      	beq.n	80152de <__sflush_r+0xae>
 80152f0:	0793      	lsls	r3, r2, #30
 80152f2:	680e      	ldr	r6, [r1, #0]
 80152f4:	bf08      	it	eq
 80152f6:	694b      	ldreq	r3, [r1, #20]
 80152f8:	600f      	str	r7, [r1, #0]
 80152fa:	bf18      	it	ne
 80152fc:	2300      	movne	r3, #0
 80152fe:	eba6 0807 	sub.w	r8, r6, r7
 8015302:	608b      	str	r3, [r1, #8]
 8015304:	f1b8 0f00 	cmp.w	r8, #0
 8015308:	dde9      	ble.n	80152de <__sflush_r+0xae>
 801530a:	6a21      	ldr	r1, [r4, #32]
 801530c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801530e:	4643      	mov	r3, r8
 8015310:	463a      	mov	r2, r7
 8015312:	4628      	mov	r0, r5
 8015314:	47b0      	blx	r6
 8015316:	2800      	cmp	r0, #0
 8015318:	dc08      	bgt.n	801532c <__sflush_r+0xfc>
 801531a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801531e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015322:	81a3      	strh	r3, [r4, #12]
 8015324:	f04f 30ff 	mov.w	r0, #4294967295
 8015328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801532c:	4407      	add	r7, r0
 801532e:	eba8 0800 	sub.w	r8, r8, r0
 8015332:	e7e7      	b.n	8015304 <__sflush_r+0xd4>
 8015334:	20400001 	.word	0x20400001

08015338 <_fflush_r>:
 8015338:	b538      	push	{r3, r4, r5, lr}
 801533a:	690b      	ldr	r3, [r1, #16]
 801533c:	4605      	mov	r5, r0
 801533e:	460c      	mov	r4, r1
 8015340:	b913      	cbnz	r3, 8015348 <_fflush_r+0x10>
 8015342:	2500      	movs	r5, #0
 8015344:	4628      	mov	r0, r5
 8015346:	bd38      	pop	{r3, r4, r5, pc}
 8015348:	b118      	cbz	r0, 8015352 <_fflush_r+0x1a>
 801534a:	6a03      	ldr	r3, [r0, #32]
 801534c:	b90b      	cbnz	r3, 8015352 <_fflush_r+0x1a>
 801534e:	f7fe fffd 	bl	801434c <__sinit>
 8015352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d0f3      	beq.n	8015342 <_fflush_r+0xa>
 801535a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801535c:	07d0      	lsls	r0, r2, #31
 801535e:	d404      	bmi.n	801536a <_fflush_r+0x32>
 8015360:	0599      	lsls	r1, r3, #22
 8015362:	d402      	bmi.n	801536a <_fflush_r+0x32>
 8015364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015366:	f7ff fa34 	bl	80147d2 <__retarget_lock_acquire_recursive>
 801536a:	4628      	mov	r0, r5
 801536c:	4621      	mov	r1, r4
 801536e:	f7ff ff5f 	bl	8015230 <__sflush_r>
 8015372:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015374:	07da      	lsls	r2, r3, #31
 8015376:	4605      	mov	r5, r0
 8015378:	d4e4      	bmi.n	8015344 <_fflush_r+0xc>
 801537a:	89a3      	ldrh	r3, [r4, #12]
 801537c:	059b      	lsls	r3, r3, #22
 801537e:	d4e1      	bmi.n	8015344 <_fflush_r+0xc>
 8015380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015382:	f7ff fa27 	bl	80147d4 <__retarget_lock_release_recursive>
 8015386:	e7dd      	b.n	8015344 <_fflush_r+0xc>

08015388 <__swhatbuf_r>:
 8015388:	b570      	push	{r4, r5, r6, lr}
 801538a:	460c      	mov	r4, r1
 801538c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015390:	2900      	cmp	r1, #0
 8015392:	b096      	sub	sp, #88	@ 0x58
 8015394:	4615      	mov	r5, r2
 8015396:	461e      	mov	r6, r3
 8015398:	da0d      	bge.n	80153b6 <__swhatbuf_r+0x2e>
 801539a:	89a3      	ldrh	r3, [r4, #12]
 801539c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80153a0:	f04f 0100 	mov.w	r1, #0
 80153a4:	bf14      	ite	ne
 80153a6:	2340      	movne	r3, #64	@ 0x40
 80153a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80153ac:	2000      	movs	r0, #0
 80153ae:	6031      	str	r1, [r6, #0]
 80153b0:	602b      	str	r3, [r5, #0]
 80153b2:	b016      	add	sp, #88	@ 0x58
 80153b4:	bd70      	pop	{r4, r5, r6, pc}
 80153b6:	466a      	mov	r2, sp
 80153b8:	f000 f870 	bl	801549c <_fstat_r>
 80153bc:	2800      	cmp	r0, #0
 80153be:	dbec      	blt.n	801539a <__swhatbuf_r+0x12>
 80153c0:	9901      	ldr	r1, [sp, #4]
 80153c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80153c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80153ca:	4259      	negs	r1, r3
 80153cc:	4159      	adcs	r1, r3
 80153ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80153d2:	e7eb      	b.n	80153ac <__swhatbuf_r+0x24>

080153d4 <__smakebuf_r>:
 80153d4:	898b      	ldrh	r3, [r1, #12]
 80153d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80153d8:	079d      	lsls	r5, r3, #30
 80153da:	4606      	mov	r6, r0
 80153dc:	460c      	mov	r4, r1
 80153de:	d507      	bpl.n	80153f0 <__smakebuf_r+0x1c>
 80153e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80153e4:	6023      	str	r3, [r4, #0]
 80153e6:	6123      	str	r3, [r4, #16]
 80153e8:	2301      	movs	r3, #1
 80153ea:	6163      	str	r3, [r4, #20]
 80153ec:	b003      	add	sp, #12
 80153ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153f0:	ab01      	add	r3, sp, #4
 80153f2:	466a      	mov	r2, sp
 80153f4:	f7ff ffc8 	bl	8015388 <__swhatbuf_r>
 80153f8:	9f00      	ldr	r7, [sp, #0]
 80153fa:	4605      	mov	r5, r0
 80153fc:	4639      	mov	r1, r7
 80153fe:	4630      	mov	r0, r6
 8015400:	f7ff fa64 	bl	80148cc <_malloc_r>
 8015404:	b948      	cbnz	r0, 801541a <__smakebuf_r+0x46>
 8015406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801540a:	059a      	lsls	r2, r3, #22
 801540c:	d4ee      	bmi.n	80153ec <__smakebuf_r+0x18>
 801540e:	f023 0303 	bic.w	r3, r3, #3
 8015412:	f043 0302 	orr.w	r3, r3, #2
 8015416:	81a3      	strh	r3, [r4, #12]
 8015418:	e7e2      	b.n	80153e0 <__smakebuf_r+0xc>
 801541a:	89a3      	ldrh	r3, [r4, #12]
 801541c:	6020      	str	r0, [r4, #0]
 801541e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015422:	81a3      	strh	r3, [r4, #12]
 8015424:	9b01      	ldr	r3, [sp, #4]
 8015426:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801542a:	b15b      	cbz	r3, 8015444 <__smakebuf_r+0x70>
 801542c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015430:	4630      	mov	r0, r6
 8015432:	f000 f845 	bl	80154c0 <_isatty_r>
 8015436:	b128      	cbz	r0, 8015444 <__smakebuf_r+0x70>
 8015438:	89a3      	ldrh	r3, [r4, #12]
 801543a:	f023 0303 	bic.w	r3, r3, #3
 801543e:	f043 0301 	orr.w	r3, r3, #1
 8015442:	81a3      	strh	r3, [r4, #12]
 8015444:	89a3      	ldrh	r3, [r4, #12]
 8015446:	431d      	orrs	r5, r3
 8015448:	81a5      	strh	r5, [r4, #12]
 801544a:	e7cf      	b.n	80153ec <__smakebuf_r+0x18>

0801544c <memmove>:
 801544c:	4288      	cmp	r0, r1
 801544e:	b510      	push	{r4, lr}
 8015450:	eb01 0402 	add.w	r4, r1, r2
 8015454:	d902      	bls.n	801545c <memmove+0x10>
 8015456:	4284      	cmp	r4, r0
 8015458:	4623      	mov	r3, r4
 801545a:	d807      	bhi.n	801546c <memmove+0x20>
 801545c:	1e43      	subs	r3, r0, #1
 801545e:	42a1      	cmp	r1, r4
 8015460:	d008      	beq.n	8015474 <memmove+0x28>
 8015462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015466:	f803 2f01 	strb.w	r2, [r3, #1]!
 801546a:	e7f8      	b.n	801545e <memmove+0x12>
 801546c:	4402      	add	r2, r0
 801546e:	4601      	mov	r1, r0
 8015470:	428a      	cmp	r2, r1
 8015472:	d100      	bne.n	8015476 <memmove+0x2a>
 8015474:	bd10      	pop	{r4, pc}
 8015476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801547a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801547e:	e7f7      	b.n	8015470 <memmove+0x24>

08015480 <strchr>:
 8015480:	b2c9      	uxtb	r1, r1
 8015482:	4603      	mov	r3, r0
 8015484:	4618      	mov	r0, r3
 8015486:	f813 2b01 	ldrb.w	r2, [r3], #1
 801548a:	b112      	cbz	r2, 8015492 <strchr+0x12>
 801548c:	428a      	cmp	r2, r1
 801548e:	d1f9      	bne.n	8015484 <strchr+0x4>
 8015490:	4770      	bx	lr
 8015492:	2900      	cmp	r1, #0
 8015494:	bf18      	it	ne
 8015496:	2000      	movne	r0, #0
 8015498:	4770      	bx	lr
	...

0801549c <_fstat_r>:
 801549c:	b538      	push	{r3, r4, r5, lr}
 801549e:	4d07      	ldr	r5, [pc, #28]	@ (80154bc <_fstat_r+0x20>)
 80154a0:	2300      	movs	r3, #0
 80154a2:	4604      	mov	r4, r0
 80154a4:	4608      	mov	r0, r1
 80154a6:	4611      	mov	r1, r2
 80154a8:	602b      	str	r3, [r5, #0]
 80154aa:	f7ed fc1e 	bl	8002cea <_fstat>
 80154ae:	1c43      	adds	r3, r0, #1
 80154b0:	d102      	bne.n	80154b8 <_fstat_r+0x1c>
 80154b2:	682b      	ldr	r3, [r5, #0]
 80154b4:	b103      	cbz	r3, 80154b8 <_fstat_r+0x1c>
 80154b6:	6023      	str	r3, [r4, #0]
 80154b8:	bd38      	pop	{r3, r4, r5, pc}
 80154ba:	bf00      	nop
 80154bc:	20003220 	.word	0x20003220

080154c0 <_isatty_r>:
 80154c0:	b538      	push	{r3, r4, r5, lr}
 80154c2:	4d06      	ldr	r5, [pc, #24]	@ (80154dc <_isatty_r+0x1c>)
 80154c4:	2300      	movs	r3, #0
 80154c6:	4604      	mov	r4, r0
 80154c8:	4608      	mov	r0, r1
 80154ca:	602b      	str	r3, [r5, #0]
 80154cc:	f7ed fc1d 	bl	8002d0a <_isatty>
 80154d0:	1c43      	adds	r3, r0, #1
 80154d2:	d102      	bne.n	80154da <_isatty_r+0x1a>
 80154d4:	682b      	ldr	r3, [r5, #0]
 80154d6:	b103      	cbz	r3, 80154da <_isatty_r+0x1a>
 80154d8:	6023      	str	r3, [r4, #0]
 80154da:	bd38      	pop	{r3, r4, r5, pc}
 80154dc:	20003220 	.word	0x20003220

080154e0 <_sbrk_r>:
 80154e0:	b538      	push	{r3, r4, r5, lr}
 80154e2:	4d06      	ldr	r5, [pc, #24]	@ (80154fc <_sbrk_r+0x1c>)
 80154e4:	2300      	movs	r3, #0
 80154e6:	4604      	mov	r4, r0
 80154e8:	4608      	mov	r0, r1
 80154ea:	602b      	str	r3, [r5, #0]
 80154ec:	f7ed fc26 	bl	8002d3c <_sbrk>
 80154f0:	1c43      	adds	r3, r0, #1
 80154f2:	d102      	bne.n	80154fa <_sbrk_r+0x1a>
 80154f4:	682b      	ldr	r3, [r5, #0]
 80154f6:	b103      	cbz	r3, 80154fa <_sbrk_r+0x1a>
 80154f8:	6023      	str	r3, [r4, #0]
 80154fa:	bd38      	pop	{r3, r4, r5, pc}
 80154fc:	20003220 	.word	0x20003220

08015500 <_realloc_r>:
 8015500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015504:	4607      	mov	r7, r0
 8015506:	4614      	mov	r4, r2
 8015508:	460d      	mov	r5, r1
 801550a:	b921      	cbnz	r1, 8015516 <_realloc_r+0x16>
 801550c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015510:	4611      	mov	r1, r2
 8015512:	f7ff b9db 	b.w	80148cc <_malloc_r>
 8015516:	b92a      	cbnz	r2, 8015524 <_realloc_r+0x24>
 8015518:	f7ff f96c 	bl	80147f4 <_free_r>
 801551c:	4625      	mov	r5, r4
 801551e:	4628      	mov	r0, r5
 8015520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015524:	f000 f81a 	bl	801555c <_malloc_usable_size_r>
 8015528:	4284      	cmp	r4, r0
 801552a:	4606      	mov	r6, r0
 801552c:	d802      	bhi.n	8015534 <_realloc_r+0x34>
 801552e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015532:	d8f4      	bhi.n	801551e <_realloc_r+0x1e>
 8015534:	4621      	mov	r1, r4
 8015536:	4638      	mov	r0, r7
 8015538:	f7ff f9c8 	bl	80148cc <_malloc_r>
 801553c:	4680      	mov	r8, r0
 801553e:	b908      	cbnz	r0, 8015544 <_realloc_r+0x44>
 8015540:	4645      	mov	r5, r8
 8015542:	e7ec      	b.n	801551e <_realloc_r+0x1e>
 8015544:	42b4      	cmp	r4, r6
 8015546:	4622      	mov	r2, r4
 8015548:	4629      	mov	r1, r5
 801554a:	bf28      	it	cs
 801554c:	4632      	movcs	r2, r6
 801554e:	f7ff f942 	bl	80147d6 <memcpy>
 8015552:	4629      	mov	r1, r5
 8015554:	4638      	mov	r0, r7
 8015556:	f7ff f94d 	bl	80147f4 <_free_r>
 801555a:	e7f1      	b.n	8015540 <_realloc_r+0x40>

0801555c <_malloc_usable_size_r>:
 801555c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015560:	1f18      	subs	r0, r3, #4
 8015562:	2b00      	cmp	r3, #0
 8015564:	bfbc      	itt	lt
 8015566:	580b      	ldrlt	r3, [r1, r0]
 8015568:	18c0      	addlt	r0, r0, r3
 801556a:	4770      	bx	lr

0801556c <_init>:
 801556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801556e:	bf00      	nop
 8015570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015572:	bc08      	pop	{r3}
 8015574:	469e      	mov	lr, r3
 8015576:	4770      	bx	lr

08015578 <_fini>:
 8015578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801557a:	bf00      	nop
 801557c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801557e:	bc08      	pop	{r3}
 8015580:	469e      	mov	lr, r3
 8015582:	4770      	bx	lr
